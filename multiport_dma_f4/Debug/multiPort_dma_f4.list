
multiPort_dma_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08006c28  08006c28  00007c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe0  08006fe0  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006fe0  08006fe0  00007fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe8  08006fe8  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe8  08006fe8  00007fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fec  08006fec  00007fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006ff0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001d4  080071c4  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080071c4  00008588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095d5  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001beb  00000000  00000000  000117d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  000133c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063d  00000000  00000000  00013c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168d9  00000000  00000000  00014245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a465  00000000  00000000  0002ab1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878ca  00000000  00000000  00034f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a4  00000000  00000000  000bc890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000bf934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c10 	.word	0x08006c10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006c10 	.word	0x08006c10

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
#define UART_BUFFER_SIZE	128
#define TEMP_BUFFER_SIZE  100
volatile uint8_t uartBuffer[UART_BUFFER_SIZE];
volatile uint8_t tempBuffer[TEMP_BUFFER_SIZE];
int main(void)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af02      	add	r7, sp, #8
  HAL_Init();
 8000ece:	f000 fcc1 	bl	8001854 <HAL_Init>
  SystemClock_Config();
 8000ed2:	f000 f839 	bl	8000f48 <SystemClock_Config>
  MX_GPIO_Init();
 8000ed6:	f000 f8f3 	bl	80010c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eda:	f000 f8c9 	bl	8001070 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ede:	f000 f89d 	bl	800101c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  float floatTemp = -60.3;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <main+0x68>)
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  COM_Init(0, &huart1,(uint8_t*)& uartBuffer, UART_BUFFER_SIZE, 100);
 8000ee6:	2364      	movs	r3, #100	@ 0x64
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2380      	movs	r3, #128	@ 0x80
 8000eec:	4a11      	ldr	r2, [pc, #68]	@ (8000f34 <main+0x6c>)
 8000eee:	4912      	ldr	r1, [pc, #72]	@ (8000f38 <main+0x70>)
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 fb37 	bl	8001564 <COM_Init>
  uint8_t header;


  while (1)
  {
	  if(COM_Read((uint8_t*)tempBuffer,3))
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	4810      	ldr	r0, [pc, #64]	@ (8000f3c <main+0x74>)
 8000efa:	f000 fc6b 	bl	80017d4 <COM_Read>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f8      	beq.n	8000ef6 <main+0x2e>
	  {
		  //myPrintf("%s\n",tempBuffer);
      if(!strcmp((char*)tempBuffer,"aaa"))
 8000f04:	490e      	ldr	r1, [pc, #56]	@ (8000f40 <main+0x78>)
 8000f06:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <main+0x74>)
 8000f08:	f7ff f96a 	bl	80001e0 <strcmp>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f1      	bne.n	8000ef6 <main+0x2e>
      {
        uint8_t answer[] = "test receive dma and send dma uart\n";
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <main+0x7c>)
 8000f14:	463c      	mov	r4, r7
 8000f16:	461d      	mov	r5, r3
 8000f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	6023      	str	r3, [r4, #0]
        COM_Write((uint8_t*)answer,sizeof(answer));
 8000f24:	463b      	mov	r3, r7
 8000f26:	2124      	movs	r1, #36	@ 0x24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fb95 	bl	8001658 <COM_Write>
	  if(COM_Read((uint8_t*)tempBuffer,3))
 8000f2e:	e7e2      	b.n	8000ef6 <main+0x2e>
 8000f30:	c2713333 	.word	0xc2713333
 8000f34:	200002f8 	.word	0x200002f8
 8000f38:	200001f0 	.word	0x200001f0
 8000f3c:	20000378 	.word	0x20000378
 8000f40:	08006c28 	.word	0x08006c28
 8000f44:	08006c2c 	.word	0x08006c2c

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	@ 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	@ 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 ff39 	bl	8004dce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f94:	4a20      	ldr	r2, [pc, #128]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fc0:	2354      	movs	r3, #84	@ 0x54
 8000fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fb49 	bl	8002668 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fdc:	f000 f898 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fdab 	bl	8002b58 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001008:	f000 f882 	bl	8001110 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3750      	adds	r7, #80	@ 0x50
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <MX_USART1_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001054:	f001 ff60 	bl	8002f18 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f857 	bl	8001110 <Error_Handler>
  }


}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200001f0 	.word	0x200001f0
 800106c:	40011000 	.word	0x40011000

08001070 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_DMA_Init+0x4c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <MX_DMA_Init+0x4c>)
 8001080:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <MX_DMA_Init+0x4c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	203a      	movs	r0, #58	@ 0x3a
 8001098:	f000 fd29 	bl	8001aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800109c:	203a      	movs	r0, #58	@ 0x3a
 800109e:	f000 fd42 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2046      	movs	r0, #70	@ 0x46
 80010a8:	f000 fd21 	bl	8001aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010ac:	2046      	movs	r0, #70	@ 0x46
 80010ae:	f000 fd3a 	bl	8001b26 <HAL_NVIC_EnableIRQ>

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <MX_GPIO_Init+0x4c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <MX_GPIO_Init+0x4c>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <MX_GPIO_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_GPIO_Init+0x4c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a08      	ldr	r2, [pc, #32]	@ (800110c <MX_GPIO_Init+0x4c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_GPIO_Init+0x4c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <HAL_MspInit+0x4c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_MspInit+0x4c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	@ 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a4c      	ldr	r2, [pc, #304]	@ (80012bc <HAL_UART_MspInit+0x150>)
 800118a:	4293      	cmp	r3, r2
 800118c:	f040 8092 	bne.w	80012b4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	4b4a      	ldr	r3, [pc, #296]	@ (80012c0 <HAL_UART_MspInit+0x154>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001198:	4a49      	ldr	r2, [pc, #292]	@ (80012c0 <HAL_UART_MspInit+0x154>)
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a0:	4b47      	ldr	r3, [pc, #284]	@ (80012c0 <HAL_UART_MspInit+0x154>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4b43      	ldr	r3, [pc, #268]	@ (80012c0 <HAL_UART_MspInit+0x154>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a42      	ldr	r2, [pc, #264]	@ (80012c0 <HAL_UART_MspInit+0x154>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80011bc:	4b40      	ldr	r3, [pc, #256]	@ (80012c0 <HAL_UART_MspInit+0x154>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011c8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011da:	2307      	movs	r3, #7
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4837      	ldr	r0, [pc, #220]	@ (80012c4 <HAL_UART_MspInit+0x158>)
 80011e6:	f001 f8bb 	bl	8002360 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80011ea:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 80011ec:	4a37      	ldr	r2, [pc, #220]	@ (80012cc <HAL_UART_MspInit+0x160>)
 80011ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80011f0:	4b35      	ldr	r3, [pc, #212]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 80011f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f8:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fe:	4b32      	ldr	r3, [pc, #200]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 8001206:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800120a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120c:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001212:	4b2d      	ldr	r3, [pc, #180]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001218:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 800121a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800121e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001220:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001226:	4b28      	ldr	r3, [pc, #160]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800122c:	4826      	ldr	r0, [pc, #152]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 800122e:	f000 fc95 	bl	8001b5c <HAL_DMA_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001238:	f7ff ff6a 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a22      	ldr	r2, [pc, #136]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 8001240:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001242:	4a21      	ldr	r2, [pc, #132]	@ (80012c8 <HAL_UART_MspInit+0x15c>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001248:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800124a:	4a22      	ldr	r2, [pc, #136]	@ (80012d4 <HAL_UART_MspInit+0x168>)
 800124c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001250:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001254:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001256:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001258:	2240      	movs	r2, #64	@ 0x40
 800125a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001268:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001288:	4811      	ldr	r0, [pc, #68]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800128a:	f000 fc67 	bl	8001b5c <HAL_DMA_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001294:	f7ff ff3c 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 800129c:	639a      	str	r2, [r3, #56]	@ 0x38
 800129e:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <HAL_UART_MspInit+0x164>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2025      	movs	r0, #37	@ 0x25
 80012aa:	f000 fc20 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012ae:	2025      	movs	r0, #37	@ 0x25
 80012b0:	f000 fc39 	bl	8001b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	20000238 	.word	0x20000238
 80012cc:	40026440 	.word	0x40026440
 80012d0:	20000298 	.word	0x20000298
 80012d4:	400264b8 	.word	0x400264b8

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <NMI_Handler+0x4>

080012e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <MemManage_Handler+0x4>

080012f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <UsageFault_Handler+0x4>

08001300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132e:	f000 fae3 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <USART1_IRQHandler+0x10>)
 800133e:	f001 fed1 	bl	80030e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001f0 	.word	0x200001f0

0800134c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <DMA2_Stream2_IRQHandler+0x10>)
 8001352:	f000 fd9b 	bl	8001e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000238 	.word	0x20000238

08001360 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <DMA2_Stream7_IRQHandler+0x10>)
 8001366:	f000 fd91 	bl	8001e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000298 	.word	0x20000298

08001374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <_kill>:

int _kill(int pid, int sig)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800138e:	f003 fd71 	bl	8004e74 <__errno>
 8001392:	4603      	mov	r3, r0
 8001394:	2216      	movs	r2, #22
 8001396:	601a      	str	r2, [r3, #0]
  return -1;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_exit>:

void _exit (int status)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffe7 	bl	8001384 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b6:	bf00      	nop
 80013b8:	e7fd      	b.n	80013b6 <_exit+0x12>

080013ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e00a      	b.n	80013e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013cc:	f3af 8000 	nop.w
 80013d0:	4601      	mov	r1, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	60ba      	str	r2, [r7, #8]
 80013d8:	b2ca      	uxtb	r2, r1
 80013da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbf0      	blt.n	80013cc <_read+0x12>
  }

  return len;
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e009      	b.n	800141a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	60ba      	str	r2, [r7, #8]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	dbf1      	blt.n	8001406 <_write+0x12>
  }
  return len;
 8001422:	687b      	ldr	r3, [r7, #4]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_close>:

int _close(int file)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001454:	605a      	str	r2, [r3, #4]
  return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_isatty>:

int _isatty(int file)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f003 fcd6 	bl	8004e74 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20018000 	.word	0x20018000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	200003dc 	.word	0x200003dc
 80014fc:	20000588 	.word	0x20000588

08001500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <dummy485>:

COM_TPort *myPortPtr;
COM_TPort myPort[COM_MAX_NUM];

void dummy485()
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <COM_Select>:

void COM_Select(uint8_t n)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
    myPortPtr = &myPort[n];
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <COM_Select+0x28>)
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <COM_Select+0x2c>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200003e4 	.word	0x200003e4
 8001560:	200003e0 	.word	0x200003e0

08001564 <COM_Init>:
void COM_Init(uint8_t n,
            UART_HandleTypeDef *huartPtr,
            uint8_t *rxBufPtr,
            uint16_t rxBufSize,
            uint16_t timeOut)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	461a      	mov	r2, r3
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	4613      	mov	r3, r2
 8001576:	81bb      	strh	r3, [r7, #12]
    COM_Select(n);
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ffda 	bl	8001534 <COM_Select>
    myPortPtr->huartPtr = huartPtr;
 8001580:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <COM_Init+0xc0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	601a      	str	r2, [r3, #0]
    myPortPtr->ndtrPtr = NDTR_PTR(myPortPtr);
 8001588:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <COM_Init+0xc0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <COM_Init+0xc0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3204      	adds	r2, #4
 8001598:	605a      	str	r2, [r3, #4]
    myPortPtr->rxBufPtr = rxBufPtr;
 800159a:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <COM_Init+0xc0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	609a      	str	r2, [r3, #8]
    myPortPtr->rxBufSize = rxBufSize;
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <COM_Init+0xc0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	89ba      	ldrh	r2, [r7, #12]
 80015a8:	819a      	strh	r2, [r3, #12]
    myPortPtr->rxPos = 0;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <COM_Init+0xc0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	81da      	strh	r2, [r3, #14]
    myPortPtr->timeOut = timeOut;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <COM_Init+0xc0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	8c3a      	ldrh	r2, [r7, #32]
 80015b8:	821a      	strh	r2, [r3, #16]
    myPortPtr->rxFail = false;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <COM_Init+0xc0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	749a      	strb	r2, [r3, #18]
    myPortPtr->_rx485rx = dummy485;
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <COM_Init+0xc0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <COM_Init+0xc4>)
 80015c8:	619a      	str	r2, [r3, #24]
    myPortPtr->_rx485tx = dummy485;
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <COM_Init+0xc0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a16      	ldr	r2, [pc, #88]	@ (8001628 <COM_Init+0xc4>)
 80015d0:	615a      	str	r2, [r3, #20]
    //memset((uint8_t *)&myPortPtr->rxBufPtr,(char)0,myPortPtr->rxBufSize);
    for(int i=0; i < rxBufSize; i++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e007      	b.n	80015e8 <COM_Init+0x84>
    {
    	rxBufPtr[i] = 0;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
    for(int i=0; i < rxBufSize; i++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	89bb      	ldrh	r3, [r7, #12]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf3      	blt.n	80015d8 <COM_Init+0x74>
    }
    HAL_UART_Receive_DMA(huartPtr, (uint8_t *) rxBufPtr, rxBufSize);
 80015f0:	89bb      	ldrh	r3, [r7, #12]
 80015f2:	461a      	mov	r2, r3
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	68b8      	ldr	r0, [r7, #8]
 80015f8:	f001 fd4e 	bl	8003098 <HAL_UART_Receive_DMA>
    
    // không kích hoạt ngắt lỗi
    CLEAR_BIT(huartPtr->Instance->CR3,USART_CR3_EIE);
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(huartPtr->Instance->CR1, USART_CR1_PEIE);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800161a:	60da      	str	r2, [r3, #12]
    // không kích hoạt ngắt khi có lỗi chẵn lẻ
}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200003e0 	.word	0x200003e0
 8001628:	08001525 	.word	0x08001525

0800162c <COM_WaitTxDone>:
    myPortPtr->_rx485tx = f485tx;
    myPortPtr->_rx485rx();
}

void COM_WaitTxDone(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
    while(!READ_BIT(MY_ISR(myPortPtr),MY_ISR_TC))
 8001630:	e000      	b.n	8001634 <COM_WaitTxDone+0x8>
    {
        asm("nop");
 8001632:	bf00      	nop
    while(!READ_BIT(MY_ISR(myPortPtr),MY_ISR_TC))
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <COM_WaitTxDone+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f5      	beq.n	8001632 <COM_WaitTxDone+0x6>
    }

}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	200003e0 	.word	0x200003e0

08001658 <COM_Write>:

void COM_Write(void *pData, uint16_t Size)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
    //myPrintf("pdata :%d\n",*(uint8_t*)pData);
    COM_WaitTxDone();
 8001664:	f7ff ffe2 	bl	800162c <COM_WaitTxDone>
    //myPortPtr->_rx485tx();
    HAL_UART_Transmit_DMA(myPortPtr->huartPtr,(uint8_t*)pData,Size);
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <COM_Write+0x2c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f001 fca0 	bl	8002fb8 <HAL_UART_Transmit_DMA>
    COM_WaitTxDone();
 8001678:	f7ff ffd8 	bl	800162c <COM_WaitTxDone>
    //myPortPtr->_rx485rx();
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200003e0 	.word	0x200003e0

08001688 <COM_ReadTimeout>:
{
    return COM_ReadByteTimeout(b, myPortPtr->timeOut);
}

bool COM_ReadTimeout(uint8_t *destBuffer, uint16_t needLen, uint16_t timeOut)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	803b      	strh	r3, [r7, #0]
	uint16_t UART_BUFFER_SIZE=myPortPtr->rxBufSize;
 8001698:	4b4d      	ldr	r3, [pc, #308]	@ (80017d0 <COM_ReadTimeout+0x148>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	899b      	ldrh	r3, [r3, #12]
 800169e:	827b      	strh	r3, [r7, #18]
	uint16_t rxPos=myPortPtr->rxPos;
 80016a0:	4b4b      	ldr	r3, [pc, #300]	@ (80017d0 <COM_ReadTimeout+0x148>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	89db      	ldrh	r3, [r3, #14]
 80016a6:	83fb      	strh	r3, [r7, #30]
	uint16_t dataLen=0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	83bb      	strh	r3, [r7, #28]
	uint16_t dmaPos=UART_BUFFER_SIZE-*myPortPtr->ndtrPtr;
 80016ac:	4b48      	ldr	r3, [pc, #288]	@ (80017d0 <COM_ReadTimeout+0x148>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	8a7a      	ldrh	r2, [r7, #18]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	837b      	strh	r3, [r7, #26]
	uint16_t dmaPosOld=dmaPos;
 80016bc:	8b7b      	ldrh	r3, [r7, #26]
 80016be:	823b      	strh	r3, [r7, #16]

	uint32_t tickStart=HAL_GetTick();
 80016c0:	f000 f92e 	bl	8001920 <HAL_GetTick>
 80016c4:	6178      	str	r0, [r7, #20]
	do {
		dmaPosOld=dmaPos;
 80016c6:	8b7b      	ldrh	r3, [r7, #26]
 80016c8:	823b      	strh	r3, [r7, #16]
		dmaPos=UART_BUFFER_SIZE-*myPortPtr->ndtrPtr;
 80016ca:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <COM_ReadTimeout+0x148>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	8a7a      	ldrh	r2, [r7, #18]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	837b      	strh	r3, [r7, #26]

		if (dmaPos!=dmaPosOld) {tickStart=HAL_GetTick();} // new byte arrived
 80016da:	8b7a      	ldrh	r2, [r7, #26]
 80016dc:	8a3b      	ldrh	r3, [r7, #16]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d002      	beq.n	80016e8 <COM_ReadTimeout+0x60>
 80016e2:	f000 f91d 	bl	8001920 <HAL_GetTick>
 80016e6:	6178      	str	r0, [r7, #20]

		if (dmaPos>rxPos) {	dataLen=dmaPos-rxPos; }
 80016e8:	8b7a      	ldrh	r2, [r7, #26]
 80016ea:	8bfb      	ldrh	r3, [r7, #30]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d903      	bls.n	80016f8 <COM_ReadTimeout+0x70>
 80016f0:	8b7a      	ldrh	r2, [r7, #26]
 80016f2:	8bfb      	ldrh	r3, [r7, #30]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	83bb      	strh	r3, [r7, #28]

		if (dmaPos<rxPos)
 80016f8:	8b7a      	ldrh	r2, [r7, #26]
 80016fa:	8bfb      	ldrh	r3, [r7, #30]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <COM_ReadTimeout+0x88>
		{
			dataLen=UART_BUFFER_SIZE-rxPos;
 8001700:	8a7a      	ldrh	r2, [r7, #18]
 8001702:	8bfb      	ldrh	r3, [r7, #30]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	83bb      	strh	r3, [r7, #28]
			dataLen+=dmaPos;
 8001708:	8bba      	ldrh	r2, [r7, #28]
 800170a:	8b7b      	ldrh	r3, [r7, #26]
 800170c:	4413      	add	r3, r2
 800170e:	83bb      	strh	r3, [r7, #28]
		}
	} while ( (dataLen<needLen) && ((HAL_GetTick() - tickStart) < timeOut) );
 8001710:	8bba      	ldrh	r2, [r7, #28]
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <COM_ReadTimeout+0xa0>
 8001718:	f000 f902 	bl	8001920 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	1ad2      	subs	r2, r2, r3
 8001722:	883b      	ldrh	r3, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d3ce      	bcc.n	80016c6 <COM_ReadTimeout+0x3e>

	if (dataLen>=needLen)
 8001728:	8bba      	ldrh	r2, [r7, #28]
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	429a      	cmp	r2, r3
 800172e:	d33e      	bcc.n	80017ae <COM_ReadTimeout+0x126>
	{
		if(rxPos+needLen-1<UART_BUFFER_SIZE)
 8001730:	8bfa      	ldrh	r2, [r7, #30]
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	441a      	add	r2, r3
 8001736:	8a7b      	ldrh	r3, [r7, #18]
 8001738:	429a      	cmp	r2, r3
 800173a:	dc0a      	bgt.n	8001752 <COM_ReadTimeout+0xca>
		{
			memmove((uint8_t *)&destBuffer[0],(uint8_t *)&(myPortPtr->rxBufPtr)[rxPos],needLen);
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <COM_ReadTimeout+0x148>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	8bfb      	ldrh	r3, [r7, #30]
 8001744:	4413      	add	r3, r2
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f003 fb25 	bl	8004d9a <memmove>
 8001750:	e01b      	b.n	800178a <COM_ReadTimeout+0x102>
		}
		else
		{
			uint16_t tailLen=UART_BUFFER_SIZE-rxPos;
 8001752:	8a7a      	ldrh	r2, [r7, #18]
 8001754:	8bfb      	ldrh	r3, [r7, #30]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	81fb      	strh	r3, [r7, #14]
			uint16_t headLen=needLen-tailLen;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	81bb      	strh	r3, [r7, #12]
			memmove((uint8_t *)&destBuffer[0],(uint8_t *)&(myPortPtr->rxBufPtr)[rxPos],tailLen);
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <COM_ReadTimeout+0x148>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	8bfb      	ldrh	r3, [r7, #30]
 800176a:	4413      	add	r3, r2
 800176c:	89fa      	ldrh	r2, [r7, #14]
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f003 fb12 	bl	8004d9a <memmove>
			memmove((uint8_t *)&destBuffer[tailLen],(uint8_t *)&(myPortPtr->rxBufPtr)[0],headLen);
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	18d0      	adds	r0, r2, r3
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <COM_ReadTimeout+0x148>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	89ba      	ldrh	r2, [r7, #12]
 8001784:	4619      	mov	r1, r3
 8001786:	f003 fb08 	bl	8004d9a <memmove>
		}

		rxPos+=needLen;
 800178a:	8bfa      	ldrh	r2, [r7, #30]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4413      	add	r3, r2
 8001790:	83fb      	strh	r3, [r7, #30]
		if (rxPos>=UART_BUFFER_SIZE) { rxPos-=UART_BUFFER_SIZE;}
 8001792:	8bfa      	ldrh	r2, [r7, #30]
 8001794:	8a7b      	ldrh	r3, [r7, #18]
 8001796:	429a      	cmp	r2, r3
 8001798:	d303      	bcc.n	80017a2 <COM_ReadTimeout+0x11a>
 800179a:	8bfa      	ldrh	r2, [r7, #30]
 800179c:	8a7b      	ldrh	r3, [r7, #18]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	83fb      	strh	r3, [r7, #30]

		myPortPtr->rxPos=rxPos;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <COM_ReadTimeout+0x148>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	8bfa      	ldrh	r2, [r7, #30]
 80017a8:	81da      	strh	r2, [r3, #14]
		return true;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00b      	b.n	80017c6 <COM_ReadTimeout+0x13e>
	}


	if (timeOut>0) myPortPtr->rxPos=dmaPos; // abandon unread bytes
 80017ae:	883b      	ldrh	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <COM_ReadTimeout+0x134>
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <COM_ReadTimeout+0x148>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	8b7a      	ldrh	r2, [r7, #26]
 80017ba:	81da      	strh	r2, [r3, #14]
	myPortPtr->rxFail=true;
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <COM_ReadTimeout+0x148>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	749a      	strb	r2, [r3, #18]
	return false;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200003e0 	.word	0x200003e0

080017d4 <COM_Read>:
    //myPrintf("jump here\n");
    return COM_ReadTimeout(destBuffer, needLen,0);
}

bool COM_Read(uint8_t *destBuffer, uint16_t needLen)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
    return COM_ReadTimeout(destBuffer, needLen, myPortPtr->timeOut);
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <COM_Read+0x28>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	8a1a      	ldrh	r2, [r3, #16]
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff4c 	bl	8001688 <COM_ReadTimeout>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200003e0 	.word	0x200003e0

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001838 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001804:	f7ff fe7c 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001808:	480c      	ldr	r0, [pc, #48]	@ (800183c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180a:	490d      	ldr	r1, [pc, #52]	@ (8001840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800180c:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001820:	4c0a      	ldr	r4, [pc, #40]	@ (800184c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800182e:	f003 fb27 	bl	8004e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7ff fb49 	bl	8000ec8 <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001838:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001844:	08006ff0 	.word	0x08006ff0
  ldr r2, =_sbss
 8001848:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800184c:	20000588 	.word	0x20000588

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <HAL_Init+0x40>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <HAL_Init+0x40>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <HAL_Init+0x40>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f92b 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	200f      	movs	r0, #15
 8001884:	f000 f808 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fc48 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_InitTick+0x54>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_InitTick+0x58>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f943 	bl	8001b42 <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00e      	b.n	80018e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d80a      	bhi.n	80018e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 f90b 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4a06      	ldr	r2, [pc, #24]	@ (80018f4 <HAL_InitTick+0x5c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008
 800191c:	20000438 	.word	0x20000438

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000438 	.word	0x20000438

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	@ (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	@ 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff29 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff3e 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff8e 	bl	8001a2c <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff31 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa2 	bl	8001a94 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff feda 	bl	8001920 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e099      	b.n	8001cac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b98:	e00f      	b.n	8001bba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b9a:	f7ff fec1 	bl	8001920 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d908      	bls.n	8001bba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e078      	b.n	8001cac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e8      	bne.n	8001b9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_DMA_Init+0x158>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f023 0307 	bic.w	r3, r3, #7
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d117      	bne.n	8001c7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00e      	beq.n	8001c7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fb01 	bl	8002268 <DMA_CheckFifoParam>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2240      	movs	r2, #64	@ 0x40
 8001c70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e016      	b.n	8001cac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fab8 	bl	80021fc <DMA_CalcBaseAndBitshift>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c94:	223f      	movs	r2, #63	@ 0x3f
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	f010803f 	.word	0xf010803f

08001cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_DMA_Start_IT+0x26>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e040      	b.n	8001d60 <HAL_DMA_Start_IT+0xa8>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d12f      	bne.n	8001d52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 fa4a 	bl	80021a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d10:	223f      	movs	r2, #63	@ 0x3f
 8001d12:	409a      	lsls	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0216 	orr.w	r2, r2, #22
 8001d26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0208 	orr.w	r2, r2, #8
 8001d3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e005      	b.n	8001d5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d76:	f7ff fdd3 	bl	8001920 <HAL_GetTick>
 8001d7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d008      	beq.n	8001d9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e052      	b.n	8001e40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0216 	bic.w	r2, r2, #22
 8001da8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001db8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <HAL_DMA_Abort+0x62>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0208 	bic.w	r2, r2, #8
 8001dd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dea:	e013      	b.n	8001e14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dec:	f7ff fd98 	bl	8001920 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d90c      	bls.n	8001e14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e015      	b.n	8001e40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1e4      	bne.n	8001dec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e26:	223f      	movs	r2, #63	@ 0x3f
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d004      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00c      	b.n	8001e80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2205      	movs	r2, #5
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e98:	4b8e      	ldr	r3, [pc, #568]	@ (80020d4 <HAL_DMA_IRQHandler+0x248>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a8e      	ldr	r2, [pc, #568]	@ (80020d8 <HAL_DMA_IRQHandler+0x24c>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0a9b      	lsrs	r3, r3, #10
 8001ea4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01a      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0204 	bic.w	r2, r2, #4
 8001ede:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efc:	2201      	movs	r2, #1
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	f043 0202 	orr.w	r2, r3, #2
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f32:	2204      	movs	r2, #4
 8001f34:	409a      	lsls	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d012      	beq.n	8001f64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00b      	beq.n	8001f64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	2204      	movs	r2, #4
 8001f52:	409a      	lsls	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5c:	f043 0204 	orr.w	r2, r3, #4
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f68:	2210      	movs	r2, #16
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d043      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d03c      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	2210      	movs	r2, #16
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d018      	beq.n	8001fce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d024      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
 8001fba:	e01f      	b.n	8001ffc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e016      	b.n	8001ffc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0208 	bic.w	r2, r2, #8
 8001fea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	2220      	movs	r2, #32
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 808f 	beq.w	800212c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8087 	beq.w	800212c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002022:	2220      	movs	r2, #32
 8002024:	409a      	lsls	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b05      	cmp	r3, #5
 8002034:	d136      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0216 	bic.w	r2, r2, #22
 8002044:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002054:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <HAL_DMA_IRQHandler+0x1da>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0208 	bic.w	r2, r2, #8
 8002074:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207a:	223f      	movs	r2, #63	@ 0x3f
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002096:	2b00      	cmp	r3, #0
 8002098:	d07e      	beq.n	8002198 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
        }
        return;
 80020a2:	e079      	b.n	8002198 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01d      	beq.n	80020ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d031      	beq.n	800212c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
 80020d0:	e02c      	b.n	800212c <HAL_DMA_IRQHandler+0x2a0>
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000
 80020d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e01e      	b.n	800212c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0210 	bic.w	r2, r2, #16
 800210a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	2b00      	cmp	r3, #0
 8002132:	d032      	beq.n	800219a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d022      	beq.n	8002186 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2205      	movs	r2, #5
 8002144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3301      	adds	r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	d307      	bcc.n	8002174 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f2      	bne.n	8002158 <HAL_DMA_IRQHandler+0x2cc>
 8002172:	e000      	b.n	8002176 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002174:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
 8002196:	e000      	b.n	800219a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002198:	bf00      	nop
    }
  }
}
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b40      	cmp	r3, #64	@ 0x40
 80021cc:	d108      	bne.n	80021e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021de:	e007      	b.n	80021f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3b10      	subs	r3, #16
 800220c:	4a14      	ldr	r2, [pc, #80]	@ (8002260 <DMA_CalcBaseAndBitshift+0x64>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002216:	4a13      	ldr	r2, [pc, #76]	@ (8002264 <DMA_CalcBaseAndBitshift+0x68>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d909      	bls.n	800223e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002232:	f023 0303 	bic.w	r3, r3, #3
 8002236:	1d1a      	adds	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	@ 0x58
 800223c:	e007      	b.n	800224e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	aaaaaaab 	.word	0xaaaaaaab
 8002264:	08006c68 	.word	0x08006c68

08002268 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11f      	bne.n	80022c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d856      	bhi.n	8002336 <DMA_CheckFifoParam+0xce>
 8002288:	a201      	add	r2, pc, #4	@ (adr r2, 8002290 <DMA_CheckFifoParam+0x28>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022b3 	.word	0x080022b3
 8002298:	080022a1 	.word	0x080022a1
 800229c:	08002337 	.word	0x08002337
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d046      	beq.n	800233a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b0:	e043      	b.n	800233a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022ba:	d140      	bne.n	800233e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c0:	e03d      	b.n	800233e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ca:	d121      	bne.n	8002310 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d837      	bhi.n	8002342 <DMA_CheckFifoParam+0xda>
 80022d2:	a201      	add	r2, pc, #4	@ (adr r2, 80022d8 <DMA_CheckFifoParam+0x70>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022ef 	.word	0x080022ef
 80022e0:	080022e9 	.word	0x080022e9
 80022e4:	08002301 	.word	0x08002301
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      break;
 80022ec:	e030      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d025      	beq.n	8002346 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fe:	e022      	b.n	8002346 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002308:	d11f      	bne.n	800234a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800230e:	e01c      	b.n	800234a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d903      	bls.n	800231e <DMA_CheckFifoParam+0xb6>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d003      	beq.n	8002324 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800231c:	e018      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
      break;
 8002322:	e015      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00e      	beq.n	800234e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e00b      	b.n	800234e <DMA_CheckFifoParam+0xe6>
      break;
 8002336:	bf00      	nop
 8002338:	e00a      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 800233a:	bf00      	nop
 800233c:	e008      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
 8002340:	e006      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
 8002344:	e004      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e002      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;   
 800234a:	bf00      	nop
 800234c:	e000      	b.n	8002350 <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
    }
  } 
  
  return status; 
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e159      	b.n	8002630 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800237c:	2201      	movs	r2, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	429a      	cmp	r2, r3
 8002396:	f040 8148 	bne.w	800262a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d005      	beq.n	80023b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d130      	bne.n	8002414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 0201 	and.w	r2, r3, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b03      	cmp	r3, #3
 800241e:	d017      	beq.n	8002450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d123      	bne.n	80024a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0203 	and.w	r2, r3, #3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80a2 	beq.w	800262a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b57      	ldr	r3, [pc, #348]	@ (8002648 <HAL_GPIO_Init+0x2e8>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	4a56      	ldr	r2, [pc, #344]	@ (8002648 <HAL_GPIO_Init+0x2e8>)
 80024f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f6:	4b54      	ldr	r3, [pc, #336]	@ (8002648 <HAL_GPIO_Init+0x2e8>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002502:	4a52      	ldr	r2, [pc, #328]	@ (800264c <HAL_GPIO_Init+0x2ec>)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a49      	ldr	r2, [pc, #292]	@ (8002650 <HAL_GPIO_Init+0x2f0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x202>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a48      	ldr	r2, [pc, #288]	@ (8002654 <HAL_GPIO_Init+0x2f4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x1fe>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a47      	ldr	r2, [pc, #284]	@ (8002658 <HAL_GPIO_Init+0x2f8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x1fa>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a46      	ldr	r2, [pc, #280]	@ (800265c <HAL_GPIO_Init+0x2fc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x1f6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a45      	ldr	r2, [pc, #276]	@ (8002660 <HAL_GPIO_Init+0x300>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x1f2>
 800254e:	2304      	movs	r3, #4
 8002550:	e008      	b.n	8002564 <HAL_GPIO_Init+0x204>
 8002552:	2307      	movs	r3, #7
 8002554:	e006      	b.n	8002564 <HAL_GPIO_Init+0x204>
 8002556:	2303      	movs	r3, #3
 8002558:	e004      	b.n	8002564 <HAL_GPIO_Init+0x204>
 800255a:	2302      	movs	r3, #2
 800255c:	e002      	b.n	8002564 <HAL_GPIO_Init+0x204>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_GPIO_Init+0x204>
 8002562:	2300      	movs	r3, #0
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	f002 0203 	and.w	r2, r2, #3
 800256a:	0092      	lsls	r2, r2, #2
 800256c:	4093      	lsls	r3, r2
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002574:	4935      	ldr	r1, [pc, #212]	@ (800264c <HAL_GPIO_Init+0x2ec>)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3302      	adds	r3, #2
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002582:	4b38      	ldr	r3, [pc, #224]	@ (8002664 <HAL_GPIO_Init+0x304>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002664 <HAL_GPIO_Init+0x304>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_GPIO_Init+0x304>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d0:	4a24      	ldr	r2, [pc, #144]	@ (8002664 <HAL_GPIO_Init+0x304>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025d6:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <HAL_GPIO_Init+0x304>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002664 <HAL_GPIO_Init+0x304>)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002600:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <HAL_GPIO_Init+0x304>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002624:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <HAL_GPIO_Init+0x304>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3301      	adds	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	f67f aea2 	bls.w	800237c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3724      	adds	r7, #36	@ 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40013800 	.word	0x40013800
 8002650:	40020000 	.word	0x40020000
 8002654:	40020400 	.word	0x40020400
 8002658:	40020800 	.word	0x40020800
 800265c:	40020c00 	.word	0x40020c00
 8002660:	40021000 	.word	0x40021000
 8002664:	40013c00 	.word	0x40013c00

08002668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e267      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d075      	beq.n	8002772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002686:	4b88      	ldr	r3, [pc, #544]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b04      	cmp	r3, #4
 8002690:	d00c      	beq.n	80026ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b85      	ldr	r3, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800269a:	2b08      	cmp	r3, #8
 800269c:	d112      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269e:	4b82      	ldr	r3, [pc, #520]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026aa:	d10b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	4b7e      	ldr	r3, [pc, #504]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05b      	beq.n	8002770 <HAL_RCC_OscConfig+0x108>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d157      	bne.n	8002770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e242      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x74>
 80026ce:	4b76      	ldr	r3, [pc, #472]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a75      	ldr	r2, [pc, #468]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01d      	b.n	8002718 <HAL_RCC_OscConfig+0xb0>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x98>
 80026e6:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6f      	ldr	r2, [pc, #444]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b6d      	ldr	r3, [pc, #436]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6c      	ldr	r2, [pc, #432]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xb0>
 8002700:	4b69      	ldr	r3, [pc, #420]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a68      	ldr	r2, [pc, #416]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b66      	ldr	r3, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a65      	ldr	r2, [pc, #404]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff f8fe 	bl	8001920 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff f8fa 	bl	8001920 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e207      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b5b      	ldr	r3, [pc, #364]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0xc0>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7ff f8ea 	bl	8001920 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff f8e6 	bl	8001920 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	@ 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1f3      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	4b51      	ldr	r3, [pc, #324]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0xe8>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d063      	beq.n	8002846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800277e:	4b4a      	ldr	r3, [pc, #296]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b47      	ldr	r3, [pc, #284]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002792:	2b08      	cmp	r3, #8
 8002794:	d11c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002796:	4b44      	ldr	r3, [pc, #272]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	4b41      	ldr	r3, [pc, #260]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_RCC_OscConfig+0x152>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1c7      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ba:	4b3b      	ldr	r3, [pc, #236]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4937      	ldr	r1, [pc, #220]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	e03a      	b.n	8002846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d8:	4b34      	ldr	r3, [pc, #208]	@ (80028ac <HAL_RCC_OscConfig+0x244>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7ff f89f 	bl	8001920 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7ff f89b 	bl	8001920 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1a8      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b28      	ldr	r3, [pc, #160]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4925      	ldr	r1, [pc, #148]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCC_OscConfig+0x244>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7ff f87e 	bl	8001920 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff f87a 	bl	8001920 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e187      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d036      	beq.n	80028c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <HAL_RCC_OscConfig+0x248>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7ff f85e 	bl	8001920 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7ff f85a 	bl	8001920 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e167      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_RCC_OscConfig+0x240>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x200>
 8002886:	e01b      	b.n	80028c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002888:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_RCC_OscConfig+0x248>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff f847 	bl	8001920 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	e00e      	b.n	80028b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002896:	f7ff f843 	bl	8001920 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d907      	bls.n	80028b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e150      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
 80028a8:	40023800 	.word	0x40023800
 80028ac:	42470000 	.word	0x42470000
 80028b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	4b88      	ldr	r3, [pc, #544]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ea      	bne.n	8002896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8097 	beq.w	80029fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d2:	4b81      	ldr	r3, [pc, #516]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ee:	4b7a      	ldr	r3, [pc, #488]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	4b77      	ldr	r3, [pc, #476]	@ (8002adc <HAL_RCC_OscConfig+0x474>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d118      	bne.n	800293c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290a:	4b74      	ldr	r3, [pc, #464]	@ (8002adc <HAL_RCC_OscConfig+0x474>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a73      	ldr	r2, [pc, #460]	@ (8002adc <HAL_RCC_OscConfig+0x474>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002916:	f7ff f803 	bl	8001920 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291e:	f7fe ffff 	bl	8001920 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e10c      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	4b6a      	ldr	r3, [pc, #424]	@ (8002adc <HAL_RCC_OscConfig+0x474>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x2ea>
 8002944:	4b64      	ldr	r3, [pc, #400]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	4a63      	ldr	r2, [pc, #396]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002950:	e01c      	b.n	800298c <HAL_RCC_OscConfig+0x324>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b05      	cmp	r3, #5
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x30c>
 800295a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	6713      	str	r3, [r2, #112]	@ 0x70
 8002966:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	@ 0x70
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0x324>
 8002974:	4b58      	ldr	r3, [pc, #352]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	4a57      	ldr	r2, [pc, #348]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002980:	4b55      	ldr	r3, [pc, #340]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	4a54      	ldr	r2, [pc, #336]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 0304 	bic.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe ffc4 	bl	8001920 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe ffc0 	bl	8001920 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0cb      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	4b49      	ldr	r3, [pc, #292]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0ee      	beq.n	800299c <HAL_RCC_OscConfig+0x334>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c0:	f7fe ffae 	bl	8001920 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c6:	e00a      	b.n	80029de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe ffaa 	bl	8001920 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e0b5      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ee      	bne.n	80029c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	4a38      	ldr	r2, [pc, #224]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80a1 	beq.w	8002b48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a06:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d05c      	beq.n	8002acc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d141      	bne.n	8002a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ae0 <HAL_RCC_OscConfig+0x478>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe ff7e 	bl	8001920 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe ff7a 	bl	8001920 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e087      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	491b      	ldr	r1, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <HAL_RCC_OscConfig+0x478>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe ff53 	bl	8001920 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe ff4f 	bl	8001920 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e05c      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x416>
 8002a9c:	e054      	b.n	8002b48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <HAL_RCC_OscConfig+0x478>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff3c 	bl	8001920 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe ff38 	bl	8001920 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e045      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x444>
 8002aca:	e03d      	b.n	8002b48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e038      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x4ec>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d028      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d121      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d11a      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b14:	4013      	ands	r3, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d111      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0cc      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b68      	ldr	r3, [pc, #416]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d90c      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b63      	ldr	r3, [pc, #396]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b8      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bac:	4b59      	ldr	r3, [pc, #356]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a58      	ldr	r2, [pc, #352]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc4:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b50      	ldr	r3, [pc, #320]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	494d      	ldr	r1, [pc, #308]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d044      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d119      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	4b3f      	ldr	r3, [pc, #252]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e067      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b37      	ldr	r3, [pc, #220]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4934      	ldr	r1, [pc, #208]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c48:	f7fe fe6a 	bl	8001920 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe fe66 	bl	8001920 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e04f      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d20c      	bcs.n	8002ca0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e032      	b.n	8002d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4916      	ldr	r1, [pc, #88]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cca:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	490e      	ldr	r1, [pc, #56]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cde:	f000 f821 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	490a      	ldr	r1, [pc, #40]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	5ccb      	ldrb	r3, [r1, r3]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fdca 	bl	8001898 <HAL_InitTick>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023c00 	.word	0x40023c00
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08006c50 	.word	0x08006c50
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d28:	b090      	sub	sp, #64	@ 0x40
 8002d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d00d      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x40>
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	f200 80a1 	bhi.w	8002e90 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x34>
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d56:	e09b      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d58:	4b53      	ldr	r3, [pc, #332]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d5c:	e09b      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d5e:	4b53      	ldr	r3, [pc, #332]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x188>)
 8002d60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d62:	e098      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d64:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d028      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	099b      	lsrs	r3, r3, #6
 8002d80:	2200      	movs	r2, #0
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4b47      	ldr	r3, [pc, #284]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x188>)
 8002d90:	fb03 f201 	mul.w	r2, r3, r1
 8002d94:	2300      	movs	r3, #0
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a43      	ldr	r2, [pc, #268]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x188>)
 8002d9e:	fba0 1202 	umull	r1, r2, r0, r2
 8002da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002da4:	460a      	mov	r2, r1
 8002da6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002daa:	4413      	add	r3, r2
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db0:	2200      	movs	r2, #0
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	61fa      	str	r2, [r7, #28]
 8002db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002dbe:	f7fd ff0b 	bl	8000bd8 <__aeabi_uldivmod>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dca:	e053      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	617a      	str	r2, [r7, #20]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dde:	f04f 0b00 	mov.w	fp, #0
 8002de2:	4652      	mov	r2, sl
 8002de4:	465b      	mov	r3, fp
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	ebb2 080a 	subs.w	r8, r2, sl
 8002dfe:	eb63 090b 	sbc.w	r9, r3, fp
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e16:	ebb2 0408 	subs.w	r4, r2, r8
 8002e1a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	00eb      	lsls	r3, r5, #3
 8002e28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2c:	00e2      	lsls	r2, r4, #3
 8002e2e:	4614      	mov	r4, r2
 8002e30:	461d      	mov	r5, r3
 8002e32:	eb14 030a 	adds.w	r3, r4, sl
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	eb45 030b 	adc.w	r3, r5, fp
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	028b      	lsls	r3, r1, #10
 8002e4e:	4621      	mov	r1, r4
 8002e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e54:	4621      	mov	r1, r4
 8002e56:	028a      	lsls	r2, r1, #10
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	60fa      	str	r2, [r7, #12]
 8002e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e68:	f7fd feb6 	bl	8000bd8 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4613      	mov	r3, r2
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3740      	adds	r7, #64	@ 0x40
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	017d7840 	.word	0x017d7840

08002eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a9b      	lsrs	r3, r3, #10
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4903      	ldr	r1, [pc, #12]	@ (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08006c60 	.word	0x08006c60

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef4:	f7ff ffdc 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0b5b      	lsrs	r3, r3, #13
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	@ (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08006c60 	.word	0x08006c60

08002f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e042      	b.n	8002fb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe f914 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	@ 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 ff4b 	bl	8003df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	@ 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d156      	bne.n	8003080 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_UART_Transmit_DMA+0x26>
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e04f      	b.n	8003082 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	@ 0x21
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003006:	4a21      	ldr	r2, [pc, #132]	@ (800308c <HAL_UART_Transmit_DMA+0xd4>)
 8003008:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300e:	4a20      	ldr	r2, [pc, #128]	@ (8003090 <HAL_UART_Transmit_DMA+0xd8>)
 8003010:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	4a1f      	ldr	r2, [pc, #124]	@ (8003094 <HAL_UART_Transmit_DMA+0xdc>)
 8003018:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	2200      	movs	r2, #0
 8003020:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003022:	f107 0308 	add.w	r3, r7, #8
 8003026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3304      	adds	r3, #4
 8003036:	461a      	mov	r2, r3
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	f7fe fe3d 	bl	8001cb8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003046:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	617b      	str	r3, [r7, #20]
   return(result);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3314      	adds	r3, #20
 8003066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003068:	627a      	str	r2, [r7, #36]	@ 0x24
 800306a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6a39      	ldr	r1, [r7, #32]
 800306e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	61fb      	str	r3, [r7, #28]
   return(result);
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e5      	bne.n	8003048 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3730      	adds	r7, #48	@ 0x30
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	08003685 	.word	0x08003685
 8003090:	0800371f 	.word	0x0800371f
 8003094:	080038a3 	.word	0x080038a3

08003098 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d112      	bne.n	80030d8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_Receive_DMA+0x26>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e00b      	b.n	80030da <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fc32 	bl	8003938 <UART_Start_Receive_DMA>
 80030d4:	4603      	mov	r3, r0
 80030d6:	e000      	b.n	80030da <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0ba      	sub	sp, #232	@ 0xe8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_UART_IRQHandler+0x66>
 8003136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fd99 	bl	8003c7a <UART_Receive_IT>
      return;
 8003148:	e25b      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800314a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80de 	beq.w	8003310 <HAL_UART_IRQHandler+0x22c>
 8003154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003164:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80d1 	beq.w	8003310 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xae>
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_UART_IRQHandler+0xd2>
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_UART_IRQHandler+0xf6>
 80031c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d011      	beq.n	800320a <HAL_UART_IRQHandler+0x126>
 80031e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f043 0208 	orr.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 81f2 	beq.w	80035f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_UART_IRQHandler+0x14e>
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fd24 	bl	8003c7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b40      	cmp	r3, #64	@ 0x40
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <HAL_UART_IRQHandler+0x17a>
 8003256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04f      	beq.n	80032fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fc2c 	bl	8003abc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326e:	2b40      	cmp	r3, #64	@ 0x40
 8003270:	d141      	bne.n	80032f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800328c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800329e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1d9      	bne.n	8003272 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d013      	beq.n	80032ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ca:	4a7e      	ldr	r2, [pc, #504]	@ (80034c4 <HAL_UART_IRQHandler+0x3e0>)
 80032cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fdb8 	bl	8001e48 <HAL_DMA_Abort_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032e8:	4610      	mov	r0, r2
 80032ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e00e      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f9b2 	bl	8003658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e00a      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f9ae 	bl	8003658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e006      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f9aa 	bl	8003658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800330a:	e175      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	bf00      	nop
    return;
 800330e:	e173      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 814f 	bne.w	80035b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8148 	beq.w	80035b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8141 	beq.w	80035b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	f040 80b6 	bne.w	80034c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003368:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8145 	beq.w	80035fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800337a:	429a      	cmp	r2, r3
 800337c:	f080 813e 	bcs.w	80035fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003386:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003392:	f000 8088 	beq.w	80034a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1d9      	bne.n	8003396 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003406:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800340a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800340e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003418:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e1      	bne.n	80033e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800342e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003442:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003444:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003448:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003488:	65ba      	str	r2, [r7, #88]	@ 0x58
 800348a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800348e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fc61 	bl	8001d68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8d5 	bl	800366c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034c2:	e09b      	b.n	80035fc <HAL_UART_IRQHandler+0x518>
 80034c4:	08003b83 	.word	0x08003b83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 808e 	beq.w	8003600 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8089 	beq.w	8003600 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003504:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003512:	647a      	str	r2, [r7, #68]	@ 0x44
 8003514:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e3      	bne.n	80034ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	623b      	str	r3, [r7, #32]
   return(result);
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800354a:	633a      	str	r2, [r7, #48]	@ 0x30
 800354c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e3      	bne.n	8003526 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	60fb      	str	r3, [r7, #12]
   return(result);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0310 	bic.w	r3, r3, #16
 8003582:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003590:	61fa      	str	r2, [r7, #28]
 8003592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	69b9      	ldr	r1, [r7, #24]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	e841 2300 	strex	r3, r2, [r1]
 800359c:	617b      	str	r3, [r7, #20]
   return(result);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e3      	bne.n	800356c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f85b 	bl	800366c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035b6:	e023      	b.n	8003600 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_UART_IRQHandler+0x4f4>
 80035c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 faea 	bl	8003baa <UART_Transmit_IT>
    return;
 80035d6:	e014      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <HAL_UART_IRQHandler+0x51e>
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fb2a 	bl	8003c4a <UART_EndTransmit_IT>
    return;
 80035f6:	e004      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
    return;
 80035f8:	bf00      	nop
 80035fa:	e002      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
      return;
 80035fc:	bf00      	nop
 80035fe:	e000      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
      return;
 8003600:	bf00      	nop
  }
}
 8003602:	37e8      	adds	r7, #232	@ 0xe8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b090      	sub	sp, #64	@ 0x40
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003690:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d137      	bne.n	8003710 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80036a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a2:	2200      	movs	r2, #0
 80036a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3314      	adds	r3, #20
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	623b      	str	r3, [r7, #32]
   return(result);
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3314      	adds	r3, #20
 80036c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80036c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e5      	bne.n	80036a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036fa:	61fa      	str	r2, [r7, #28]
 80036fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	69b9      	ldr	r1, [r7, #24]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	617b      	str	r3, [r7, #20]
   return(result);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800370e:	e002      	b.n	8003716 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003710:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003712:	f7ff ff79 	bl	8003608 <HAL_UART_TxCpltCallback>
}
 8003716:	bf00      	nop
 8003718:	3740      	adds	r7, #64	@ 0x40
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff ff75 	bl	800361c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b09c      	sub	sp, #112	@ 0x70
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003746:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d172      	bne.n	800383c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003758:	2200      	movs	r2, #0
 800375a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800375c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800376c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800376e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003772:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800377c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800377e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800378a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e5      	bne.n	800375c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80037a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3314      	adds	r3, #20
 80037ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80037b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80037b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e5      	bne.n	8003790 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3314      	adds	r3, #20
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	623b      	str	r3, [r7, #32]
   return(result);
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037da:	663b      	str	r3, [r7, #96]	@ 0x60
 80037dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80037e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80037e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	2b01      	cmp	r3, #1
 8003806:	d119      	bne.n	800383c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	60fb      	str	r3, [r7, #12]
   return(result);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0310 	bic.w	r3, r3, #16
 800381e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003828:	61fa      	str	r2, [r7, #28]
 800382a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	69b9      	ldr	r1, [r7, #24]
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	617b      	str	r3, [r7, #20]
   return(result);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e5      	bne.n	8003808 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800383c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800383e:	2200      	movs	r2, #0
 8003840:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	2b01      	cmp	r3, #1
 8003848:	d106      	bne.n	8003858 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800384a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800384c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800384e:	4619      	mov	r1, r3
 8003850:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003852:	f7ff ff0b 	bl	800366c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003856:	e002      	b.n	800385e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003858:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800385a:	f7ff fee9 	bl	8003630 <HAL_UART_RxCpltCallback>
}
 800385e:	bf00      	nop
 8003860:	3770      	adds	r7, #112	@ 0x70
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003872:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	2b01      	cmp	r3, #1
 8003880:	d108      	bne.n	8003894 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	4619      	mov	r1, r3
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff feed 	bl	800366c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003892:	e002      	b.n	800389a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff fed5 	bl	8003644 <HAL_UART_RxHalfCpltCallback>
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038be:	2b80      	cmp	r3, #128	@ 0x80
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b21      	cmp	r3, #33	@ 0x21
 80038d4:	d108      	bne.n	80038e8 <UART_DMAError+0x46>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2200      	movs	r2, #0
 80038e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80038e2:	68b8      	ldr	r0, [r7, #8]
 80038e4:	f000 f8c2 	bl	8003a6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b40      	cmp	r3, #64	@ 0x40
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b22      	cmp	r3, #34	@ 0x22
 8003908:	d108      	bne.n	800391c <UART_DMAError+0x7a>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2200      	movs	r2, #0
 8003914:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003916:	68b8      	ldr	r0, [r7, #8]
 8003918:	f000 f8d0 	bl	8003abc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003928:	68b8      	ldr	r0, [r7, #8]
 800392a:	f7ff fe95 	bl	8003658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b098      	sub	sp, #96	@ 0x60
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2222      	movs	r2, #34	@ 0x22
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	4a3e      	ldr	r2, [pc, #248]	@ (8003a60 <UART_Start_Receive_DMA+0x128>)
 8003966:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a64 <UART_Start_Receive_DMA+0x12c>)
 800396e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003974:	4a3c      	ldr	r2, [pc, #240]	@ (8003a68 <UART_Start_Receive_DMA+0x130>)
 8003976:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	2200      	movs	r2, #0
 800397e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003980:	f107 0308 	add.w	r3, r7, #8
 8003984:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	f7fe f98e 	bl	8001cb8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d019      	beq.n	80039ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80039e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80039e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3314      	adds	r3, #20
 80039f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e5      	bne.n	80039ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3314      	adds	r3, #20
 8003a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	617b      	str	r3, [r7, #20]
   return(result);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a42:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6a39      	ldr	r1, [r7, #32]
 8003a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e5      	bne.n	8003a22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3760      	adds	r7, #96	@ 0x60
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	0800373b 	.word	0x0800373b
 8003a64:	08003867 	.word	0x08003867
 8003a68:	080038a3 	.word	0x080038a3

08003a6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	@ 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	61ba      	str	r2, [r7, #24]
 8003a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6979      	ldr	r1, [r7, #20]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e5      	bne.n	8003a74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003ab0:	bf00      	nop
 8003ab2:	3724      	adds	r7, #36	@ 0x24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b095      	sub	sp, #84	@ 0x54
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ae4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3314      	adds	r3, #20
 8003afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e5      	bne.n	8003af8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d119      	bne.n	8003b68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 0310 	bic.w	r3, r3, #16
 8003b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b54:	61ba      	str	r2, [r7, #24]
 8003b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6979      	ldr	r1, [r7, #20]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	613b      	str	r3, [r7, #16]
   return(result);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e5      	bne.n	8003b34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b76:	bf00      	nop
 8003b78:	3754      	adds	r7, #84	@ 0x54
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff fd5b 	bl	8003658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b21      	cmp	r3, #33	@ 0x21
 8003bbc:	d13e      	bne.n	8003c3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc6:	d114      	bne.n	8003bf2 <UART_Transmit_IT+0x48>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d110      	bne.n	8003bf2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]
 8003bf0:	e008      	b.n	8003c04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6211      	str	r1, [r2, #32]
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	4619      	mov	r1, r3
 8003c12:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10f      	bne.n	8003c38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff fccc 	bl	8003608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b08c      	sub	sp, #48	@ 0x30
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b22      	cmp	r3, #34	@ 0x22
 8003c8c:	f040 80ae 	bne.w	8003dec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c98:	d117      	bne.n	8003cca <UART_Receive_IT+0x50>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d113      	bne.n	8003cca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cc8:	e026      	b.n	8003d18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cdc:	d007      	beq.n	8003cee <UART_Receive_IT+0x74>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <UART_Receive_IT+0x82>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e008      	b.n	8003d0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4619      	mov	r1, r3
 8003d26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d15d      	bne.n	8003de8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0220 	bic.w	r2, r2, #32
 8003d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d135      	bne.n	8003dde <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	613b      	str	r3, [r7, #16]
   return(result);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f023 0310 	bic.w	r3, r3, #16
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d98:	623a      	str	r2, [r7, #32]
 8003d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	69f9      	ldr	r1, [r7, #28]
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d10a      	bne.n	8003dd0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fc48 	bl	800366c <HAL_UARTEx_RxEventCallback>
 8003ddc:	e002      	b.n	8003de4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fc26 	bl	8003630 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e002      	b.n	8003dee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3730      	adds	r7, #48	@ 0x30
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b0c0      	sub	sp, #256	@ 0x100
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	68d9      	ldr	r1, [r3, #12]
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	ea40 0301 	orr.w	r3, r0, r1
 8003e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e50:	f021 010c 	bic.w	r1, r1, #12
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e72:	6999      	ldr	r1, [r3, #24]
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	ea40 0301 	orr.w	r3, r0, r1
 8003e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b8f      	ldr	r3, [pc, #572]	@ (80040c4 <UART_SetConfig+0x2cc>)
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d005      	beq.n	8003e98 <UART_SetConfig+0xa0>
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4b8d      	ldr	r3, [pc, #564]	@ (80040c8 <UART_SetConfig+0x2d0>)
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d104      	bne.n	8003ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e98:	f7ff f82a 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8003e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ea0:	e003      	b.n	8003eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ea2:	f7ff f811 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8003ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb4:	f040 810c 	bne.w	80040d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eca:	4622      	mov	r2, r4
 8003ecc:	462b      	mov	r3, r5
 8003ece:	1891      	adds	r1, r2, r2
 8003ed0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eda:	4621      	mov	r1, r4
 8003edc:	eb12 0801 	adds.w	r8, r2, r1
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	eb43 0901 	adc.w	r9, r3, r1
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003efa:	4690      	mov	r8, r2
 8003efc:	4699      	mov	r9, r3
 8003efe:	4623      	mov	r3, r4
 8003f00:	eb18 0303 	adds.w	r3, r8, r3
 8003f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f08:	462b      	mov	r3, r5
 8003f0a:	eb49 0303 	adc.w	r3, r9, r3
 8003f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f26:	460b      	mov	r3, r1
 8003f28:	18db      	adds	r3, r3, r3
 8003f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	eb42 0303 	adc.w	r3, r2, r3
 8003f32:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f3c:	f7fc fe4c 	bl	8000bd8 <__aeabi_uldivmod>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4b61      	ldr	r3, [pc, #388]	@ (80040cc <UART_SetConfig+0x2d4>)
 8003f46:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	011c      	lsls	r4, r3, #4
 8003f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f70:	4641      	mov	r1, r8
 8003f72:	eb12 0a01 	adds.w	sl, r2, r1
 8003f76:	4649      	mov	r1, r9
 8003f78:	eb43 0b01 	adc.w	fp, r3, r1
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f90:	4692      	mov	sl, r2
 8003f92:	469b      	mov	fp, r3
 8003f94:	4643      	mov	r3, r8
 8003f96:	eb1a 0303 	adds.w	r3, sl, r3
 8003f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8003fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	18db      	adds	r3, r3, r3
 8003fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	eb42 0303 	adc.w	r3, r2, r3
 8003fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fd2:	f7fc fe01 	bl	8000bd8 <__aeabi_uldivmod>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <UART_SetConfig+0x2d4>)
 8003fde:	fba3 2301 	umull	r2, r3, r3, r1
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	2264      	movs	r2, #100	@ 0x64
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	1acb      	subs	r3, r1, r3
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ff2:	4b36      	ldr	r3, [pc, #216]	@ (80040cc <UART_SetConfig+0x2d4>)
 8003ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004000:	441c      	add	r4, r3
 8004002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800400c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	1891      	adds	r1, r2, r2
 800401a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800401c:	415b      	adcs	r3, r3
 800401e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004024:	4641      	mov	r1, r8
 8004026:	1851      	adds	r1, r2, r1
 8004028:	6339      	str	r1, [r7, #48]	@ 0x30
 800402a:	4649      	mov	r1, r9
 800402c:	414b      	adcs	r3, r1
 800402e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800403c:	4659      	mov	r1, fp
 800403e:	00cb      	lsls	r3, r1, #3
 8004040:	4651      	mov	r1, sl
 8004042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004046:	4651      	mov	r1, sl
 8004048:	00ca      	lsls	r2, r1, #3
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	4603      	mov	r3, r0
 8004050:	4642      	mov	r2, r8
 8004052:	189b      	adds	r3, r3, r2
 8004054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004058:	464b      	mov	r3, r9
 800405a:	460a      	mov	r2, r1
 800405c:	eb42 0303 	adc.w	r3, r2, r3
 8004060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004070:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004078:	460b      	mov	r3, r1
 800407a:	18db      	adds	r3, r3, r3
 800407c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800407e:	4613      	mov	r3, r2
 8004080:	eb42 0303 	adc.w	r3, r2, r3
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800408a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800408e:	f7fc fda3 	bl	8000bd8 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <UART_SetConfig+0x2d4>)
 8004098:	fba3 1302 	umull	r1, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	2164      	movs	r1, #100	@ 0x64
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	3332      	adds	r3, #50	@ 0x32
 80040aa:	4a08      	ldr	r2, [pc, #32]	@ (80040cc <UART_SetConfig+0x2d4>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	f003 0207 	and.w	r2, r3, #7
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4422      	add	r2, r4
 80040be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040c0:	e106      	b.n	80042d0 <UART_SetConfig+0x4d8>
 80040c2:	bf00      	nop
 80040c4:	40011000 	.word	0x40011000
 80040c8:	40011400 	.word	0x40011400
 80040cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040e2:	4642      	mov	r2, r8
 80040e4:	464b      	mov	r3, r9
 80040e6:	1891      	adds	r1, r2, r2
 80040e8:	6239      	str	r1, [r7, #32]
 80040ea:	415b      	adcs	r3, r3
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040f2:	4641      	mov	r1, r8
 80040f4:	1854      	adds	r4, r2, r1
 80040f6:	4649      	mov	r1, r9
 80040f8:	eb43 0501 	adc.w	r5, r3, r1
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	00eb      	lsls	r3, r5, #3
 8004106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410a:	00e2      	lsls	r2, r4, #3
 800410c:	4614      	mov	r4, r2
 800410e:	461d      	mov	r5, r3
 8004110:	4643      	mov	r3, r8
 8004112:	18e3      	adds	r3, r4, r3
 8004114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004118:	464b      	mov	r3, r9
 800411a:	eb45 0303 	adc.w	r3, r5, r3
 800411e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800412e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800413e:	4629      	mov	r1, r5
 8004140:	008b      	lsls	r3, r1, #2
 8004142:	4621      	mov	r1, r4
 8004144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004148:	4621      	mov	r1, r4
 800414a:	008a      	lsls	r2, r1, #2
 800414c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004150:	f7fc fd42 	bl	8000bd8 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4b60      	ldr	r3, [pc, #384]	@ (80042dc <UART_SetConfig+0x4e4>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	011c      	lsls	r4, r3, #4
 8004162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800416c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	61b9      	str	r1, [r7, #24]
 800417c:	415b      	adcs	r3, r3
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004184:	4641      	mov	r1, r8
 8004186:	1851      	adds	r1, r2, r1
 8004188:	6139      	str	r1, [r7, #16]
 800418a:	4649      	mov	r1, r9
 800418c:	414b      	adcs	r3, r1
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800419c:	4659      	mov	r1, fp
 800419e:	00cb      	lsls	r3, r1, #3
 80041a0:	4651      	mov	r1, sl
 80041a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a6:	4651      	mov	r1, sl
 80041a8:	00ca      	lsls	r2, r1, #3
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	4642      	mov	r2, r8
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041b8:	464b      	mov	r3, r9
 80041ba:	460a      	mov	r2, r1
 80041bc:	eb42 0303 	adc.w	r3, r2, r3
 80041c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041dc:	4649      	mov	r1, r9
 80041de:	008b      	lsls	r3, r1, #2
 80041e0:	4641      	mov	r1, r8
 80041e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e6:	4641      	mov	r1, r8
 80041e8:	008a      	lsls	r2, r1, #2
 80041ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041ee:	f7fc fcf3 	bl	8000bd8 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	4b38      	ldr	r3, [pc, #224]	@ (80042dc <UART_SetConfig+0x4e4>)
 80041fa:	fba3 2301 	umull	r2, r3, r3, r1
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2264      	movs	r2, #100	@ 0x64
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	1acb      	subs	r3, r1, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	@ 0x32
 800420c:	4a33      	ldr	r2, [pc, #204]	@ (80042dc <UART_SetConfig+0x4e4>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004218:	441c      	add	r4, r3
 800421a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421e:	2200      	movs	r2, #0
 8004220:	673b      	str	r3, [r7, #112]	@ 0x70
 8004222:	677a      	str	r2, [r7, #116]	@ 0x74
 8004224:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	1891      	adds	r1, r2, r2
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	415b      	adcs	r3, r3
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004238:	4641      	mov	r1, r8
 800423a:	1851      	adds	r1, r2, r1
 800423c:	6039      	str	r1, [r7, #0]
 800423e:	4649      	mov	r1, r9
 8004240:	414b      	adcs	r3, r1
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004250:	4659      	mov	r1, fp
 8004252:	00cb      	lsls	r3, r1, #3
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425a:	4651      	mov	r1, sl
 800425c:	00ca      	lsls	r2, r1, #3
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	4603      	mov	r3, r0
 8004264:	4642      	mov	r2, r8
 8004266:	189b      	adds	r3, r3, r2
 8004268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800426a:	464b      	mov	r3, r9
 800426c:	460a      	mov	r2, r1
 800426e:	eb42 0303 	adc.w	r3, r2, r3
 8004272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	663b      	str	r3, [r7, #96]	@ 0x60
 800427e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800428c:	4649      	mov	r1, r9
 800428e:	008b      	lsls	r3, r1, #2
 8004290:	4641      	mov	r1, r8
 8004292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004296:	4641      	mov	r1, r8
 8004298:	008a      	lsls	r2, r1, #2
 800429a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800429e:	f7fc fc9b 	bl	8000bd8 <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <UART_SetConfig+0x4e4>)
 80042a8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	2164      	movs	r1, #100	@ 0x64
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	3332      	adds	r3, #50	@ 0x32
 80042ba:	4a08      	ldr	r2, [pc, #32]	@ (80042dc <UART_SetConfig+0x4e4>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4422      	add	r2, r4
 80042ce:	609a      	str	r2, [r3, #8]
}
 80042d0:	bf00      	nop
 80042d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042d6:	46bd      	mov	sp, r7
 80042d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042dc:	51eb851f 	.word	0x51eb851f

080042e0 <__cvt>:
 80042e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	ec57 6b10 	vmov	r6, r7, d0
 80042e8:	2f00      	cmp	r7, #0
 80042ea:	460c      	mov	r4, r1
 80042ec:	4619      	mov	r1, r3
 80042ee:	463b      	mov	r3, r7
 80042f0:	bfbb      	ittet	lt
 80042f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80042f6:	461f      	movlt	r7, r3
 80042f8:	2300      	movge	r3, #0
 80042fa:	232d      	movlt	r3, #45	@ 0x2d
 80042fc:	700b      	strb	r3, [r1, #0]
 80042fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004300:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004304:	4691      	mov	r9, r2
 8004306:	f023 0820 	bic.w	r8, r3, #32
 800430a:	bfbc      	itt	lt
 800430c:	4632      	movlt	r2, r6
 800430e:	4616      	movlt	r6, r2
 8004310:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004314:	d005      	beq.n	8004322 <__cvt+0x42>
 8004316:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800431a:	d100      	bne.n	800431e <__cvt+0x3e>
 800431c:	3401      	adds	r4, #1
 800431e:	2102      	movs	r1, #2
 8004320:	e000      	b.n	8004324 <__cvt+0x44>
 8004322:	2103      	movs	r1, #3
 8004324:	ab03      	add	r3, sp, #12
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	ab02      	add	r3, sp, #8
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	ec47 6b10 	vmov	d0, r6, r7
 8004330:	4653      	mov	r3, sl
 8004332:	4622      	mov	r2, r4
 8004334:	f000 fe54 	bl	8004fe0 <_dtoa_r>
 8004338:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800433c:	4605      	mov	r5, r0
 800433e:	d119      	bne.n	8004374 <__cvt+0x94>
 8004340:	f019 0f01 	tst.w	r9, #1
 8004344:	d00e      	beq.n	8004364 <__cvt+0x84>
 8004346:	eb00 0904 	add.w	r9, r0, r4
 800434a:	2200      	movs	r2, #0
 800434c:	2300      	movs	r3, #0
 800434e:	4630      	mov	r0, r6
 8004350:	4639      	mov	r1, r7
 8004352:	f7fc fbd1 	bl	8000af8 <__aeabi_dcmpeq>
 8004356:	b108      	cbz	r0, 800435c <__cvt+0x7c>
 8004358:	f8cd 900c 	str.w	r9, [sp, #12]
 800435c:	2230      	movs	r2, #48	@ 0x30
 800435e:	9b03      	ldr	r3, [sp, #12]
 8004360:	454b      	cmp	r3, r9
 8004362:	d31e      	bcc.n	80043a2 <__cvt+0xc2>
 8004364:	9b03      	ldr	r3, [sp, #12]
 8004366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004368:	1b5b      	subs	r3, r3, r5
 800436a:	4628      	mov	r0, r5
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	b004      	add	sp, #16
 8004370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004374:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004378:	eb00 0904 	add.w	r9, r0, r4
 800437c:	d1e5      	bne.n	800434a <__cvt+0x6a>
 800437e:	7803      	ldrb	r3, [r0, #0]
 8004380:	2b30      	cmp	r3, #48	@ 0x30
 8004382:	d10a      	bne.n	800439a <__cvt+0xba>
 8004384:	2200      	movs	r2, #0
 8004386:	2300      	movs	r3, #0
 8004388:	4630      	mov	r0, r6
 800438a:	4639      	mov	r1, r7
 800438c:	f7fc fbb4 	bl	8000af8 <__aeabi_dcmpeq>
 8004390:	b918      	cbnz	r0, 800439a <__cvt+0xba>
 8004392:	f1c4 0401 	rsb	r4, r4, #1
 8004396:	f8ca 4000 	str.w	r4, [sl]
 800439a:	f8da 3000 	ldr.w	r3, [sl]
 800439e:	4499      	add	r9, r3
 80043a0:	e7d3      	b.n	800434a <__cvt+0x6a>
 80043a2:	1c59      	adds	r1, r3, #1
 80043a4:	9103      	str	r1, [sp, #12]
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e7d9      	b.n	800435e <__cvt+0x7e>

080043aa <__exponent>:
 80043aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ac:	2900      	cmp	r1, #0
 80043ae:	bfba      	itte	lt
 80043b0:	4249      	neglt	r1, r1
 80043b2:	232d      	movlt	r3, #45	@ 0x2d
 80043b4:	232b      	movge	r3, #43	@ 0x2b
 80043b6:	2909      	cmp	r1, #9
 80043b8:	7002      	strb	r2, [r0, #0]
 80043ba:	7043      	strb	r3, [r0, #1]
 80043bc:	dd29      	ble.n	8004412 <__exponent+0x68>
 80043be:	f10d 0307 	add.w	r3, sp, #7
 80043c2:	461d      	mov	r5, r3
 80043c4:	270a      	movs	r7, #10
 80043c6:	461a      	mov	r2, r3
 80043c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80043cc:	fb07 1416 	mls	r4, r7, r6, r1
 80043d0:	3430      	adds	r4, #48	@ 0x30
 80043d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80043d6:	460c      	mov	r4, r1
 80043d8:	2c63      	cmp	r4, #99	@ 0x63
 80043da:	f103 33ff 	add.w	r3, r3, #4294967295
 80043de:	4631      	mov	r1, r6
 80043e0:	dcf1      	bgt.n	80043c6 <__exponent+0x1c>
 80043e2:	3130      	adds	r1, #48	@ 0x30
 80043e4:	1e94      	subs	r4, r2, #2
 80043e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043ea:	1c41      	adds	r1, r0, #1
 80043ec:	4623      	mov	r3, r4
 80043ee:	42ab      	cmp	r3, r5
 80043f0:	d30a      	bcc.n	8004408 <__exponent+0x5e>
 80043f2:	f10d 0309 	add.w	r3, sp, #9
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	42ac      	cmp	r4, r5
 80043fa:	bf88      	it	hi
 80043fc:	2300      	movhi	r3, #0
 80043fe:	3302      	adds	r3, #2
 8004400:	4403      	add	r3, r0
 8004402:	1a18      	subs	r0, r3, r0
 8004404:	b003      	add	sp, #12
 8004406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004408:	f813 6b01 	ldrb.w	r6, [r3], #1
 800440c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004410:	e7ed      	b.n	80043ee <__exponent+0x44>
 8004412:	2330      	movs	r3, #48	@ 0x30
 8004414:	3130      	adds	r1, #48	@ 0x30
 8004416:	7083      	strb	r3, [r0, #2]
 8004418:	70c1      	strb	r1, [r0, #3]
 800441a:	1d03      	adds	r3, r0, #4
 800441c:	e7f1      	b.n	8004402 <__exponent+0x58>
	...

08004420 <_printf_float>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	b08d      	sub	sp, #52	@ 0x34
 8004426:	460c      	mov	r4, r1
 8004428:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800442c:	4616      	mov	r6, r2
 800442e:	461f      	mov	r7, r3
 8004430:	4605      	mov	r5, r0
 8004432:	f000 fcd5 	bl	8004de0 <_localeconv_r>
 8004436:	6803      	ldr	r3, [r0, #0]
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fb ff30 	bl	80002a0 <strlen>
 8004440:	2300      	movs	r3, #0
 8004442:	930a      	str	r3, [sp, #40]	@ 0x28
 8004444:	f8d8 3000 	ldr.w	r3, [r8]
 8004448:	9005      	str	r0, [sp, #20]
 800444a:	3307      	adds	r3, #7
 800444c:	f023 0307 	bic.w	r3, r3, #7
 8004450:	f103 0208 	add.w	r2, r3, #8
 8004454:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004458:	f8d4 b000 	ldr.w	fp, [r4]
 800445c:	f8c8 2000 	str.w	r2, [r8]
 8004460:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004464:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004468:	9307      	str	r3, [sp, #28]
 800446a:	f8cd 8018 	str.w	r8, [sp, #24]
 800446e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004476:	4b9c      	ldr	r3, [pc, #624]	@ (80046e8 <_printf_float+0x2c8>)
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	f7fc fb6e 	bl	8000b5c <__aeabi_dcmpun>
 8004480:	bb70      	cbnz	r0, 80044e0 <_printf_float+0xc0>
 8004482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004486:	4b98      	ldr	r3, [pc, #608]	@ (80046e8 <_printf_float+0x2c8>)
 8004488:	f04f 32ff 	mov.w	r2, #4294967295
 800448c:	f7fc fb48 	bl	8000b20 <__aeabi_dcmple>
 8004490:	bb30      	cbnz	r0, 80044e0 <_printf_float+0xc0>
 8004492:	2200      	movs	r2, #0
 8004494:	2300      	movs	r3, #0
 8004496:	4640      	mov	r0, r8
 8004498:	4649      	mov	r1, r9
 800449a:	f7fc fb37 	bl	8000b0c <__aeabi_dcmplt>
 800449e:	b110      	cbz	r0, 80044a6 <_printf_float+0x86>
 80044a0:	232d      	movs	r3, #45	@ 0x2d
 80044a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044a6:	4a91      	ldr	r2, [pc, #580]	@ (80046ec <_printf_float+0x2cc>)
 80044a8:	4b91      	ldr	r3, [pc, #580]	@ (80046f0 <_printf_float+0x2d0>)
 80044aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80044ae:	bf94      	ite	ls
 80044b0:	4690      	movls	r8, r2
 80044b2:	4698      	movhi	r8, r3
 80044b4:	2303      	movs	r3, #3
 80044b6:	6123      	str	r3, [r4, #16]
 80044b8:	f02b 0304 	bic.w	r3, fp, #4
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	f04f 0900 	mov.w	r9, #0
 80044c2:	9700      	str	r7, [sp, #0]
 80044c4:	4633      	mov	r3, r6
 80044c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f9d2 	bl	8004874 <_printf_common>
 80044d0:	3001      	adds	r0, #1
 80044d2:	f040 808d 	bne.w	80045f0 <_printf_float+0x1d0>
 80044d6:	f04f 30ff 	mov.w	r0, #4294967295
 80044da:	b00d      	add	sp, #52	@ 0x34
 80044dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	4640      	mov	r0, r8
 80044e6:	4649      	mov	r1, r9
 80044e8:	f7fc fb38 	bl	8000b5c <__aeabi_dcmpun>
 80044ec:	b140      	cbz	r0, 8004500 <_printf_float+0xe0>
 80044ee:	464b      	mov	r3, r9
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bfbc      	itt	lt
 80044f4:	232d      	movlt	r3, #45	@ 0x2d
 80044f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80044fa:	4a7e      	ldr	r2, [pc, #504]	@ (80046f4 <_printf_float+0x2d4>)
 80044fc:	4b7e      	ldr	r3, [pc, #504]	@ (80046f8 <_printf_float+0x2d8>)
 80044fe:	e7d4      	b.n	80044aa <_printf_float+0x8a>
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004506:	9206      	str	r2, [sp, #24]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	d13b      	bne.n	8004584 <_printf_float+0x164>
 800450c:	2306      	movs	r3, #6
 800450e:	6063      	str	r3, [r4, #4]
 8004510:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004514:	2300      	movs	r3, #0
 8004516:	6022      	str	r2, [r4, #0]
 8004518:	9303      	str	r3, [sp, #12]
 800451a:	ab0a      	add	r3, sp, #40	@ 0x28
 800451c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004520:	ab09      	add	r3, sp, #36	@ 0x24
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	6861      	ldr	r1, [r4, #4]
 8004526:	ec49 8b10 	vmov	d0, r8, r9
 800452a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800452e:	4628      	mov	r0, r5
 8004530:	f7ff fed6 	bl	80042e0 <__cvt>
 8004534:	9b06      	ldr	r3, [sp, #24]
 8004536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004538:	2b47      	cmp	r3, #71	@ 0x47
 800453a:	4680      	mov	r8, r0
 800453c:	d129      	bne.n	8004592 <_printf_float+0x172>
 800453e:	1cc8      	adds	r0, r1, #3
 8004540:	db02      	blt.n	8004548 <_printf_float+0x128>
 8004542:	6863      	ldr	r3, [r4, #4]
 8004544:	4299      	cmp	r1, r3
 8004546:	dd41      	ble.n	80045cc <_printf_float+0x1ac>
 8004548:	f1aa 0a02 	sub.w	sl, sl, #2
 800454c:	fa5f fa8a 	uxtb.w	sl, sl
 8004550:	3901      	subs	r1, #1
 8004552:	4652      	mov	r2, sl
 8004554:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004558:	9109      	str	r1, [sp, #36]	@ 0x24
 800455a:	f7ff ff26 	bl	80043aa <__exponent>
 800455e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004560:	1813      	adds	r3, r2, r0
 8004562:	2a01      	cmp	r2, #1
 8004564:	4681      	mov	r9, r0
 8004566:	6123      	str	r3, [r4, #16]
 8004568:	dc02      	bgt.n	8004570 <_printf_float+0x150>
 800456a:	6822      	ldr	r2, [r4, #0]
 800456c:	07d2      	lsls	r2, r2, #31
 800456e:	d501      	bpl.n	8004574 <_printf_float+0x154>
 8004570:	3301      	adds	r3, #1
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0a2      	beq.n	80044c2 <_printf_float+0xa2>
 800457c:	232d      	movs	r3, #45	@ 0x2d
 800457e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004582:	e79e      	b.n	80044c2 <_printf_float+0xa2>
 8004584:	9a06      	ldr	r2, [sp, #24]
 8004586:	2a47      	cmp	r2, #71	@ 0x47
 8004588:	d1c2      	bne.n	8004510 <_printf_float+0xf0>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1c0      	bne.n	8004510 <_printf_float+0xf0>
 800458e:	2301      	movs	r3, #1
 8004590:	e7bd      	b.n	800450e <_printf_float+0xee>
 8004592:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004596:	d9db      	bls.n	8004550 <_printf_float+0x130>
 8004598:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800459c:	d118      	bne.n	80045d0 <_printf_float+0x1b0>
 800459e:	2900      	cmp	r1, #0
 80045a0:	6863      	ldr	r3, [r4, #4]
 80045a2:	dd0b      	ble.n	80045bc <_printf_float+0x19c>
 80045a4:	6121      	str	r1, [r4, #16]
 80045a6:	b913      	cbnz	r3, 80045ae <_printf_float+0x18e>
 80045a8:	6822      	ldr	r2, [r4, #0]
 80045aa:	07d0      	lsls	r0, r2, #31
 80045ac:	d502      	bpl.n	80045b4 <_printf_float+0x194>
 80045ae:	3301      	adds	r3, #1
 80045b0:	440b      	add	r3, r1
 80045b2:	6123      	str	r3, [r4, #16]
 80045b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80045b6:	f04f 0900 	mov.w	r9, #0
 80045ba:	e7db      	b.n	8004574 <_printf_float+0x154>
 80045bc:	b913      	cbnz	r3, 80045c4 <_printf_float+0x1a4>
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	07d2      	lsls	r2, r2, #31
 80045c2:	d501      	bpl.n	80045c8 <_printf_float+0x1a8>
 80045c4:	3302      	adds	r3, #2
 80045c6:	e7f4      	b.n	80045b2 <_printf_float+0x192>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e7f2      	b.n	80045b2 <_printf_float+0x192>
 80045cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80045d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045d2:	4299      	cmp	r1, r3
 80045d4:	db05      	blt.n	80045e2 <_printf_float+0x1c2>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	6121      	str	r1, [r4, #16]
 80045da:	07d8      	lsls	r0, r3, #31
 80045dc:	d5ea      	bpl.n	80045b4 <_printf_float+0x194>
 80045de:	1c4b      	adds	r3, r1, #1
 80045e0:	e7e7      	b.n	80045b2 <_printf_float+0x192>
 80045e2:	2900      	cmp	r1, #0
 80045e4:	bfd4      	ite	le
 80045e6:	f1c1 0202 	rsble	r2, r1, #2
 80045ea:	2201      	movgt	r2, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	e7e0      	b.n	80045b2 <_printf_float+0x192>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	055a      	lsls	r2, r3, #21
 80045f4:	d407      	bmi.n	8004606 <_printf_float+0x1e6>
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	4642      	mov	r2, r8
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b8      	blx	r7
 8004600:	3001      	adds	r0, #1
 8004602:	d12b      	bne.n	800465c <_printf_float+0x23c>
 8004604:	e767      	b.n	80044d6 <_printf_float+0xb6>
 8004606:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800460a:	f240 80dd 	bls.w	80047c8 <_printf_float+0x3a8>
 800460e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004612:	2200      	movs	r2, #0
 8004614:	2300      	movs	r3, #0
 8004616:	f7fc fa6f 	bl	8000af8 <__aeabi_dcmpeq>
 800461a:	2800      	cmp	r0, #0
 800461c:	d033      	beq.n	8004686 <_printf_float+0x266>
 800461e:	4a37      	ldr	r2, [pc, #220]	@ (80046fc <_printf_float+0x2dc>)
 8004620:	2301      	movs	r3, #1
 8004622:	4631      	mov	r1, r6
 8004624:	4628      	mov	r0, r5
 8004626:	47b8      	blx	r7
 8004628:	3001      	adds	r0, #1
 800462a:	f43f af54 	beq.w	80044d6 <_printf_float+0xb6>
 800462e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004632:	4543      	cmp	r3, r8
 8004634:	db02      	blt.n	800463c <_printf_float+0x21c>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	07d8      	lsls	r0, r3, #31
 800463a:	d50f      	bpl.n	800465c <_printf_float+0x23c>
 800463c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f af45 	beq.w	80044d6 <_printf_float+0xb6>
 800464c:	f04f 0900 	mov.w	r9, #0
 8004650:	f108 38ff 	add.w	r8, r8, #4294967295
 8004654:	f104 0a1a 	add.w	sl, r4, #26
 8004658:	45c8      	cmp	r8, r9
 800465a:	dc09      	bgt.n	8004670 <_printf_float+0x250>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	079b      	lsls	r3, r3, #30
 8004660:	f100 8103 	bmi.w	800486a <_printf_float+0x44a>
 8004664:	68e0      	ldr	r0, [r4, #12]
 8004666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004668:	4298      	cmp	r0, r3
 800466a:	bfb8      	it	lt
 800466c:	4618      	movlt	r0, r3
 800466e:	e734      	b.n	80044da <_printf_float+0xba>
 8004670:	2301      	movs	r3, #1
 8004672:	4652      	mov	r2, sl
 8004674:	4631      	mov	r1, r6
 8004676:	4628      	mov	r0, r5
 8004678:	47b8      	blx	r7
 800467a:	3001      	adds	r0, #1
 800467c:	f43f af2b 	beq.w	80044d6 <_printf_float+0xb6>
 8004680:	f109 0901 	add.w	r9, r9, #1
 8004684:	e7e8      	b.n	8004658 <_printf_float+0x238>
 8004686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	dc39      	bgt.n	8004700 <_printf_float+0x2e0>
 800468c:	4a1b      	ldr	r2, [pc, #108]	@ (80046fc <_printf_float+0x2dc>)
 800468e:	2301      	movs	r3, #1
 8004690:	4631      	mov	r1, r6
 8004692:	4628      	mov	r0, r5
 8004694:	47b8      	blx	r7
 8004696:	3001      	adds	r0, #1
 8004698:	f43f af1d 	beq.w	80044d6 <_printf_float+0xb6>
 800469c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80046a0:	ea59 0303 	orrs.w	r3, r9, r3
 80046a4:	d102      	bne.n	80046ac <_printf_float+0x28c>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	07d9      	lsls	r1, r3, #31
 80046aa:	d5d7      	bpl.n	800465c <_printf_float+0x23c>
 80046ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b0:	4631      	mov	r1, r6
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b8      	blx	r7
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f af0d 	beq.w	80044d6 <_printf_float+0xb6>
 80046bc:	f04f 0a00 	mov.w	sl, #0
 80046c0:	f104 0b1a 	add.w	fp, r4, #26
 80046c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046c6:	425b      	negs	r3, r3
 80046c8:	4553      	cmp	r3, sl
 80046ca:	dc01      	bgt.n	80046d0 <_printf_float+0x2b0>
 80046cc:	464b      	mov	r3, r9
 80046ce:	e793      	b.n	80045f8 <_printf_float+0x1d8>
 80046d0:	2301      	movs	r3, #1
 80046d2:	465a      	mov	r2, fp
 80046d4:	4631      	mov	r1, r6
 80046d6:	4628      	mov	r0, r5
 80046d8:	47b8      	blx	r7
 80046da:	3001      	adds	r0, #1
 80046dc:	f43f aefb 	beq.w	80044d6 <_printf_float+0xb6>
 80046e0:	f10a 0a01 	add.w	sl, sl, #1
 80046e4:	e7ee      	b.n	80046c4 <_printf_float+0x2a4>
 80046e6:	bf00      	nop
 80046e8:	7fefffff 	.word	0x7fefffff
 80046ec:	08006c70 	.word	0x08006c70
 80046f0:	08006c74 	.word	0x08006c74
 80046f4:	08006c78 	.word	0x08006c78
 80046f8:	08006c7c 	.word	0x08006c7c
 80046fc:	08006c80 	.word	0x08006c80
 8004700:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004702:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004706:	4553      	cmp	r3, sl
 8004708:	bfa8      	it	ge
 800470a:	4653      	movge	r3, sl
 800470c:	2b00      	cmp	r3, #0
 800470e:	4699      	mov	r9, r3
 8004710:	dc36      	bgt.n	8004780 <_printf_float+0x360>
 8004712:	f04f 0b00 	mov.w	fp, #0
 8004716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800471a:	f104 021a 	add.w	r2, r4, #26
 800471e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004720:	9306      	str	r3, [sp, #24]
 8004722:	eba3 0309 	sub.w	r3, r3, r9
 8004726:	455b      	cmp	r3, fp
 8004728:	dc31      	bgt.n	800478e <_printf_float+0x36e>
 800472a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800472c:	459a      	cmp	sl, r3
 800472e:	dc3a      	bgt.n	80047a6 <_printf_float+0x386>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	07da      	lsls	r2, r3, #31
 8004734:	d437      	bmi.n	80047a6 <_printf_float+0x386>
 8004736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004738:	ebaa 0903 	sub.w	r9, sl, r3
 800473c:	9b06      	ldr	r3, [sp, #24]
 800473e:	ebaa 0303 	sub.w	r3, sl, r3
 8004742:	4599      	cmp	r9, r3
 8004744:	bfa8      	it	ge
 8004746:	4699      	movge	r9, r3
 8004748:	f1b9 0f00 	cmp.w	r9, #0
 800474c:	dc33      	bgt.n	80047b6 <_printf_float+0x396>
 800474e:	f04f 0800 	mov.w	r8, #0
 8004752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004756:	f104 0b1a 	add.w	fp, r4, #26
 800475a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800475c:	ebaa 0303 	sub.w	r3, sl, r3
 8004760:	eba3 0309 	sub.w	r3, r3, r9
 8004764:	4543      	cmp	r3, r8
 8004766:	f77f af79 	ble.w	800465c <_printf_float+0x23c>
 800476a:	2301      	movs	r3, #1
 800476c:	465a      	mov	r2, fp
 800476e:	4631      	mov	r1, r6
 8004770:	4628      	mov	r0, r5
 8004772:	47b8      	blx	r7
 8004774:	3001      	adds	r0, #1
 8004776:	f43f aeae 	beq.w	80044d6 <_printf_float+0xb6>
 800477a:	f108 0801 	add.w	r8, r8, #1
 800477e:	e7ec      	b.n	800475a <_printf_float+0x33a>
 8004780:	4642      	mov	r2, r8
 8004782:	4631      	mov	r1, r6
 8004784:	4628      	mov	r0, r5
 8004786:	47b8      	blx	r7
 8004788:	3001      	adds	r0, #1
 800478a:	d1c2      	bne.n	8004712 <_printf_float+0x2f2>
 800478c:	e6a3      	b.n	80044d6 <_printf_float+0xb6>
 800478e:	2301      	movs	r3, #1
 8004790:	4631      	mov	r1, r6
 8004792:	4628      	mov	r0, r5
 8004794:	9206      	str	r2, [sp, #24]
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	f43f ae9c 	beq.w	80044d6 <_printf_float+0xb6>
 800479e:	9a06      	ldr	r2, [sp, #24]
 80047a0:	f10b 0b01 	add.w	fp, fp, #1
 80047a4:	e7bb      	b.n	800471e <_printf_float+0x2fe>
 80047a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047aa:	4631      	mov	r1, r6
 80047ac:	4628      	mov	r0, r5
 80047ae:	47b8      	blx	r7
 80047b0:	3001      	adds	r0, #1
 80047b2:	d1c0      	bne.n	8004736 <_printf_float+0x316>
 80047b4:	e68f      	b.n	80044d6 <_printf_float+0xb6>
 80047b6:	9a06      	ldr	r2, [sp, #24]
 80047b8:	464b      	mov	r3, r9
 80047ba:	4442      	add	r2, r8
 80047bc:	4631      	mov	r1, r6
 80047be:	4628      	mov	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	d1c3      	bne.n	800474e <_printf_float+0x32e>
 80047c6:	e686      	b.n	80044d6 <_printf_float+0xb6>
 80047c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80047cc:	f1ba 0f01 	cmp.w	sl, #1
 80047d0:	dc01      	bgt.n	80047d6 <_printf_float+0x3b6>
 80047d2:	07db      	lsls	r3, r3, #31
 80047d4:	d536      	bpl.n	8004844 <_printf_float+0x424>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4642      	mov	r2, r8
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f ae78 	beq.w	80044d6 <_printf_float+0xb6>
 80047e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	f43f ae70 	beq.w	80044d6 <_printf_float+0xb6>
 80047f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80047fa:	2200      	movs	r2, #0
 80047fc:	2300      	movs	r3, #0
 80047fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004802:	f7fc f979 	bl	8000af8 <__aeabi_dcmpeq>
 8004806:	b9c0      	cbnz	r0, 800483a <_printf_float+0x41a>
 8004808:	4653      	mov	r3, sl
 800480a:	f108 0201 	add.w	r2, r8, #1
 800480e:	4631      	mov	r1, r6
 8004810:	4628      	mov	r0, r5
 8004812:	47b8      	blx	r7
 8004814:	3001      	adds	r0, #1
 8004816:	d10c      	bne.n	8004832 <_printf_float+0x412>
 8004818:	e65d      	b.n	80044d6 <_printf_float+0xb6>
 800481a:	2301      	movs	r3, #1
 800481c:	465a      	mov	r2, fp
 800481e:	4631      	mov	r1, r6
 8004820:	4628      	mov	r0, r5
 8004822:	47b8      	blx	r7
 8004824:	3001      	adds	r0, #1
 8004826:	f43f ae56 	beq.w	80044d6 <_printf_float+0xb6>
 800482a:	f108 0801 	add.w	r8, r8, #1
 800482e:	45d0      	cmp	r8, sl
 8004830:	dbf3      	blt.n	800481a <_printf_float+0x3fa>
 8004832:	464b      	mov	r3, r9
 8004834:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004838:	e6df      	b.n	80045fa <_printf_float+0x1da>
 800483a:	f04f 0800 	mov.w	r8, #0
 800483e:	f104 0b1a 	add.w	fp, r4, #26
 8004842:	e7f4      	b.n	800482e <_printf_float+0x40e>
 8004844:	2301      	movs	r3, #1
 8004846:	4642      	mov	r2, r8
 8004848:	e7e1      	b.n	800480e <_printf_float+0x3ee>
 800484a:	2301      	movs	r3, #1
 800484c:	464a      	mov	r2, r9
 800484e:	4631      	mov	r1, r6
 8004850:	4628      	mov	r0, r5
 8004852:	47b8      	blx	r7
 8004854:	3001      	adds	r0, #1
 8004856:	f43f ae3e 	beq.w	80044d6 <_printf_float+0xb6>
 800485a:	f108 0801 	add.w	r8, r8, #1
 800485e:	68e3      	ldr	r3, [r4, #12]
 8004860:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004862:	1a5b      	subs	r3, r3, r1
 8004864:	4543      	cmp	r3, r8
 8004866:	dcf0      	bgt.n	800484a <_printf_float+0x42a>
 8004868:	e6fc      	b.n	8004664 <_printf_float+0x244>
 800486a:	f04f 0800 	mov.w	r8, #0
 800486e:	f104 0919 	add.w	r9, r4, #25
 8004872:	e7f4      	b.n	800485e <_printf_float+0x43e>

08004874 <_printf_common>:
 8004874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	4616      	mov	r6, r2
 800487a:	4698      	mov	r8, r3
 800487c:	688a      	ldr	r2, [r1, #8]
 800487e:	690b      	ldr	r3, [r1, #16]
 8004880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004884:	4293      	cmp	r3, r2
 8004886:	bfb8      	it	lt
 8004888:	4613      	movlt	r3, r2
 800488a:	6033      	str	r3, [r6, #0]
 800488c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004890:	4607      	mov	r7, r0
 8004892:	460c      	mov	r4, r1
 8004894:	b10a      	cbz	r2, 800489a <_printf_common+0x26>
 8004896:	3301      	adds	r3, #1
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	0699      	lsls	r1, r3, #26
 800489e:	bf42      	ittt	mi
 80048a0:	6833      	ldrmi	r3, [r6, #0]
 80048a2:	3302      	addmi	r3, #2
 80048a4:	6033      	strmi	r3, [r6, #0]
 80048a6:	6825      	ldr	r5, [r4, #0]
 80048a8:	f015 0506 	ands.w	r5, r5, #6
 80048ac:	d106      	bne.n	80048bc <_printf_common+0x48>
 80048ae:	f104 0a19 	add.w	sl, r4, #25
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	6832      	ldr	r2, [r6, #0]
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	42ab      	cmp	r3, r5
 80048ba:	dc26      	bgt.n	800490a <_printf_common+0x96>
 80048bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	3b00      	subs	r3, #0
 80048c4:	bf18      	it	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	0692      	lsls	r2, r2, #26
 80048ca:	d42b      	bmi.n	8004924 <_printf_common+0xb0>
 80048cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048d0:	4641      	mov	r1, r8
 80048d2:	4638      	mov	r0, r7
 80048d4:	47c8      	blx	r9
 80048d6:	3001      	adds	r0, #1
 80048d8:	d01e      	beq.n	8004918 <_printf_common+0xa4>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6922      	ldr	r2, [r4, #16]
 80048de:	f003 0306 	and.w	r3, r3, #6
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	bf02      	ittt	eq
 80048e6:	68e5      	ldreq	r5, [r4, #12]
 80048e8:	6833      	ldreq	r3, [r6, #0]
 80048ea:	1aed      	subeq	r5, r5, r3
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	bf0c      	ite	eq
 80048f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048f4:	2500      	movne	r5, #0
 80048f6:	4293      	cmp	r3, r2
 80048f8:	bfc4      	itt	gt
 80048fa:	1a9b      	subgt	r3, r3, r2
 80048fc:	18ed      	addgt	r5, r5, r3
 80048fe:	2600      	movs	r6, #0
 8004900:	341a      	adds	r4, #26
 8004902:	42b5      	cmp	r5, r6
 8004904:	d11a      	bne.n	800493c <_printf_common+0xc8>
 8004906:	2000      	movs	r0, #0
 8004908:	e008      	b.n	800491c <_printf_common+0xa8>
 800490a:	2301      	movs	r3, #1
 800490c:	4652      	mov	r2, sl
 800490e:	4641      	mov	r1, r8
 8004910:	4638      	mov	r0, r7
 8004912:	47c8      	blx	r9
 8004914:	3001      	adds	r0, #1
 8004916:	d103      	bne.n	8004920 <_printf_common+0xac>
 8004918:	f04f 30ff 	mov.w	r0, #4294967295
 800491c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004920:	3501      	adds	r5, #1
 8004922:	e7c6      	b.n	80048b2 <_printf_common+0x3e>
 8004924:	18e1      	adds	r1, r4, r3
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	2030      	movs	r0, #48	@ 0x30
 800492a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800492e:	4422      	add	r2, r4
 8004930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004938:	3302      	adds	r3, #2
 800493a:	e7c7      	b.n	80048cc <_printf_common+0x58>
 800493c:	2301      	movs	r3, #1
 800493e:	4622      	mov	r2, r4
 8004940:	4641      	mov	r1, r8
 8004942:	4638      	mov	r0, r7
 8004944:	47c8      	blx	r9
 8004946:	3001      	adds	r0, #1
 8004948:	d0e6      	beq.n	8004918 <_printf_common+0xa4>
 800494a:	3601      	adds	r6, #1
 800494c:	e7d9      	b.n	8004902 <_printf_common+0x8e>
	...

08004950 <_printf_i>:
 8004950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	7e0f      	ldrb	r7, [r1, #24]
 8004956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004958:	2f78      	cmp	r7, #120	@ 0x78
 800495a:	4691      	mov	r9, r2
 800495c:	4680      	mov	r8, r0
 800495e:	460c      	mov	r4, r1
 8004960:	469a      	mov	sl, r3
 8004962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004966:	d807      	bhi.n	8004978 <_printf_i+0x28>
 8004968:	2f62      	cmp	r7, #98	@ 0x62
 800496a:	d80a      	bhi.n	8004982 <_printf_i+0x32>
 800496c:	2f00      	cmp	r7, #0
 800496e:	f000 80d2 	beq.w	8004b16 <_printf_i+0x1c6>
 8004972:	2f58      	cmp	r7, #88	@ 0x58
 8004974:	f000 80b9 	beq.w	8004aea <_printf_i+0x19a>
 8004978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800497c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004980:	e03a      	b.n	80049f8 <_printf_i+0xa8>
 8004982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004986:	2b15      	cmp	r3, #21
 8004988:	d8f6      	bhi.n	8004978 <_printf_i+0x28>
 800498a:	a101      	add	r1, pc, #4	@ (adr r1, 8004990 <_printf_i+0x40>)
 800498c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004990:	080049e9 	.word	0x080049e9
 8004994:	080049fd 	.word	0x080049fd
 8004998:	08004979 	.word	0x08004979
 800499c:	08004979 	.word	0x08004979
 80049a0:	08004979 	.word	0x08004979
 80049a4:	08004979 	.word	0x08004979
 80049a8:	080049fd 	.word	0x080049fd
 80049ac:	08004979 	.word	0x08004979
 80049b0:	08004979 	.word	0x08004979
 80049b4:	08004979 	.word	0x08004979
 80049b8:	08004979 	.word	0x08004979
 80049bc:	08004afd 	.word	0x08004afd
 80049c0:	08004a27 	.word	0x08004a27
 80049c4:	08004ab7 	.word	0x08004ab7
 80049c8:	08004979 	.word	0x08004979
 80049cc:	08004979 	.word	0x08004979
 80049d0:	08004b1f 	.word	0x08004b1f
 80049d4:	08004979 	.word	0x08004979
 80049d8:	08004a27 	.word	0x08004a27
 80049dc:	08004979 	.word	0x08004979
 80049e0:	08004979 	.word	0x08004979
 80049e4:	08004abf 	.word	0x08004abf
 80049e8:	6833      	ldr	r3, [r6, #0]
 80049ea:	1d1a      	adds	r2, r3, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6032      	str	r2, [r6, #0]
 80049f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049f8:	2301      	movs	r3, #1
 80049fa:	e09d      	b.n	8004b38 <_printf_i+0x1e8>
 80049fc:	6833      	ldr	r3, [r6, #0]
 80049fe:	6820      	ldr	r0, [r4, #0]
 8004a00:	1d19      	adds	r1, r3, #4
 8004a02:	6031      	str	r1, [r6, #0]
 8004a04:	0606      	lsls	r6, r0, #24
 8004a06:	d501      	bpl.n	8004a0c <_printf_i+0xbc>
 8004a08:	681d      	ldr	r5, [r3, #0]
 8004a0a:	e003      	b.n	8004a14 <_printf_i+0xc4>
 8004a0c:	0645      	lsls	r5, r0, #25
 8004a0e:	d5fb      	bpl.n	8004a08 <_printf_i+0xb8>
 8004a10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a14:	2d00      	cmp	r5, #0
 8004a16:	da03      	bge.n	8004a20 <_printf_i+0xd0>
 8004a18:	232d      	movs	r3, #45	@ 0x2d
 8004a1a:	426d      	negs	r5, r5
 8004a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a20:	4859      	ldr	r0, [pc, #356]	@ (8004b88 <_printf_i+0x238>)
 8004a22:	230a      	movs	r3, #10
 8004a24:	e011      	b.n	8004a4a <_printf_i+0xfa>
 8004a26:	6821      	ldr	r1, [r4, #0]
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	0608      	lsls	r0, r1, #24
 8004a2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a30:	d402      	bmi.n	8004a38 <_printf_i+0xe8>
 8004a32:	0649      	lsls	r1, r1, #25
 8004a34:	bf48      	it	mi
 8004a36:	b2ad      	uxthmi	r5, r5
 8004a38:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a3a:	4853      	ldr	r0, [pc, #332]	@ (8004b88 <_printf_i+0x238>)
 8004a3c:	6033      	str	r3, [r6, #0]
 8004a3e:	bf14      	ite	ne
 8004a40:	230a      	movne	r3, #10
 8004a42:	2308      	moveq	r3, #8
 8004a44:	2100      	movs	r1, #0
 8004a46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a4a:	6866      	ldr	r6, [r4, #4]
 8004a4c:	60a6      	str	r6, [r4, #8]
 8004a4e:	2e00      	cmp	r6, #0
 8004a50:	bfa2      	ittt	ge
 8004a52:	6821      	ldrge	r1, [r4, #0]
 8004a54:	f021 0104 	bicge.w	r1, r1, #4
 8004a58:	6021      	strge	r1, [r4, #0]
 8004a5a:	b90d      	cbnz	r5, 8004a60 <_printf_i+0x110>
 8004a5c:	2e00      	cmp	r6, #0
 8004a5e:	d04b      	beq.n	8004af8 <_printf_i+0x1a8>
 8004a60:	4616      	mov	r6, r2
 8004a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a66:	fb03 5711 	mls	r7, r3, r1, r5
 8004a6a:	5dc7      	ldrb	r7, [r0, r7]
 8004a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a70:	462f      	mov	r7, r5
 8004a72:	42bb      	cmp	r3, r7
 8004a74:	460d      	mov	r5, r1
 8004a76:	d9f4      	bls.n	8004a62 <_printf_i+0x112>
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d10b      	bne.n	8004a94 <_printf_i+0x144>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	07df      	lsls	r7, r3, #31
 8004a80:	d508      	bpl.n	8004a94 <_printf_i+0x144>
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	6861      	ldr	r1, [r4, #4]
 8004a86:	4299      	cmp	r1, r3
 8004a88:	bfde      	ittt	le
 8004a8a:	2330      	movle	r3, #48	@ 0x30
 8004a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a94:	1b92      	subs	r2, r2, r6
 8004a96:	6122      	str	r2, [r4, #16]
 8004a98:	f8cd a000 	str.w	sl, [sp]
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	aa03      	add	r2, sp, #12
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f7ff fee6 	bl	8004874 <_printf_common>
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d14a      	bne.n	8004b42 <_printf_i+0x1f2>
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	b004      	add	sp, #16
 8004ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f043 0320 	orr.w	r3, r3, #32
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	4833      	ldr	r0, [pc, #204]	@ (8004b8c <_printf_i+0x23c>)
 8004ac0:	2778      	movs	r7, #120	@ 0x78
 8004ac2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	6831      	ldr	r1, [r6, #0]
 8004aca:	061f      	lsls	r7, r3, #24
 8004acc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ad0:	d402      	bmi.n	8004ad8 <_printf_i+0x188>
 8004ad2:	065f      	lsls	r7, r3, #25
 8004ad4:	bf48      	it	mi
 8004ad6:	b2ad      	uxthmi	r5, r5
 8004ad8:	6031      	str	r1, [r6, #0]
 8004ada:	07d9      	lsls	r1, r3, #31
 8004adc:	bf44      	itt	mi
 8004ade:	f043 0320 	orrmi.w	r3, r3, #32
 8004ae2:	6023      	strmi	r3, [r4, #0]
 8004ae4:	b11d      	cbz	r5, 8004aee <_printf_i+0x19e>
 8004ae6:	2310      	movs	r3, #16
 8004ae8:	e7ac      	b.n	8004a44 <_printf_i+0xf4>
 8004aea:	4827      	ldr	r0, [pc, #156]	@ (8004b88 <_printf_i+0x238>)
 8004aec:	e7e9      	b.n	8004ac2 <_printf_i+0x172>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	f023 0320 	bic.w	r3, r3, #32
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	e7f6      	b.n	8004ae6 <_printf_i+0x196>
 8004af8:	4616      	mov	r6, r2
 8004afa:	e7bd      	b.n	8004a78 <_printf_i+0x128>
 8004afc:	6833      	ldr	r3, [r6, #0]
 8004afe:	6825      	ldr	r5, [r4, #0]
 8004b00:	6961      	ldr	r1, [r4, #20]
 8004b02:	1d18      	adds	r0, r3, #4
 8004b04:	6030      	str	r0, [r6, #0]
 8004b06:	062e      	lsls	r6, r5, #24
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	d501      	bpl.n	8004b10 <_printf_i+0x1c0>
 8004b0c:	6019      	str	r1, [r3, #0]
 8004b0e:	e002      	b.n	8004b16 <_printf_i+0x1c6>
 8004b10:	0668      	lsls	r0, r5, #25
 8004b12:	d5fb      	bpl.n	8004b0c <_printf_i+0x1bc>
 8004b14:	8019      	strh	r1, [r3, #0]
 8004b16:	2300      	movs	r3, #0
 8004b18:	6123      	str	r3, [r4, #16]
 8004b1a:	4616      	mov	r6, r2
 8004b1c:	e7bc      	b.n	8004a98 <_printf_i+0x148>
 8004b1e:	6833      	ldr	r3, [r6, #0]
 8004b20:	1d1a      	adds	r2, r3, #4
 8004b22:	6032      	str	r2, [r6, #0]
 8004b24:	681e      	ldr	r6, [r3, #0]
 8004b26:	6862      	ldr	r2, [r4, #4]
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7fb fb68 	bl	8000200 <memchr>
 8004b30:	b108      	cbz	r0, 8004b36 <_printf_i+0x1e6>
 8004b32:	1b80      	subs	r0, r0, r6
 8004b34:	6060      	str	r0, [r4, #4]
 8004b36:	6863      	ldr	r3, [r4, #4]
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b40:	e7aa      	b.n	8004a98 <_printf_i+0x148>
 8004b42:	6923      	ldr	r3, [r4, #16]
 8004b44:	4632      	mov	r2, r6
 8004b46:	4649      	mov	r1, r9
 8004b48:	4640      	mov	r0, r8
 8004b4a:	47d0      	blx	sl
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d0ad      	beq.n	8004aac <_printf_i+0x15c>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	079b      	lsls	r3, r3, #30
 8004b54:	d413      	bmi.n	8004b7e <_printf_i+0x22e>
 8004b56:	68e0      	ldr	r0, [r4, #12]
 8004b58:	9b03      	ldr	r3, [sp, #12]
 8004b5a:	4298      	cmp	r0, r3
 8004b5c:	bfb8      	it	lt
 8004b5e:	4618      	movlt	r0, r3
 8004b60:	e7a6      	b.n	8004ab0 <_printf_i+0x160>
 8004b62:	2301      	movs	r3, #1
 8004b64:	4632      	mov	r2, r6
 8004b66:	4649      	mov	r1, r9
 8004b68:	4640      	mov	r0, r8
 8004b6a:	47d0      	blx	sl
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d09d      	beq.n	8004aac <_printf_i+0x15c>
 8004b70:	3501      	adds	r5, #1
 8004b72:	68e3      	ldr	r3, [r4, #12]
 8004b74:	9903      	ldr	r1, [sp, #12]
 8004b76:	1a5b      	subs	r3, r3, r1
 8004b78:	42ab      	cmp	r3, r5
 8004b7a:	dcf2      	bgt.n	8004b62 <_printf_i+0x212>
 8004b7c:	e7eb      	b.n	8004b56 <_printf_i+0x206>
 8004b7e:	2500      	movs	r5, #0
 8004b80:	f104 0619 	add.w	r6, r4, #25
 8004b84:	e7f5      	b.n	8004b72 <_printf_i+0x222>
 8004b86:	bf00      	nop
 8004b88:	08006c82 	.word	0x08006c82
 8004b8c:	08006c93 	.word	0x08006c93

08004b90 <std>:
 8004b90:	2300      	movs	r3, #0
 8004b92:	b510      	push	{r4, lr}
 8004b94:	4604      	mov	r4, r0
 8004b96:	e9c0 3300 	strd	r3, r3, [r0]
 8004b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b9e:	6083      	str	r3, [r0, #8]
 8004ba0:	8181      	strh	r1, [r0, #12]
 8004ba2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ba4:	81c2      	strh	r2, [r0, #14]
 8004ba6:	6183      	str	r3, [r0, #24]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	2208      	movs	r2, #8
 8004bac:	305c      	adds	r0, #92	@ 0x5c
 8004bae:	f000 f90e 	bl	8004dce <memset>
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <std+0x58>)
 8004bb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bec <std+0x5c>)
 8004bb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <std+0x60>)
 8004bbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <std+0x64>)
 8004bc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <std+0x68>)
 8004bc4:	6224      	str	r4, [r4, #32]
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d006      	beq.n	8004bd8 <std+0x48>
 8004bca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bce:	4294      	cmp	r4, r2
 8004bd0:	d002      	beq.n	8004bd8 <std+0x48>
 8004bd2:	33d0      	adds	r3, #208	@ 0xd0
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	d105      	bne.n	8004be4 <std+0x54>
 8004bd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f000 b972 	b.w	8004ec8 <__retarget_lock_init_recursive>
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	bf00      	nop
 8004be8:	08004d15 	.word	0x08004d15
 8004bec:	08004d37 	.word	0x08004d37
 8004bf0:	08004d6f 	.word	0x08004d6f
 8004bf4:	08004d93 	.word	0x08004d93
 8004bf8:	2000043c 	.word	0x2000043c

08004bfc <stdio_exit_handler>:
 8004bfc:	4a02      	ldr	r2, [pc, #8]	@ (8004c08 <stdio_exit_handler+0xc>)
 8004bfe:	4903      	ldr	r1, [pc, #12]	@ (8004c0c <stdio_exit_handler+0x10>)
 8004c00:	4803      	ldr	r0, [pc, #12]	@ (8004c10 <stdio_exit_handler+0x14>)
 8004c02:	f000 b869 	b.w	8004cd8 <_fwalk_sglue>
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c
 8004c0c:	08006575 	.word	0x08006575
 8004c10:	2000001c 	.word	0x2000001c

08004c14 <cleanup_stdio>:
 8004c14:	6841      	ldr	r1, [r0, #4]
 8004c16:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <cleanup_stdio+0x34>)
 8004c18:	4299      	cmp	r1, r3
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	d001      	beq.n	8004c24 <cleanup_stdio+0x10>
 8004c20:	f001 fca8 	bl	8006574 <_fflush_r>
 8004c24:	68a1      	ldr	r1, [r4, #8]
 8004c26:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <cleanup_stdio+0x38>)
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	d002      	beq.n	8004c32 <cleanup_stdio+0x1e>
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f001 fca1 	bl	8006574 <_fflush_r>
 8004c32:	68e1      	ldr	r1, [r4, #12]
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <cleanup_stdio+0x3c>)
 8004c36:	4299      	cmp	r1, r3
 8004c38:	d004      	beq.n	8004c44 <cleanup_stdio+0x30>
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c40:	f001 bc98 	b.w	8006574 <_fflush_r>
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	bf00      	nop
 8004c48:	2000043c 	.word	0x2000043c
 8004c4c:	200004a4 	.word	0x200004a4
 8004c50:	2000050c 	.word	0x2000050c

08004c54 <global_stdio_init.part.0>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <global_stdio_init.part.0+0x30>)
 8004c58:	4c0b      	ldr	r4, [pc, #44]	@ (8004c88 <global_stdio_init.part.0+0x34>)
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c8c <global_stdio_init.part.0+0x38>)
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	4620      	mov	r0, r4
 8004c60:	2200      	movs	r2, #0
 8004c62:	2104      	movs	r1, #4
 8004c64:	f7ff ff94 	bl	8004b90 <std>
 8004c68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2109      	movs	r1, #9
 8004c70:	f7ff ff8e 	bl	8004b90 <std>
 8004c74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c78:	2202      	movs	r2, #2
 8004c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c7e:	2112      	movs	r1, #18
 8004c80:	f7ff bf86 	b.w	8004b90 <std>
 8004c84:	20000574 	.word	0x20000574
 8004c88:	2000043c 	.word	0x2000043c
 8004c8c:	08004bfd 	.word	0x08004bfd

08004c90 <__sfp_lock_acquire>:
 8004c90:	4801      	ldr	r0, [pc, #4]	@ (8004c98 <__sfp_lock_acquire+0x8>)
 8004c92:	f000 b91a 	b.w	8004eca <__retarget_lock_acquire_recursive>
 8004c96:	bf00      	nop
 8004c98:	2000057d 	.word	0x2000057d

08004c9c <__sfp_lock_release>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	@ (8004ca4 <__sfp_lock_release+0x8>)
 8004c9e:	f000 b915 	b.w	8004ecc <__retarget_lock_release_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	2000057d 	.word	0x2000057d

08004ca8 <__sinit>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4604      	mov	r4, r0
 8004cac:	f7ff fff0 	bl	8004c90 <__sfp_lock_acquire>
 8004cb0:	6a23      	ldr	r3, [r4, #32]
 8004cb2:	b11b      	cbz	r3, 8004cbc <__sinit+0x14>
 8004cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb8:	f7ff bff0 	b.w	8004c9c <__sfp_lock_release>
 8004cbc:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <__sinit+0x28>)
 8004cbe:	6223      	str	r3, [r4, #32]
 8004cc0:	4b04      	ldr	r3, [pc, #16]	@ (8004cd4 <__sinit+0x2c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f5      	bne.n	8004cb4 <__sinit+0xc>
 8004cc8:	f7ff ffc4 	bl	8004c54 <global_stdio_init.part.0>
 8004ccc:	e7f2      	b.n	8004cb4 <__sinit+0xc>
 8004cce:	bf00      	nop
 8004cd0:	08004c15 	.word	0x08004c15
 8004cd4:	20000574 	.word	0x20000574

08004cd8 <_fwalk_sglue>:
 8004cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cdc:	4607      	mov	r7, r0
 8004cde:	4688      	mov	r8, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8004cec:	d505      	bpl.n	8004cfa <_fwalk_sglue+0x22>
 8004cee:	6824      	ldr	r4, [r4, #0]
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	d1f7      	bne.n	8004ce4 <_fwalk_sglue+0xc>
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfa:	89ab      	ldrh	r3, [r5, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d907      	bls.n	8004d10 <_fwalk_sglue+0x38>
 8004d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d04:	3301      	adds	r3, #1
 8004d06:	d003      	beq.n	8004d10 <_fwalk_sglue+0x38>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	47c0      	blx	r8
 8004d0e:	4306      	orrs	r6, r0
 8004d10:	3568      	adds	r5, #104	@ 0x68
 8004d12:	e7e9      	b.n	8004ce8 <_fwalk_sglue+0x10>

08004d14 <__sread>:
 8004d14:	b510      	push	{r4, lr}
 8004d16:	460c      	mov	r4, r1
 8004d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1c:	f000 f886 	bl	8004e2c <_read_r>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	bfab      	itete	ge
 8004d24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d26:	89a3      	ldrhlt	r3, [r4, #12]
 8004d28:	181b      	addge	r3, r3, r0
 8004d2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d2e:	bfac      	ite	ge
 8004d30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d32:	81a3      	strhlt	r3, [r4, #12]
 8004d34:	bd10      	pop	{r4, pc}

08004d36 <__swrite>:
 8004d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3a:	461f      	mov	r7, r3
 8004d3c:	898b      	ldrh	r3, [r1, #12]
 8004d3e:	05db      	lsls	r3, r3, #23
 8004d40:	4605      	mov	r5, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	4616      	mov	r6, r2
 8004d46:	d505      	bpl.n	8004d54 <__swrite+0x1e>
 8004d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f000 f85a 	bl	8004e08 <_lseek_r>
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d5e:	81a3      	strh	r3, [r4, #12]
 8004d60:	4632      	mov	r2, r6
 8004d62:	463b      	mov	r3, r7
 8004d64:	4628      	mov	r0, r5
 8004d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6a:	f000 b871 	b.w	8004e50 <_write_r>

08004d6e <__sseek>:
 8004d6e:	b510      	push	{r4, lr}
 8004d70:	460c      	mov	r4, r1
 8004d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d76:	f000 f847 	bl	8004e08 <_lseek_r>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	89a3      	ldrh	r3, [r4, #12]
 8004d7e:	bf15      	itete	ne
 8004d80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d8a:	81a3      	strheq	r3, [r4, #12]
 8004d8c:	bf18      	it	ne
 8004d8e:	81a3      	strhne	r3, [r4, #12]
 8004d90:	bd10      	pop	{r4, pc}

08004d92 <__sclose>:
 8004d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d96:	f000 b827 	b.w	8004de8 <_close_r>

08004d9a <memmove>:
 8004d9a:	4288      	cmp	r0, r1
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	eb01 0402 	add.w	r4, r1, r2
 8004da2:	d902      	bls.n	8004daa <memmove+0x10>
 8004da4:	4284      	cmp	r4, r0
 8004da6:	4623      	mov	r3, r4
 8004da8:	d807      	bhi.n	8004dba <memmove+0x20>
 8004daa:	1e43      	subs	r3, r0, #1
 8004dac:	42a1      	cmp	r1, r4
 8004dae:	d008      	beq.n	8004dc2 <memmove+0x28>
 8004db0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004db4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004db8:	e7f8      	b.n	8004dac <memmove+0x12>
 8004dba:	4402      	add	r2, r0
 8004dbc:	4601      	mov	r1, r0
 8004dbe:	428a      	cmp	r2, r1
 8004dc0:	d100      	bne.n	8004dc4 <memmove+0x2a>
 8004dc2:	bd10      	pop	{r4, pc}
 8004dc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dc8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dcc:	e7f7      	b.n	8004dbe <memmove+0x24>

08004dce <memset>:
 8004dce:	4402      	add	r2, r0
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d100      	bne.n	8004dd8 <memset+0xa>
 8004dd6:	4770      	bx	lr
 8004dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8004ddc:	e7f9      	b.n	8004dd2 <memset+0x4>
	...

08004de0 <_localeconv_r>:
 8004de0:	4800      	ldr	r0, [pc, #0]	@ (8004de4 <_localeconv_r+0x4>)
 8004de2:	4770      	bx	lr
 8004de4:	20000158 	.word	0x20000158

08004de8 <_close_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4d06      	ldr	r5, [pc, #24]	@ (8004e04 <_close_r+0x1c>)
 8004dec:	2300      	movs	r3, #0
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	f7fc fb1a 	bl	800142c <_close>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_close_r+0x1a>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_close_r+0x1a>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000578 	.word	0x20000578

08004e08 <_lseek_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	@ (8004e28 <_lseek_r+0x20>)
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	2200      	movs	r2, #0
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc fb2f 	bl	800147a <_lseek>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_lseek_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_lseek_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000578 	.word	0x20000578

08004e2c <_read_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d07      	ldr	r5, [pc, #28]	@ (8004e4c <_read_r+0x20>)
 8004e30:	4604      	mov	r4, r0
 8004e32:	4608      	mov	r0, r1
 8004e34:	4611      	mov	r1, r2
 8004e36:	2200      	movs	r2, #0
 8004e38:	602a      	str	r2, [r5, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f7fc fabd 	bl	80013ba <_read>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_read_r+0x1e>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_read_r+0x1e>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000578 	.word	0x20000578

08004e50 <_write_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4d07      	ldr	r5, [pc, #28]	@ (8004e70 <_write_r+0x20>)
 8004e54:	4604      	mov	r4, r0
 8004e56:	4608      	mov	r0, r1
 8004e58:	4611      	mov	r1, r2
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	602a      	str	r2, [r5, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f7fc fac8 	bl	80013f4 <_write>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_write_r+0x1e>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_write_r+0x1e>
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	20000578 	.word	0x20000578

08004e74 <__errno>:
 8004e74:	4b01      	ldr	r3, [pc, #4]	@ (8004e7c <__errno+0x8>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000018 	.word	0x20000018

08004e80 <__libc_init_array>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	4d0d      	ldr	r5, [pc, #52]	@ (8004eb8 <__libc_init_array+0x38>)
 8004e84:	4c0d      	ldr	r4, [pc, #52]	@ (8004ebc <__libc_init_array+0x3c>)
 8004e86:	1b64      	subs	r4, r4, r5
 8004e88:	10a4      	asrs	r4, r4, #2
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	42a6      	cmp	r6, r4
 8004e8e:	d109      	bne.n	8004ea4 <__libc_init_array+0x24>
 8004e90:	4d0b      	ldr	r5, [pc, #44]	@ (8004ec0 <__libc_init_array+0x40>)
 8004e92:	4c0c      	ldr	r4, [pc, #48]	@ (8004ec4 <__libc_init_array+0x44>)
 8004e94:	f001 febc 	bl	8006c10 <_init>
 8004e98:	1b64      	subs	r4, r4, r5
 8004e9a:	10a4      	asrs	r4, r4, #2
 8004e9c:	2600      	movs	r6, #0
 8004e9e:	42a6      	cmp	r6, r4
 8004ea0:	d105      	bne.n	8004eae <__libc_init_array+0x2e>
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea8:	4798      	blx	r3
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7ee      	b.n	8004e8c <__libc_init_array+0xc>
 8004eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb2:	4798      	blx	r3
 8004eb4:	3601      	adds	r6, #1
 8004eb6:	e7f2      	b.n	8004e9e <__libc_init_array+0x1e>
 8004eb8:	08006fe8 	.word	0x08006fe8
 8004ebc:	08006fe8 	.word	0x08006fe8
 8004ec0:	08006fe8 	.word	0x08006fe8
 8004ec4:	08006fec 	.word	0x08006fec

08004ec8 <__retarget_lock_init_recursive>:
 8004ec8:	4770      	bx	lr

08004eca <__retarget_lock_acquire_recursive>:
 8004eca:	4770      	bx	lr

08004ecc <__retarget_lock_release_recursive>:
 8004ecc:	4770      	bx	lr

08004ece <quorem>:
 8004ece:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed2:	6903      	ldr	r3, [r0, #16]
 8004ed4:	690c      	ldr	r4, [r1, #16]
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	4607      	mov	r7, r0
 8004eda:	db7e      	blt.n	8004fda <quorem+0x10c>
 8004edc:	3c01      	subs	r4, #1
 8004ede:	f101 0814 	add.w	r8, r1, #20
 8004ee2:	00a3      	lsls	r3, r4, #2
 8004ee4:	f100 0514 	add.w	r5, r0, #20
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	429a      	cmp	r2, r3
 8004efc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f00:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f04:	d32e      	bcc.n	8004f64 <quorem+0x96>
 8004f06:	f04f 0a00 	mov.w	sl, #0
 8004f0a:	46c4      	mov	ip, r8
 8004f0c:	46ae      	mov	lr, r5
 8004f0e:	46d3      	mov	fp, sl
 8004f10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f14:	b298      	uxth	r0, r3
 8004f16:	fb06 a000 	mla	r0, r6, r0, sl
 8004f1a:	0c02      	lsrs	r2, r0, #16
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	fb06 2303 	mla	r3, r6, r3, r2
 8004f22:	f8de 2000 	ldr.w	r2, [lr]
 8004f26:	b280      	uxth	r0, r0
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	1a12      	subs	r2, r2, r0
 8004f2c:	445a      	add	r2, fp
 8004f2e:	f8de 0000 	ldr.w	r0, [lr]
 8004f32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f40:	b292      	uxth	r2, r2
 8004f42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f46:	45e1      	cmp	r9, ip
 8004f48:	f84e 2b04 	str.w	r2, [lr], #4
 8004f4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f50:	d2de      	bcs.n	8004f10 <quorem+0x42>
 8004f52:	9b00      	ldr	r3, [sp, #0]
 8004f54:	58eb      	ldr	r3, [r5, r3]
 8004f56:	b92b      	cbnz	r3, 8004f64 <quorem+0x96>
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	3b04      	subs	r3, #4
 8004f5c:	429d      	cmp	r5, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	d32f      	bcc.n	8004fc2 <quorem+0xf4>
 8004f62:	613c      	str	r4, [r7, #16]
 8004f64:	4638      	mov	r0, r7
 8004f66:	f001 f979 	bl	800625c <__mcmp>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	db25      	blt.n	8004fba <quorem+0xec>
 8004f6e:	4629      	mov	r1, r5
 8004f70:	2000      	movs	r0, #0
 8004f72:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f76:	f8d1 c000 	ldr.w	ip, [r1]
 8004f7a:	fa1f fe82 	uxth.w	lr, r2
 8004f7e:	fa1f f38c 	uxth.w	r3, ip
 8004f82:	eba3 030e 	sub.w	r3, r3, lr
 8004f86:	4403      	add	r3, r0
 8004f88:	0c12      	lsrs	r2, r2, #16
 8004f8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f98:	45c1      	cmp	r9, r8
 8004f9a:	f841 3b04 	str.w	r3, [r1], #4
 8004f9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004fa2:	d2e6      	bcs.n	8004f72 <quorem+0xa4>
 8004fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fac:	b922      	cbnz	r2, 8004fb8 <quorem+0xea>
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	429d      	cmp	r5, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	d30b      	bcc.n	8004fce <quorem+0x100>
 8004fb6:	613c      	str	r4, [r7, #16]
 8004fb8:	3601      	adds	r6, #1
 8004fba:	4630      	mov	r0, r6
 8004fbc:	b003      	add	sp, #12
 8004fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	3b04      	subs	r3, #4
 8004fc6:	2a00      	cmp	r2, #0
 8004fc8:	d1cb      	bne.n	8004f62 <quorem+0x94>
 8004fca:	3c01      	subs	r4, #1
 8004fcc:	e7c6      	b.n	8004f5c <quorem+0x8e>
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	3b04      	subs	r3, #4
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	d1ef      	bne.n	8004fb6 <quorem+0xe8>
 8004fd6:	3c01      	subs	r4, #1
 8004fd8:	e7ea      	b.n	8004fb0 <quorem+0xe2>
 8004fda:	2000      	movs	r0, #0
 8004fdc:	e7ee      	b.n	8004fbc <quorem+0xee>
	...

08004fe0 <_dtoa_r>:
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	69c7      	ldr	r7, [r0, #28]
 8004fe6:	b099      	sub	sp, #100	@ 0x64
 8004fe8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004fec:	ec55 4b10 	vmov	r4, r5, d0
 8004ff0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004ff2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ff4:	4683      	mov	fp, r0
 8004ff6:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ff8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004ffa:	b97f      	cbnz	r7, 800501c <_dtoa_r+0x3c>
 8004ffc:	2010      	movs	r0, #16
 8004ffe:	f000 fdfd 	bl	8005bfc <malloc>
 8005002:	4602      	mov	r2, r0
 8005004:	f8cb 001c 	str.w	r0, [fp, #28]
 8005008:	b920      	cbnz	r0, 8005014 <_dtoa_r+0x34>
 800500a:	4ba7      	ldr	r3, [pc, #668]	@ (80052a8 <_dtoa_r+0x2c8>)
 800500c:	21ef      	movs	r1, #239	@ 0xef
 800500e:	48a7      	ldr	r0, [pc, #668]	@ (80052ac <_dtoa_r+0x2cc>)
 8005010:	f001 faf6 	bl	8006600 <__assert_func>
 8005014:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005018:	6007      	str	r7, [r0, #0]
 800501a:	60c7      	str	r7, [r0, #12]
 800501c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	b159      	cbz	r1, 800503c <_dtoa_r+0x5c>
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	604a      	str	r2, [r1, #4]
 8005028:	2301      	movs	r3, #1
 800502a:	4093      	lsls	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
 800502e:	4658      	mov	r0, fp
 8005030:	f000 feda 	bl	8005de8 <_Bfree>
 8005034:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	1e2b      	subs	r3, r5, #0
 800503e:	bfb9      	ittee	lt
 8005040:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005044:	9303      	strlt	r3, [sp, #12]
 8005046:	2300      	movge	r3, #0
 8005048:	6033      	strge	r3, [r6, #0]
 800504a:	9f03      	ldr	r7, [sp, #12]
 800504c:	4b98      	ldr	r3, [pc, #608]	@ (80052b0 <_dtoa_r+0x2d0>)
 800504e:	bfbc      	itt	lt
 8005050:	2201      	movlt	r2, #1
 8005052:	6032      	strlt	r2, [r6, #0]
 8005054:	43bb      	bics	r3, r7
 8005056:	d112      	bne.n	800507e <_dtoa_r+0x9e>
 8005058:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800505a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005064:	4323      	orrs	r3, r4
 8005066:	f000 854d 	beq.w	8005b04 <_dtoa_r+0xb24>
 800506a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800506c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80052c4 <_dtoa_r+0x2e4>
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 854f 	beq.w	8005b14 <_dtoa_r+0xb34>
 8005076:	f10a 0303 	add.w	r3, sl, #3
 800507a:	f000 bd49 	b.w	8005b10 <_dtoa_r+0xb30>
 800507e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	ec51 0b17 	vmov	r0, r1, d7
 8005088:	2300      	movs	r3, #0
 800508a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800508e:	f7fb fd33 	bl	8000af8 <__aeabi_dcmpeq>
 8005092:	4680      	mov	r8, r0
 8005094:	b158      	cbz	r0, 80050ae <_dtoa_r+0xce>
 8005096:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005098:	2301      	movs	r3, #1
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800509e:	b113      	cbz	r3, 80050a6 <_dtoa_r+0xc6>
 80050a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80050a2:	4b84      	ldr	r3, [pc, #528]	@ (80052b4 <_dtoa_r+0x2d4>)
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80052c8 <_dtoa_r+0x2e8>
 80050aa:	f000 bd33 	b.w	8005b14 <_dtoa_r+0xb34>
 80050ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80050b2:	aa16      	add	r2, sp, #88	@ 0x58
 80050b4:	a917      	add	r1, sp, #92	@ 0x5c
 80050b6:	4658      	mov	r0, fp
 80050b8:	f001 f980 	bl	80063bc <__d2b>
 80050bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80050c0:	4681      	mov	r9, r0
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	d077      	beq.n	80051b6 <_dtoa_r+0x1d6>
 80050c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80050cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80050d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80050e0:	4619      	mov	r1, r3
 80050e2:	2200      	movs	r2, #0
 80050e4:	4b74      	ldr	r3, [pc, #464]	@ (80052b8 <_dtoa_r+0x2d8>)
 80050e6:	f7fb f8e7 	bl	80002b8 <__aeabi_dsub>
 80050ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005290 <_dtoa_r+0x2b0>)
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f7fb fa9a 	bl	8000628 <__aeabi_dmul>
 80050f4:	a368      	add	r3, pc, #416	@ (adr r3, 8005298 <_dtoa_r+0x2b8>)
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f7fb f8df 	bl	80002bc <__adddf3>
 80050fe:	4604      	mov	r4, r0
 8005100:	4630      	mov	r0, r6
 8005102:	460d      	mov	r5, r1
 8005104:	f7fb fa26 	bl	8000554 <__aeabi_i2d>
 8005108:	a365      	add	r3, pc, #404	@ (adr r3, 80052a0 <_dtoa_r+0x2c0>)
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f7fb fa8b 	bl	8000628 <__aeabi_dmul>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb f8cf 	bl	80002bc <__adddf3>
 800511e:	4604      	mov	r4, r0
 8005120:	460d      	mov	r5, r1
 8005122:	f7fb fd31 	bl	8000b88 <__aeabi_d2iz>
 8005126:	2200      	movs	r2, #0
 8005128:	4607      	mov	r7, r0
 800512a:	2300      	movs	r3, #0
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb fcec 	bl	8000b0c <__aeabi_dcmplt>
 8005134:	b140      	cbz	r0, 8005148 <_dtoa_r+0x168>
 8005136:	4638      	mov	r0, r7
 8005138:	f7fb fa0c 	bl	8000554 <__aeabi_i2d>
 800513c:	4622      	mov	r2, r4
 800513e:	462b      	mov	r3, r5
 8005140:	f7fb fcda 	bl	8000af8 <__aeabi_dcmpeq>
 8005144:	b900      	cbnz	r0, 8005148 <_dtoa_r+0x168>
 8005146:	3f01      	subs	r7, #1
 8005148:	2f16      	cmp	r7, #22
 800514a:	d851      	bhi.n	80051f0 <_dtoa_r+0x210>
 800514c:	4b5b      	ldr	r3, [pc, #364]	@ (80052bc <_dtoa_r+0x2dc>)
 800514e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800515a:	f7fb fcd7 	bl	8000b0c <__aeabi_dcmplt>
 800515e:	2800      	cmp	r0, #0
 8005160:	d048      	beq.n	80051f4 <_dtoa_r+0x214>
 8005162:	3f01      	subs	r7, #1
 8005164:	2300      	movs	r3, #0
 8005166:	9312      	str	r3, [sp, #72]	@ 0x48
 8005168:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800516a:	1b9b      	subs	r3, r3, r6
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	bf44      	itt	mi
 8005170:	f1c3 0801 	rsbmi	r8, r3, #1
 8005174:	2300      	movmi	r3, #0
 8005176:	9208      	str	r2, [sp, #32]
 8005178:	bf54      	ite	pl
 800517a:	f04f 0800 	movpl.w	r8, #0
 800517e:	9308      	strmi	r3, [sp, #32]
 8005180:	2f00      	cmp	r7, #0
 8005182:	db39      	blt.n	80051f8 <_dtoa_r+0x218>
 8005184:	9b08      	ldr	r3, [sp, #32]
 8005186:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005188:	443b      	add	r3, r7
 800518a:	9308      	str	r3, [sp, #32]
 800518c:	2300      	movs	r3, #0
 800518e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005192:	2b09      	cmp	r3, #9
 8005194:	d864      	bhi.n	8005260 <_dtoa_r+0x280>
 8005196:	2b05      	cmp	r3, #5
 8005198:	bfc4      	itt	gt
 800519a:	3b04      	subgt	r3, #4
 800519c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800519e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a0:	f1a3 0302 	sub.w	r3, r3, #2
 80051a4:	bfcc      	ite	gt
 80051a6:	2400      	movgt	r4, #0
 80051a8:	2401      	movle	r4, #1
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d863      	bhi.n	8005276 <_dtoa_r+0x296>
 80051ae:	e8df f003 	tbb	[pc, r3]
 80051b2:	372a      	.short	0x372a
 80051b4:	5535      	.short	0x5535
 80051b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80051ba:	441e      	add	r6, r3
 80051bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	bfc1      	itttt	gt
 80051c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051c8:	409f      	lslgt	r7, r3
 80051ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80051ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80051d2:	bfd6      	itet	le
 80051d4:	f1c3 0320 	rsble	r3, r3, #32
 80051d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80051dc:	fa04 f003 	lslle.w	r0, r4, r3
 80051e0:	f7fb f9a8 	bl	8000534 <__aeabi_ui2d>
 80051e4:	2201      	movs	r2, #1
 80051e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051ea:	3e01      	subs	r6, #1
 80051ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80051ee:	e777      	b.n	80050e0 <_dtoa_r+0x100>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e7b8      	b.n	8005166 <_dtoa_r+0x186>
 80051f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80051f6:	e7b7      	b.n	8005168 <_dtoa_r+0x188>
 80051f8:	427b      	negs	r3, r7
 80051fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80051fc:	2300      	movs	r3, #0
 80051fe:	eba8 0807 	sub.w	r8, r8, r7
 8005202:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005204:	e7c4      	b.n	8005190 <_dtoa_r+0x1b0>
 8005206:	2300      	movs	r3, #0
 8005208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800520a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	dc35      	bgt.n	800527c <_dtoa_r+0x29c>
 8005210:	2301      	movs	r3, #1
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	9307      	str	r3, [sp, #28]
 8005216:	461a      	mov	r2, r3
 8005218:	920e      	str	r2, [sp, #56]	@ 0x38
 800521a:	e00b      	b.n	8005234 <_dtoa_r+0x254>
 800521c:	2301      	movs	r3, #1
 800521e:	e7f3      	b.n	8005208 <_dtoa_r+0x228>
 8005220:	2300      	movs	r3, #0
 8005222:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	9307      	str	r3, [sp, #28]
 8005230:	bfb8      	it	lt
 8005232:	2301      	movlt	r3, #1
 8005234:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005238:	2100      	movs	r1, #0
 800523a:	2204      	movs	r2, #4
 800523c:	f102 0514 	add.w	r5, r2, #20
 8005240:	429d      	cmp	r5, r3
 8005242:	d91f      	bls.n	8005284 <_dtoa_r+0x2a4>
 8005244:	6041      	str	r1, [r0, #4]
 8005246:	4658      	mov	r0, fp
 8005248:	f000 fd8e 	bl	8005d68 <_Balloc>
 800524c:	4682      	mov	sl, r0
 800524e:	2800      	cmp	r0, #0
 8005250:	d13c      	bne.n	80052cc <_dtoa_r+0x2ec>
 8005252:	4b1b      	ldr	r3, [pc, #108]	@ (80052c0 <_dtoa_r+0x2e0>)
 8005254:	4602      	mov	r2, r0
 8005256:	f240 11af 	movw	r1, #431	@ 0x1af
 800525a:	e6d8      	b.n	800500e <_dtoa_r+0x2e>
 800525c:	2301      	movs	r3, #1
 800525e:	e7e0      	b.n	8005222 <_dtoa_r+0x242>
 8005260:	2401      	movs	r4, #1
 8005262:	2300      	movs	r3, #0
 8005264:	9309      	str	r3, [sp, #36]	@ 0x24
 8005266:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005268:	f04f 33ff 	mov.w	r3, #4294967295
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	9307      	str	r3, [sp, #28]
 8005270:	2200      	movs	r2, #0
 8005272:	2312      	movs	r3, #18
 8005274:	e7d0      	b.n	8005218 <_dtoa_r+0x238>
 8005276:	2301      	movs	r3, #1
 8005278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800527a:	e7f5      	b.n	8005268 <_dtoa_r+0x288>
 800527c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	9307      	str	r3, [sp, #28]
 8005282:	e7d7      	b.n	8005234 <_dtoa_r+0x254>
 8005284:	3101      	adds	r1, #1
 8005286:	0052      	lsls	r2, r2, #1
 8005288:	e7d8      	b.n	800523c <_dtoa_r+0x25c>
 800528a:	bf00      	nop
 800528c:	f3af 8000 	nop.w
 8005290:	636f4361 	.word	0x636f4361
 8005294:	3fd287a7 	.word	0x3fd287a7
 8005298:	8b60c8b3 	.word	0x8b60c8b3
 800529c:	3fc68a28 	.word	0x3fc68a28
 80052a0:	509f79fb 	.word	0x509f79fb
 80052a4:	3fd34413 	.word	0x3fd34413
 80052a8:	08006cb1 	.word	0x08006cb1
 80052ac:	08006cc8 	.word	0x08006cc8
 80052b0:	7ff00000 	.word	0x7ff00000
 80052b4:	08006c81 	.word	0x08006c81
 80052b8:	3ff80000 	.word	0x3ff80000
 80052bc:	08006dc0 	.word	0x08006dc0
 80052c0:	08006d20 	.word	0x08006d20
 80052c4:	08006cad 	.word	0x08006cad
 80052c8:	08006c80 	.word	0x08006c80
 80052cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052d0:	6018      	str	r0, [r3, #0]
 80052d2:	9b07      	ldr	r3, [sp, #28]
 80052d4:	2b0e      	cmp	r3, #14
 80052d6:	f200 80a4 	bhi.w	8005422 <_dtoa_r+0x442>
 80052da:	2c00      	cmp	r4, #0
 80052dc:	f000 80a1 	beq.w	8005422 <_dtoa_r+0x442>
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	dd33      	ble.n	800534c <_dtoa_r+0x36c>
 80052e4:	4bad      	ldr	r3, [pc, #692]	@ (800559c <_dtoa_r+0x5bc>)
 80052e6:	f007 020f 	and.w	r2, r7, #15
 80052ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052ee:	ed93 7b00 	vldr	d7, [r3]
 80052f2:	05f8      	lsls	r0, r7, #23
 80052f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80052f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052fc:	d516      	bpl.n	800532c <_dtoa_r+0x34c>
 80052fe:	4ba8      	ldr	r3, [pc, #672]	@ (80055a0 <_dtoa_r+0x5c0>)
 8005300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005308:	f7fb fab8 	bl	800087c <__aeabi_ddiv>
 800530c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005310:	f004 040f 	and.w	r4, r4, #15
 8005314:	2603      	movs	r6, #3
 8005316:	4da2      	ldr	r5, [pc, #648]	@ (80055a0 <_dtoa_r+0x5c0>)
 8005318:	b954      	cbnz	r4, 8005330 <_dtoa_r+0x350>
 800531a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800531e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005322:	f7fb faab 	bl	800087c <__aeabi_ddiv>
 8005326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800532a:	e028      	b.n	800537e <_dtoa_r+0x39e>
 800532c:	2602      	movs	r6, #2
 800532e:	e7f2      	b.n	8005316 <_dtoa_r+0x336>
 8005330:	07e1      	lsls	r1, r4, #31
 8005332:	d508      	bpl.n	8005346 <_dtoa_r+0x366>
 8005334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800533c:	f7fb f974 	bl	8000628 <__aeabi_dmul>
 8005340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005344:	3601      	adds	r6, #1
 8005346:	1064      	asrs	r4, r4, #1
 8005348:	3508      	adds	r5, #8
 800534a:	e7e5      	b.n	8005318 <_dtoa_r+0x338>
 800534c:	f000 80d2 	beq.w	80054f4 <_dtoa_r+0x514>
 8005350:	427c      	negs	r4, r7
 8005352:	4b92      	ldr	r3, [pc, #584]	@ (800559c <_dtoa_r+0x5bc>)
 8005354:	4d92      	ldr	r5, [pc, #584]	@ (80055a0 <_dtoa_r+0x5c0>)
 8005356:	f004 020f 	and.w	r2, r4, #15
 800535a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005366:	f7fb f95f 	bl	8000628 <__aeabi_dmul>
 800536a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800536e:	1124      	asrs	r4, r4, #4
 8005370:	2300      	movs	r3, #0
 8005372:	2602      	movs	r6, #2
 8005374:	2c00      	cmp	r4, #0
 8005376:	f040 80b2 	bne.w	80054de <_dtoa_r+0x4fe>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1d3      	bne.n	8005326 <_dtoa_r+0x346>
 800537e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005380:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80b7 	beq.w	80054f8 <_dtoa_r+0x518>
 800538a:	4b86      	ldr	r3, [pc, #536]	@ (80055a4 <_dtoa_r+0x5c4>)
 800538c:	2200      	movs	r2, #0
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fb fbbb 	bl	8000b0c <__aeabi_dcmplt>
 8005396:	2800      	cmp	r0, #0
 8005398:	f000 80ae 	beq.w	80054f8 <_dtoa_r+0x518>
 800539c:	9b07      	ldr	r3, [sp, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80aa 	beq.w	80054f8 <_dtoa_r+0x518>
 80053a4:	9b00      	ldr	r3, [sp, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dd37      	ble.n	800541a <_dtoa_r+0x43a>
 80053aa:	1e7b      	subs	r3, r7, #1
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	4620      	mov	r0, r4
 80053b0:	4b7d      	ldr	r3, [pc, #500]	@ (80055a8 <_dtoa_r+0x5c8>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	4629      	mov	r1, r5
 80053b6:	f7fb f937 	bl	8000628 <__aeabi_dmul>
 80053ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053be:	9c00      	ldr	r4, [sp, #0]
 80053c0:	3601      	adds	r6, #1
 80053c2:	4630      	mov	r0, r6
 80053c4:	f7fb f8c6 	bl	8000554 <__aeabi_i2d>
 80053c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053cc:	f7fb f92c 	bl	8000628 <__aeabi_dmul>
 80053d0:	4b76      	ldr	r3, [pc, #472]	@ (80055ac <_dtoa_r+0x5cc>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	f7fa ff72 	bl	80002bc <__adddf3>
 80053d8:	4605      	mov	r5, r0
 80053da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80053de:	2c00      	cmp	r4, #0
 80053e0:	f040 808d 	bne.w	80054fe <_dtoa_r+0x51e>
 80053e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e8:	4b71      	ldr	r3, [pc, #452]	@ (80055b0 <_dtoa_r+0x5d0>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	f7fa ff64 	bl	80002b8 <__aeabi_dsub>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053f8:	462a      	mov	r2, r5
 80053fa:	4633      	mov	r3, r6
 80053fc:	f7fb fba4 	bl	8000b48 <__aeabi_dcmpgt>
 8005400:	2800      	cmp	r0, #0
 8005402:	f040 828b 	bne.w	800591c <_dtoa_r+0x93c>
 8005406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800540a:	462a      	mov	r2, r5
 800540c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005410:	f7fb fb7c 	bl	8000b0c <__aeabi_dcmplt>
 8005414:	2800      	cmp	r0, #0
 8005416:	f040 8128 	bne.w	800566a <_dtoa_r+0x68a>
 800541a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800541e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005422:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005424:	2b00      	cmp	r3, #0
 8005426:	f2c0 815a 	blt.w	80056de <_dtoa_r+0x6fe>
 800542a:	2f0e      	cmp	r7, #14
 800542c:	f300 8157 	bgt.w	80056de <_dtoa_r+0x6fe>
 8005430:	4b5a      	ldr	r3, [pc, #360]	@ (800559c <_dtoa_r+0x5bc>)
 8005432:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005436:	ed93 7b00 	vldr	d7, [r3]
 800543a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800543c:	2b00      	cmp	r3, #0
 800543e:	ed8d 7b00 	vstr	d7, [sp]
 8005442:	da03      	bge.n	800544c <_dtoa_r+0x46c>
 8005444:	9b07      	ldr	r3, [sp, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f340 8101 	ble.w	800564e <_dtoa_r+0x66e>
 800544c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005450:	4656      	mov	r6, sl
 8005452:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	f7fb fa0f 	bl	800087c <__aeabi_ddiv>
 800545e:	f7fb fb93 	bl	8000b88 <__aeabi_d2iz>
 8005462:	4680      	mov	r8, r0
 8005464:	f7fb f876 	bl	8000554 <__aeabi_i2d>
 8005468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800546c:	f7fb f8dc 	bl	8000628 <__aeabi_dmul>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4620      	mov	r0, r4
 8005476:	4629      	mov	r1, r5
 8005478:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800547c:	f7fa ff1c 	bl	80002b8 <__aeabi_dsub>
 8005480:	f806 4b01 	strb.w	r4, [r6], #1
 8005484:	9d07      	ldr	r5, [sp, #28]
 8005486:	eba6 040a 	sub.w	r4, r6, sl
 800548a:	42a5      	cmp	r5, r4
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	f040 8117 	bne.w	80056c2 <_dtoa_r+0x6e2>
 8005494:	f7fa ff12 	bl	80002bc <__adddf3>
 8005498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800549c:	4604      	mov	r4, r0
 800549e:	460d      	mov	r5, r1
 80054a0:	f7fb fb52 	bl	8000b48 <__aeabi_dcmpgt>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f040 80f9 	bne.w	800569c <_dtoa_r+0x6bc>
 80054aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7fb fb21 	bl	8000af8 <__aeabi_dcmpeq>
 80054b6:	b118      	cbz	r0, 80054c0 <_dtoa_r+0x4e0>
 80054b8:	f018 0f01 	tst.w	r8, #1
 80054bc:	f040 80ee 	bne.w	800569c <_dtoa_r+0x6bc>
 80054c0:	4649      	mov	r1, r9
 80054c2:	4658      	mov	r0, fp
 80054c4:	f000 fc90 	bl	8005de8 <_Bfree>
 80054c8:	2300      	movs	r3, #0
 80054ca:	7033      	strb	r3, [r6, #0]
 80054cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80054ce:	3701      	adds	r7, #1
 80054d0:	601f      	str	r7, [r3, #0]
 80054d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 831d 	beq.w	8005b14 <_dtoa_r+0xb34>
 80054da:	601e      	str	r6, [r3, #0]
 80054dc:	e31a      	b.n	8005b14 <_dtoa_r+0xb34>
 80054de:	07e2      	lsls	r2, r4, #31
 80054e0:	d505      	bpl.n	80054ee <_dtoa_r+0x50e>
 80054e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054e6:	f7fb f89f 	bl	8000628 <__aeabi_dmul>
 80054ea:	3601      	adds	r6, #1
 80054ec:	2301      	movs	r3, #1
 80054ee:	1064      	asrs	r4, r4, #1
 80054f0:	3508      	adds	r5, #8
 80054f2:	e73f      	b.n	8005374 <_dtoa_r+0x394>
 80054f4:	2602      	movs	r6, #2
 80054f6:	e742      	b.n	800537e <_dtoa_r+0x39e>
 80054f8:	9c07      	ldr	r4, [sp, #28]
 80054fa:	9704      	str	r7, [sp, #16]
 80054fc:	e761      	b.n	80053c2 <_dtoa_r+0x3e2>
 80054fe:	4b27      	ldr	r3, [pc, #156]	@ (800559c <_dtoa_r+0x5bc>)
 8005500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005506:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800550a:	4454      	add	r4, sl
 800550c:	2900      	cmp	r1, #0
 800550e:	d053      	beq.n	80055b8 <_dtoa_r+0x5d8>
 8005510:	4928      	ldr	r1, [pc, #160]	@ (80055b4 <_dtoa_r+0x5d4>)
 8005512:	2000      	movs	r0, #0
 8005514:	f7fb f9b2 	bl	800087c <__aeabi_ddiv>
 8005518:	4633      	mov	r3, r6
 800551a:	462a      	mov	r2, r5
 800551c:	f7fa fecc 	bl	80002b8 <__aeabi_dsub>
 8005520:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005524:	4656      	mov	r6, sl
 8005526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800552a:	f7fb fb2d 	bl	8000b88 <__aeabi_d2iz>
 800552e:	4605      	mov	r5, r0
 8005530:	f7fb f810 	bl	8000554 <__aeabi_i2d>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800553c:	f7fa febc 	bl	80002b8 <__aeabi_dsub>
 8005540:	3530      	adds	r5, #48	@ 0x30
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800554a:	f806 5b01 	strb.w	r5, [r6], #1
 800554e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005552:	f7fb fadb 	bl	8000b0c <__aeabi_dcmplt>
 8005556:	2800      	cmp	r0, #0
 8005558:	d171      	bne.n	800563e <_dtoa_r+0x65e>
 800555a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800555e:	4911      	ldr	r1, [pc, #68]	@ (80055a4 <_dtoa_r+0x5c4>)
 8005560:	2000      	movs	r0, #0
 8005562:	f7fa fea9 	bl	80002b8 <__aeabi_dsub>
 8005566:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800556a:	f7fb facf 	bl	8000b0c <__aeabi_dcmplt>
 800556e:	2800      	cmp	r0, #0
 8005570:	f040 8095 	bne.w	800569e <_dtoa_r+0x6be>
 8005574:	42a6      	cmp	r6, r4
 8005576:	f43f af50 	beq.w	800541a <_dtoa_r+0x43a>
 800557a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800557e:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <_dtoa_r+0x5c8>)
 8005580:	2200      	movs	r2, #0
 8005582:	f7fb f851 	bl	8000628 <__aeabi_dmul>
 8005586:	4b08      	ldr	r3, [pc, #32]	@ (80055a8 <_dtoa_r+0x5c8>)
 8005588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800558c:	2200      	movs	r2, #0
 800558e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005592:	f7fb f849 	bl	8000628 <__aeabi_dmul>
 8005596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800559a:	e7c4      	b.n	8005526 <_dtoa_r+0x546>
 800559c:	08006dc0 	.word	0x08006dc0
 80055a0:	08006d98 	.word	0x08006d98
 80055a4:	3ff00000 	.word	0x3ff00000
 80055a8:	40240000 	.word	0x40240000
 80055ac:	401c0000 	.word	0x401c0000
 80055b0:	40140000 	.word	0x40140000
 80055b4:	3fe00000 	.word	0x3fe00000
 80055b8:	4631      	mov	r1, r6
 80055ba:	4628      	mov	r0, r5
 80055bc:	f7fb f834 	bl	8000628 <__aeabi_dmul>
 80055c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80055c6:	4656      	mov	r6, sl
 80055c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055cc:	f7fb fadc 	bl	8000b88 <__aeabi_d2iz>
 80055d0:	4605      	mov	r5, r0
 80055d2:	f7fa ffbf 	bl	8000554 <__aeabi_i2d>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055de:	f7fa fe6b 	bl	80002b8 <__aeabi_dsub>
 80055e2:	3530      	adds	r5, #48	@ 0x30
 80055e4:	f806 5b01 	strb.w	r5, [r6], #1
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	42a6      	cmp	r6, r4
 80055ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	d124      	bne.n	8005642 <_dtoa_r+0x662>
 80055f8:	4bac      	ldr	r3, [pc, #688]	@ (80058ac <_dtoa_r+0x8cc>)
 80055fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055fe:	f7fa fe5d 	bl	80002bc <__adddf3>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800560a:	f7fb fa9d 	bl	8000b48 <__aeabi_dcmpgt>
 800560e:	2800      	cmp	r0, #0
 8005610:	d145      	bne.n	800569e <_dtoa_r+0x6be>
 8005612:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005616:	49a5      	ldr	r1, [pc, #660]	@ (80058ac <_dtoa_r+0x8cc>)
 8005618:	2000      	movs	r0, #0
 800561a:	f7fa fe4d 	bl	80002b8 <__aeabi_dsub>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005626:	f7fb fa71 	bl	8000b0c <__aeabi_dcmplt>
 800562a:	2800      	cmp	r0, #0
 800562c:	f43f aef5 	beq.w	800541a <_dtoa_r+0x43a>
 8005630:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005632:	1e73      	subs	r3, r6, #1
 8005634:	9315      	str	r3, [sp, #84]	@ 0x54
 8005636:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800563a:	2b30      	cmp	r3, #48	@ 0x30
 800563c:	d0f8      	beq.n	8005630 <_dtoa_r+0x650>
 800563e:	9f04      	ldr	r7, [sp, #16]
 8005640:	e73e      	b.n	80054c0 <_dtoa_r+0x4e0>
 8005642:	4b9b      	ldr	r3, [pc, #620]	@ (80058b0 <_dtoa_r+0x8d0>)
 8005644:	f7fa fff0 	bl	8000628 <__aeabi_dmul>
 8005648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800564c:	e7bc      	b.n	80055c8 <_dtoa_r+0x5e8>
 800564e:	d10c      	bne.n	800566a <_dtoa_r+0x68a>
 8005650:	4b98      	ldr	r3, [pc, #608]	@ (80058b4 <_dtoa_r+0x8d4>)
 8005652:	2200      	movs	r2, #0
 8005654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005658:	f7fa ffe6 	bl	8000628 <__aeabi_dmul>
 800565c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005660:	f7fb fa68 	bl	8000b34 <__aeabi_dcmpge>
 8005664:	2800      	cmp	r0, #0
 8005666:	f000 8157 	beq.w	8005918 <_dtoa_r+0x938>
 800566a:	2400      	movs	r4, #0
 800566c:	4625      	mov	r5, r4
 800566e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005670:	43db      	mvns	r3, r3
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	4656      	mov	r6, sl
 8005676:	2700      	movs	r7, #0
 8005678:	4621      	mov	r1, r4
 800567a:	4658      	mov	r0, fp
 800567c:	f000 fbb4 	bl	8005de8 <_Bfree>
 8005680:	2d00      	cmp	r5, #0
 8005682:	d0dc      	beq.n	800563e <_dtoa_r+0x65e>
 8005684:	b12f      	cbz	r7, 8005692 <_dtoa_r+0x6b2>
 8005686:	42af      	cmp	r7, r5
 8005688:	d003      	beq.n	8005692 <_dtoa_r+0x6b2>
 800568a:	4639      	mov	r1, r7
 800568c:	4658      	mov	r0, fp
 800568e:	f000 fbab 	bl	8005de8 <_Bfree>
 8005692:	4629      	mov	r1, r5
 8005694:	4658      	mov	r0, fp
 8005696:	f000 fba7 	bl	8005de8 <_Bfree>
 800569a:	e7d0      	b.n	800563e <_dtoa_r+0x65e>
 800569c:	9704      	str	r7, [sp, #16]
 800569e:	4633      	mov	r3, r6
 80056a0:	461e      	mov	r6, r3
 80056a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a6:	2a39      	cmp	r2, #57	@ 0x39
 80056a8:	d107      	bne.n	80056ba <_dtoa_r+0x6da>
 80056aa:	459a      	cmp	sl, r3
 80056ac:	d1f8      	bne.n	80056a0 <_dtoa_r+0x6c0>
 80056ae:	9a04      	ldr	r2, [sp, #16]
 80056b0:	3201      	adds	r2, #1
 80056b2:	9204      	str	r2, [sp, #16]
 80056b4:	2230      	movs	r2, #48	@ 0x30
 80056b6:	f88a 2000 	strb.w	r2, [sl]
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	3201      	adds	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e7bd      	b.n	800563e <_dtoa_r+0x65e>
 80056c2:	4b7b      	ldr	r3, [pc, #492]	@ (80058b0 <_dtoa_r+0x8d0>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	f7fa ffaf 	bl	8000628 <__aeabi_dmul>
 80056ca:	2200      	movs	r2, #0
 80056cc:	2300      	movs	r3, #0
 80056ce:	4604      	mov	r4, r0
 80056d0:	460d      	mov	r5, r1
 80056d2:	f7fb fa11 	bl	8000af8 <__aeabi_dcmpeq>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f43f aebb 	beq.w	8005452 <_dtoa_r+0x472>
 80056dc:	e6f0      	b.n	80054c0 <_dtoa_r+0x4e0>
 80056de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	f000 80db 	beq.w	800589c <_dtoa_r+0x8bc>
 80056e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056e8:	2a01      	cmp	r2, #1
 80056ea:	f300 80bf 	bgt.w	800586c <_dtoa_r+0x88c>
 80056ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80056f0:	2a00      	cmp	r2, #0
 80056f2:	f000 80b7 	beq.w	8005864 <_dtoa_r+0x884>
 80056f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056fc:	4646      	mov	r6, r8
 80056fe:	9a08      	ldr	r2, [sp, #32]
 8005700:	2101      	movs	r1, #1
 8005702:	441a      	add	r2, r3
 8005704:	4658      	mov	r0, fp
 8005706:	4498      	add	r8, r3
 8005708:	9208      	str	r2, [sp, #32]
 800570a:	f000 fc21 	bl	8005f50 <__i2b>
 800570e:	4605      	mov	r5, r0
 8005710:	b15e      	cbz	r6, 800572a <_dtoa_r+0x74a>
 8005712:	9b08      	ldr	r3, [sp, #32]
 8005714:	2b00      	cmp	r3, #0
 8005716:	dd08      	ble.n	800572a <_dtoa_r+0x74a>
 8005718:	42b3      	cmp	r3, r6
 800571a:	9a08      	ldr	r2, [sp, #32]
 800571c:	bfa8      	it	ge
 800571e:	4633      	movge	r3, r6
 8005720:	eba8 0803 	sub.w	r8, r8, r3
 8005724:	1af6      	subs	r6, r6, r3
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	9308      	str	r3, [sp, #32]
 800572a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800572c:	b1f3      	cbz	r3, 800576c <_dtoa_r+0x78c>
 800572e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80b7 	beq.w	80058a4 <_dtoa_r+0x8c4>
 8005736:	b18c      	cbz	r4, 800575c <_dtoa_r+0x77c>
 8005738:	4629      	mov	r1, r5
 800573a:	4622      	mov	r2, r4
 800573c:	4658      	mov	r0, fp
 800573e:	f000 fcc7 	bl	80060d0 <__pow5mult>
 8005742:	464a      	mov	r2, r9
 8005744:	4601      	mov	r1, r0
 8005746:	4605      	mov	r5, r0
 8005748:	4658      	mov	r0, fp
 800574a:	f000 fc17 	bl	8005f7c <__multiply>
 800574e:	4649      	mov	r1, r9
 8005750:	9004      	str	r0, [sp, #16]
 8005752:	4658      	mov	r0, fp
 8005754:	f000 fb48 	bl	8005de8 <_Bfree>
 8005758:	9b04      	ldr	r3, [sp, #16]
 800575a:	4699      	mov	r9, r3
 800575c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800575e:	1b1a      	subs	r2, r3, r4
 8005760:	d004      	beq.n	800576c <_dtoa_r+0x78c>
 8005762:	4649      	mov	r1, r9
 8005764:	4658      	mov	r0, fp
 8005766:	f000 fcb3 	bl	80060d0 <__pow5mult>
 800576a:	4681      	mov	r9, r0
 800576c:	2101      	movs	r1, #1
 800576e:	4658      	mov	r0, fp
 8005770:	f000 fbee 	bl	8005f50 <__i2b>
 8005774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005776:	4604      	mov	r4, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 81cf 	beq.w	8005b1c <_dtoa_r+0xb3c>
 800577e:	461a      	mov	r2, r3
 8005780:	4601      	mov	r1, r0
 8005782:	4658      	mov	r0, fp
 8005784:	f000 fca4 	bl	80060d0 <__pow5mult>
 8005788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800578a:	2b01      	cmp	r3, #1
 800578c:	4604      	mov	r4, r0
 800578e:	f300 8095 	bgt.w	80058bc <_dtoa_r+0x8dc>
 8005792:	9b02      	ldr	r3, [sp, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f040 8087 	bne.w	80058a8 <_dtoa_r+0x8c8>
 800579a:	9b03      	ldr	r3, [sp, #12]
 800579c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 8089 	bne.w	80058b8 <_dtoa_r+0x8d8>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057ac:	0d1b      	lsrs	r3, r3, #20
 80057ae:	051b      	lsls	r3, r3, #20
 80057b0:	b12b      	cbz	r3, 80057be <_dtoa_r+0x7de>
 80057b2:	9b08      	ldr	r3, [sp, #32]
 80057b4:	3301      	adds	r3, #1
 80057b6:	9308      	str	r3, [sp, #32]
 80057b8:	f108 0801 	add.w	r8, r8, #1
 80057bc:	2301      	movs	r3, #1
 80057be:	930a      	str	r3, [sp, #40]	@ 0x28
 80057c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 81b0 	beq.w	8005b28 <_dtoa_r+0xb48>
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057ce:	6918      	ldr	r0, [r3, #16]
 80057d0:	f000 fb72 	bl	8005eb8 <__hi0bits>
 80057d4:	f1c0 0020 	rsb	r0, r0, #32
 80057d8:	9b08      	ldr	r3, [sp, #32]
 80057da:	4418      	add	r0, r3
 80057dc:	f010 001f 	ands.w	r0, r0, #31
 80057e0:	d077      	beq.n	80058d2 <_dtoa_r+0x8f2>
 80057e2:	f1c0 0320 	rsb	r3, r0, #32
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	dd6b      	ble.n	80058c2 <_dtoa_r+0x8e2>
 80057ea:	9b08      	ldr	r3, [sp, #32]
 80057ec:	f1c0 001c 	rsb	r0, r0, #28
 80057f0:	4403      	add	r3, r0
 80057f2:	4480      	add	r8, r0
 80057f4:	4406      	add	r6, r0
 80057f6:	9308      	str	r3, [sp, #32]
 80057f8:	f1b8 0f00 	cmp.w	r8, #0
 80057fc:	dd05      	ble.n	800580a <_dtoa_r+0x82a>
 80057fe:	4649      	mov	r1, r9
 8005800:	4642      	mov	r2, r8
 8005802:	4658      	mov	r0, fp
 8005804:	f000 fcbe 	bl	8006184 <__lshift>
 8005808:	4681      	mov	r9, r0
 800580a:	9b08      	ldr	r3, [sp, #32]
 800580c:	2b00      	cmp	r3, #0
 800580e:	dd05      	ble.n	800581c <_dtoa_r+0x83c>
 8005810:	4621      	mov	r1, r4
 8005812:	461a      	mov	r2, r3
 8005814:	4658      	mov	r0, fp
 8005816:	f000 fcb5 	bl	8006184 <__lshift>
 800581a:	4604      	mov	r4, r0
 800581c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800581e:	2b00      	cmp	r3, #0
 8005820:	d059      	beq.n	80058d6 <_dtoa_r+0x8f6>
 8005822:	4621      	mov	r1, r4
 8005824:	4648      	mov	r0, r9
 8005826:	f000 fd19 	bl	800625c <__mcmp>
 800582a:	2800      	cmp	r0, #0
 800582c:	da53      	bge.n	80058d6 <_dtoa_r+0x8f6>
 800582e:	1e7b      	subs	r3, r7, #1
 8005830:	9304      	str	r3, [sp, #16]
 8005832:	4649      	mov	r1, r9
 8005834:	2300      	movs	r3, #0
 8005836:	220a      	movs	r2, #10
 8005838:	4658      	mov	r0, fp
 800583a:	f000 faf7 	bl	8005e2c <__multadd>
 800583e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005840:	4681      	mov	r9, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8172 	beq.w	8005b2c <_dtoa_r+0xb4c>
 8005848:	2300      	movs	r3, #0
 800584a:	4629      	mov	r1, r5
 800584c:	220a      	movs	r2, #10
 800584e:	4658      	mov	r0, fp
 8005850:	f000 faec 	bl	8005e2c <__multadd>
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	4605      	mov	r5, r0
 800585a:	dc67      	bgt.n	800592c <_dtoa_r+0x94c>
 800585c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800585e:	2b02      	cmp	r3, #2
 8005860:	dc41      	bgt.n	80058e6 <_dtoa_r+0x906>
 8005862:	e063      	b.n	800592c <_dtoa_r+0x94c>
 8005864:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005866:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800586a:	e746      	b.n	80056fa <_dtoa_r+0x71a>
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	1e5c      	subs	r4, r3, #1
 8005870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005872:	42a3      	cmp	r3, r4
 8005874:	bfbf      	itttt	lt
 8005876:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005878:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800587a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800587c:	1ae3      	sublt	r3, r4, r3
 800587e:	bfb4      	ite	lt
 8005880:	18d2      	addlt	r2, r2, r3
 8005882:	1b1c      	subge	r4, r3, r4
 8005884:	9b07      	ldr	r3, [sp, #28]
 8005886:	bfbc      	itt	lt
 8005888:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800588a:	2400      	movlt	r4, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	bfb5      	itete	lt
 8005890:	eba8 0603 	sublt.w	r6, r8, r3
 8005894:	9b07      	ldrge	r3, [sp, #28]
 8005896:	2300      	movlt	r3, #0
 8005898:	4646      	movge	r6, r8
 800589a:	e730      	b.n	80056fe <_dtoa_r+0x71e>
 800589c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800589e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80058a0:	4646      	mov	r6, r8
 80058a2:	e735      	b.n	8005710 <_dtoa_r+0x730>
 80058a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058a6:	e75c      	b.n	8005762 <_dtoa_r+0x782>
 80058a8:	2300      	movs	r3, #0
 80058aa:	e788      	b.n	80057be <_dtoa_r+0x7de>
 80058ac:	3fe00000 	.word	0x3fe00000
 80058b0:	40240000 	.word	0x40240000
 80058b4:	40140000 	.word	0x40140000
 80058b8:	9b02      	ldr	r3, [sp, #8]
 80058ba:	e780      	b.n	80057be <_dtoa_r+0x7de>
 80058bc:	2300      	movs	r3, #0
 80058be:	930a      	str	r3, [sp, #40]	@ 0x28
 80058c0:	e782      	b.n	80057c8 <_dtoa_r+0x7e8>
 80058c2:	d099      	beq.n	80057f8 <_dtoa_r+0x818>
 80058c4:	9a08      	ldr	r2, [sp, #32]
 80058c6:	331c      	adds	r3, #28
 80058c8:	441a      	add	r2, r3
 80058ca:	4498      	add	r8, r3
 80058cc:	441e      	add	r6, r3
 80058ce:	9208      	str	r2, [sp, #32]
 80058d0:	e792      	b.n	80057f8 <_dtoa_r+0x818>
 80058d2:	4603      	mov	r3, r0
 80058d4:	e7f6      	b.n	80058c4 <_dtoa_r+0x8e4>
 80058d6:	9b07      	ldr	r3, [sp, #28]
 80058d8:	9704      	str	r7, [sp, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	dc20      	bgt.n	8005920 <_dtoa_r+0x940>
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	dd1e      	ble.n	8005924 <_dtoa_r+0x944>
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f47f aec0 	bne.w	800566e <_dtoa_r+0x68e>
 80058ee:	4621      	mov	r1, r4
 80058f0:	2205      	movs	r2, #5
 80058f2:	4658      	mov	r0, fp
 80058f4:	f000 fa9a 	bl	8005e2c <__multadd>
 80058f8:	4601      	mov	r1, r0
 80058fa:	4604      	mov	r4, r0
 80058fc:	4648      	mov	r0, r9
 80058fe:	f000 fcad 	bl	800625c <__mcmp>
 8005902:	2800      	cmp	r0, #0
 8005904:	f77f aeb3 	ble.w	800566e <_dtoa_r+0x68e>
 8005908:	4656      	mov	r6, sl
 800590a:	2331      	movs	r3, #49	@ 0x31
 800590c:	f806 3b01 	strb.w	r3, [r6], #1
 8005910:	9b04      	ldr	r3, [sp, #16]
 8005912:	3301      	adds	r3, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	e6ae      	b.n	8005676 <_dtoa_r+0x696>
 8005918:	9c07      	ldr	r4, [sp, #28]
 800591a:	9704      	str	r7, [sp, #16]
 800591c:	4625      	mov	r5, r4
 800591e:	e7f3      	b.n	8005908 <_dtoa_r+0x928>
 8005920:	9b07      	ldr	r3, [sp, #28]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 8104 	beq.w	8005b34 <_dtoa_r+0xb54>
 800592c:	2e00      	cmp	r6, #0
 800592e:	dd05      	ble.n	800593c <_dtoa_r+0x95c>
 8005930:	4629      	mov	r1, r5
 8005932:	4632      	mov	r2, r6
 8005934:	4658      	mov	r0, fp
 8005936:	f000 fc25 	bl	8006184 <__lshift>
 800593a:	4605      	mov	r5, r0
 800593c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	d05a      	beq.n	80059f8 <_dtoa_r+0xa18>
 8005942:	6869      	ldr	r1, [r5, #4]
 8005944:	4658      	mov	r0, fp
 8005946:	f000 fa0f 	bl	8005d68 <_Balloc>
 800594a:	4606      	mov	r6, r0
 800594c:	b928      	cbnz	r0, 800595a <_dtoa_r+0x97a>
 800594e:	4b84      	ldr	r3, [pc, #528]	@ (8005b60 <_dtoa_r+0xb80>)
 8005950:	4602      	mov	r2, r0
 8005952:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005956:	f7ff bb5a 	b.w	800500e <_dtoa_r+0x2e>
 800595a:	692a      	ldr	r2, [r5, #16]
 800595c:	3202      	adds	r2, #2
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	f105 010c 	add.w	r1, r5, #12
 8005964:	300c      	adds	r0, #12
 8005966:	f000 fe3d 	bl	80065e4 <memcpy>
 800596a:	2201      	movs	r2, #1
 800596c:	4631      	mov	r1, r6
 800596e:	4658      	mov	r0, fp
 8005970:	f000 fc08 	bl	8006184 <__lshift>
 8005974:	f10a 0301 	add.w	r3, sl, #1
 8005978:	9307      	str	r3, [sp, #28]
 800597a:	9b00      	ldr	r3, [sp, #0]
 800597c:	4453      	add	r3, sl
 800597e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005980:	9b02      	ldr	r3, [sp, #8]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	462f      	mov	r7, r5
 8005988:	930a      	str	r3, [sp, #40]	@ 0x28
 800598a:	4605      	mov	r5, r0
 800598c:	9b07      	ldr	r3, [sp, #28]
 800598e:	4621      	mov	r1, r4
 8005990:	3b01      	subs	r3, #1
 8005992:	4648      	mov	r0, r9
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	f7ff fa9a 	bl	8004ece <quorem>
 800599a:	4639      	mov	r1, r7
 800599c:	9002      	str	r0, [sp, #8]
 800599e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059a2:	4648      	mov	r0, r9
 80059a4:	f000 fc5a 	bl	800625c <__mcmp>
 80059a8:	462a      	mov	r2, r5
 80059aa:	9008      	str	r0, [sp, #32]
 80059ac:	4621      	mov	r1, r4
 80059ae:	4658      	mov	r0, fp
 80059b0:	f000 fc70 	bl	8006294 <__mdiff>
 80059b4:	68c2      	ldr	r2, [r0, #12]
 80059b6:	4606      	mov	r6, r0
 80059b8:	bb02      	cbnz	r2, 80059fc <_dtoa_r+0xa1c>
 80059ba:	4601      	mov	r1, r0
 80059bc:	4648      	mov	r0, r9
 80059be:	f000 fc4d 	bl	800625c <__mcmp>
 80059c2:	4602      	mov	r2, r0
 80059c4:	4631      	mov	r1, r6
 80059c6:	4658      	mov	r0, fp
 80059c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80059ca:	f000 fa0d 	bl	8005de8 <_Bfree>
 80059ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059d2:	9e07      	ldr	r6, [sp, #28]
 80059d4:	ea43 0102 	orr.w	r1, r3, r2
 80059d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059da:	4319      	orrs	r1, r3
 80059dc:	d110      	bne.n	8005a00 <_dtoa_r+0xa20>
 80059de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059e2:	d029      	beq.n	8005a38 <_dtoa_r+0xa58>
 80059e4:	9b08      	ldr	r3, [sp, #32]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd02      	ble.n	80059f0 <_dtoa_r+0xa10>
 80059ea:	9b02      	ldr	r3, [sp, #8]
 80059ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80059f0:	9b00      	ldr	r3, [sp, #0]
 80059f2:	f883 8000 	strb.w	r8, [r3]
 80059f6:	e63f      	b.n	8005678 <_dtoa_r+0x698>
 80059f8:	4628      	mov	r0, r5
 80059fa:	e7bb      	b.n	8005974 <_dtoa_r+0x994>
 80059fc:	2201      	movs	r2, #1
 80059fe:	e7e1      	b.n	80059c4 <_dtoa_r+0x9e4>
 8005a00:	9b08      	ldr	r3, [sp, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	db04      	blt.n	8005a10 <_dtoa_r+0xa30>
 8005a06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	d120      	bne.n	8005a52 <_dtoa_r+0xa72>
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	dded      	ble.n	80059f0 <_dtoa_r+0xa10>
 8005a14:	4649      	mov	r1, r9
 8005a16:	2201      	movs	r2, #1
 8005a18:	4658      	mov	r0, fp
 8005a1a:	f000 fbb3 	bl	8006184 <__lshift>
 8005a1e:	4621      	mov	r1, r4
 8005a20:	4681      	mov	r9, r0
 8005a22:	f000 fc1b 	bl	800625c <__mcmp>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	dc03      	bgt.n	8005a32 <_dtoa_r+0xa52>
 8005a2a:	d1e1      	bne.n	80059f0 <_dtoa_r+0xa10>
 8005a2c:	f018 0f01 	tst.w	r8, #1
 8005a30:	d0de      	beq.n	80059f0 <_dtoa_r+0xa10>
 8005a32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a36:	d1d8      	bne.n	80059ea <_dtoa_r+0xa0a>
 8005a38:	9a00      	ldr	r2, [sp, #0]
 8005a3a:	2339      	movs	r3, #57	@ 0x39
 8005a3c:	7013      	strb	r3, [r2, #0]
 8005a3e:	4633      	mov	r3, r6
 8005a40:	461e      	mov	r6, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a48:	2a39      	cmp	r2, #57	@ 0x39
 8005a4a:	d052      	beq.n	8005af2 <_dtoa_r+0xb12>
 8005a4c:	3201      	adds	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e612      	b.n	8005678 <_dtoa_r+0x698>
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	dd07      	ble.n	8005a66 <_dtoa_r+0xa86>
 8005a56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a5a:	d0ed      	beq.n	8005a38 <_dtoa_r+0xa58>
 8005a5c:	9a00      	ldr	r2, [sp, #0]
 8005a5e:	f108 0301 	add.w	r3, r8, #1
 8005a62:	7013      	strb	r3, [r2, #0]
 8005a64:	e608      	b.n	8005678 <_dtoa_r+0x698>
 8005a66:	9b07      	ldr	r3, [sp, #28]
 8005a68:	9a07      	ldr	r2, [sp, #28]
 8005a6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d028      	beq.n	8005ac6 <_dtoa_r+0xae6>
 8005a74:	4649      	mov	r1, r9
 8005a76:	2300      	movs	r3, #0
 8005a78:	220a      	movs	r2, #10
 8005a7a:	4658      	mov	r0, fp
 8005a7c:	f000 f9d6 	bl	8005e2c <__multadd>
 8005a80:	42af      	cmp	r7, r5
 8005a82:	4681      	mov	r9, r0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	f04f 020a 	mov.w	r2, #10
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	4658      	mov	r0, fp
 8005a90:	d107      	bne.n	8005aa2 <_dtoa_r+0xac2>
 8005a92:	f000 f9cb 	bl	8005e2c <__multadd>
 8005a96:	4607      	mov	r7, r0
 8005a98:	4605      	mov	r5, r0
 8005a9a:	9b07      	ldr	r3, [sp, #28]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	9307      	str	r3, [sp, #28]
 8005aa0:	e774      	b.n	800598c <_dtoa_r+0x9ac>
 8005aa2:	f000 f9c3 	bl	8005e2c <__multadd>
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	220a      	movs	r2, #10
 8005aae:	4658      	mov	r0, fp
 8005ab0:	f000 f9bc 	bl	8005e2c <__multadd>
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	e7f0      	b.n	8005a9a <_dtoa_r+0xaba>
 8005ab8:	9b00      	ldr	r3, [sp, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	bfcc      	ite	gt
 8005abe:	461e      	movgt	r6, r3
 8005ac0:	2601      	movle	r6, #1
 8005ac2:	4456      	add	r6, sl
 8005ac4:	2700      	movs	r7, #0
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	2201      	movs	r2, #1
 8005aca:	4658      	mov	r0, fp
 8005acc:	f000 fb5a 	bl	8006184 <__lshift>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4681      	mov	r9, r0
 8005ad4:	f000 fbc2 	bl	800625c <__mcmp>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	dcb0      	bgt.n	8005a3e <_dtoa_r+0xa5e>
 8005adc:	d102      	bne.n	8005ae4 <_dtoa_r+0xb04>
 8005ade:	f018 0f01 	tst.w	r8, #1
 8005ae2:	d1ac      	bne.n	8005a3e <_dtoa_r+0xa5e>
 8005ae4:	4633      	mov	r3, r6
 8005ae6:	461e      	mov	r6, r3
 8005ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aec:	2a30      	cmp	r2, #48	@ 0x30
 8005aee:	d0fa      	beq.n	8005ae6 <_dtoa_r+0xb06>
 8005af0:	e5c2      	b.n	8005678 <_dtoa_r+0x698>
 8005af2:	459a      	cmp	sl, r3
 8005af4:	d1a4      	bne.n	8005a40 <_dtoa_r+0xa60>
 8005af6:	9b04      	ldr	r3, [sp, #16]
 8005af8:	3301      	adds	r3, #1
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	2331      	movs	r3, #49	@ 0x31
 8005afe:	f88a 3000 	strb.w	r3, [sl]
 8005b02:	e5b9      	b.n	8005678 <_dtoa_r+0x698>
 8005b04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b64 <_dtoa_r+0xb84>
 8005b0a:	b11b      	cbz	r3, 8005b14 <_dtoa_r+0xb34>
 8005b0c:	f10a 0308 	add.w	r3, sl, #8
 8005b10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	4650      	mov	r0, sl
 8005b16:	b019      	add	sp, #100	@ 0x64
 8005b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	f77f ae37 	ble.w	8005792 <_dtoa_r+0x7b2>
 8005b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b28:	2001      	movs	r0, #1
 8005b2a:	e655      	b.n	80057d8 <_dtoa_r+0x7f8>
 8005b2c:	9b00      	ldr	r3, [sp, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f77f aed6 	ble.w	80058e0 <_dtoa_r+0x900>
 8005b34:	4656      	mov	r6, sl
 8005b36:	4621      	mov	r1, r4
 8005b38:	4648      	mov	r0, r9
 8005b3a:	f7ff f9c8 	bl	8004ece <quorem>
 8005b3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b42:	f806 8b01 	strb.w	r8, [r6], #1
 8005b46:	9b00      	ldr	r3, [sp, #0]
 8005b48:	eba6 020a 	sub.w	r2, r6, sl
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	ddb3      	ble.n	8005ab8 <_dtoa_r+0xad8>
 8005b50:	4649      	mov	r1, r9
 8005b52:	2300      	movs	r3, #0
 8005b54:	220a      	movs	r2, #10
 8005b56:	4658      	mov	r0, fp
 8005b58:	f000 f968 	bl	8005e2c <__multadd>
 8005b5c:	4681      	mov	r9, r0
 8005b5e:	e7ea      	b.n	8005b36 <_dtoa_r+0xb56>
 8005b60:	08006d20 	.word	0x08006d20
 8005b64:	08006ca4 	.word	0x08006ca4

08005b68 <_free_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d041      	beq.n	8005bf4 <_free_r+0x8c>
 8005b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b74:	1f0c      	subs	r4, r1, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bfb8      	it	lt
 8005b7a:	18e4      	addlt	r4, r4, r3
 8005b7c:	f000 f8e8 	bl	8005d50 <__malloc_lock>
 8005b80:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf8 <_free_r+0x90>)
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	b933      	cbnz	r3, 8005b94 <_free_r+0x2c>
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b90:	f000 b8e4 	b.w	8005d5c <__malloc_unlock>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d908      	bls.n	8005baa <_free_r+0x42>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	1821      	adds	r1, r4, r0
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf01      	itttt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	1809      	addeq	r1, r1, r0
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	e7ed      	b.n	8005b86 <_free_r+0x1e>
 8005baa:	461a      	mov	r2, r3
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b10b      	cbz	r3, 8005bb4 <_free_r+0x4c>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d9fa      	bls.n	8005baa <_free_r+0x42>
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	1850      	adds	r0, r2, r1
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d10b      	bne.n	8005bd4 <_free_r+0x6c>
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	4401      	add	r1, r0
 8005bc0:	1850      	adds	r0, r2, r1
 8005bc2:	4283      	cmp	r3, r0
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	d1e0      	bne.n	8005b8a <_free_r+0x22>
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6053      	str	r3, [r2, #4]
 8005bce:	4408      	add	r0, r1
 8005bd0:	6010      	str	r0, [r2, #0]
 8005bd2:	e7da      	b.n	8005b8a <_free_r+0x22>
 8005bd4:	d902      	bls.n	8005bdc <_free_r+0x74>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	e7d6      	b.n	8005b8a <_free_r+0x22>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	1821      	adds	r1, r4, r0
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf04      	itt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	bf04      	itt	eq
 8005bec:	1809      	addeq	r1, r1, r0
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	6054      	str	r4, [r2, #4]
 8005bf2:	e7ca      	b.n	8005b8a <_free_r+0x22>
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000584 	.word	0x20000584

08005bfc <malloc>:
 8005bfc:	4b02      	ldr	r3, [pc, #8]	@ (8005c08 <malloc+0xc>)
 8005bfe:	4601      	mov	r1, r0
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	f000 b825 	b.w	8005c50 <_malloc_r>
 8005c06:	bf00      	nop
 8005c08:	20000018 	.word	0x20000018

08005c0c <sbrk_aligned>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c4c <sbrk_aligned+0x40>)
 8005c10:	460c      	mov	r4, r1
 8005c12:	6831      	ldr	r1, [r6, #0]
 8005c14:	4605      	mov	r5, r0
 8005c16:	b911      	cbnz	r1, 8005c1e <sbrk_aligned+0x12>
 8005c18:	f000 fcd4 	bl	80065c4 <_sbrk_r>
 8005c1c:	6030      	str	r0, [r6, #0]
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 fccf 	bl	80065c4 <_sbrk_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d103      	bne.n	8005c32 <sbrk_aligned+0x26>
 8005c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c2e:	4620      	mov	r0, r4
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	1cc4      	adds	r4, r0, #3
 8005c34:	f024 0403 	bic.w	r4, r4, #3
 8005c38:	42a0      	cmp	r0, r4
 8005c3a:	d0f8      	beq.n	8005c2e <sbrk_aligned+0x22>
 8005c3c:	1a21      	subs	r1, r4, r0
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 fcc0 	bl	80065c4 <_sbrk_r>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d1f2      	bne.n	8005c2e <sbrk_aligned+0x22>
 8005c48:	e7ef      	b.n	8005c2a <sbrk_aligned+0x1e>
 8005c4a:	bf00      	nop
 8005c4c:	20000580 	.word	0x20000580

08005c50 <_malloc_r>:
 8005c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c54:	1ccd      	adds	r5, r1, #3
 8005c56:	f025 0503 	bic.w	r5, r5, #3
 8005c5a:	3508      	adds	r5, #8
 8005c5c:	2d0c      	cmp	r5, #12
 8005c5e:	bf38      	it	cc
 8005c60:	250c      	movcc	r5, #12
 8005c62:	2d00      	cmp	r5, #0
 8005c64:	4606      	mov	r6, r0
 8005c66:	db01      	blt.n	8005c6c <_malloc_r+0x1c>
 8005c68:	42a9      	cmp	r1, r5
 8005c6a:	d904      	bls.n	8005c76 <_malloc_r+0x26>
 8005c6c:	230c      	movs	r3, #12
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	2000      	movs	r0, #0
 8005c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d4c <_malloc_r+0xfc>
 8005c7a:	f000 f869 	bl	8005d50 <__malloc_lock>
 8005c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c82:	461c      	mov	r4, r3
 8005c84:	bb44      	cbnz	r4, 8005cd8 <_malloc_r+0x88>
 8005c86:	4629      	mov	r1, r5
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ffbf 	bl	8005c0c <sbrk_aligned>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	4604      	mov	r4, r0
 8005c92:	d158      	bne.n	8005d46 <_malloc_r+0xf6>
 8005c94:	f8d8 4000 	ldr.w	r4, [r8]
 8005c98:	4627      	mov	r7, r4
 8005c9a:	2f00      	cmp	r7, #0
 8005c9c:	d143      	bne.n	8005d26 <_malloc_r+0xd6>
 8005c9e:	2c00      	cmp	r4, #0
 8005ca0:	d04b      	beq.n	8005d3a <_malloc_r+0xea>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	eb04 0903 	add.w	r9, r4, r3
 8005cac:	f000 fc8a 	bl	80065c4 <_sbrk_r>
 8005cb0:	4581      	cmp	r9, r0
 8005cb2:	d142      	bne.n	8005d3a <_malloc_r+0xea>
 8005cb4:	6821      	ldr	r1, [r4, #0]
 8005cb6:	1a6d      	subs	r5, r5, r1
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f7ff ffa6 	bl	8005c0c <sbrk_aligned>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d03a      	beq.n	8005d3a <_malloc_r+0xea>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	442b      	add	r3, r5
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	f8d8 3000 	ldr.w	r3, [r8]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	bb62      	cbnz	r2, 8005d2c <_malloc_r+0xdc>
 8005cd2:	f8c8 7000 	str.w	r7, [r8]
 8005cd6:	e00f      	b.n	8005cf8 <_malloc_r+0xa8>
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	1b52      	subs	r2, r2, r5
 8005cdc:	d420      	bmi.n	8005d20 <_malloc_r+0xd0>
 8005cde:	2a0b      	cmp	r2, #11
 8005ce0:	d917      	bls.n	8005d12 <_malloc_r+0xc2>
 8005ce2:	1961      	adds	r1, r4, r5
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	6025      	str	r5, [r4, #0]
 8005ce8:	bf18      	it	ne
 8005cea:	6059      	strne	r1, [r3, #4]
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	bf08      	it	eq
 8005cf0:	f8c8 1000 	streq.w	r1, [r8]
 8005cf4:	5162      	str	r2, [r4, r5]
 8005cf6:	604b      	str	r3, [r1, #4]
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f000 f82f 	bl	8005d5c <__malloc_unlock>
 8005cfe:	f104 000b 	add.w	r0, r4, #11
 8005d02:	1d23      	adds	r3, r4, #4
 8005d04:	f020 0007 	bic.w	r0, r0, #7
 8005d08:	1ac2      	subs	r2, r0, r3
 8005d0a:	bf1c      	itt	ne
 8005d0c:	1a1b      	subne	r3, r3, r0
 8005d0e:	50a3      	strne	r3, [r4, r2]
 8005d10:	e7af      	b.n	8005c72 <_malloc_r+0x22>
 8005d12:	6862      	ldr	r2, [r4, #4]
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	bf0c      	ite	eq
 8005d18:	f8c8 2000 	streq.w	r2, [r8]
 8005d1c:	605a      	strne	r2, [r3, #4]
 8005d1e:	e7eb      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d20:	4623      	mov	r3, r4
 8005d22:	6864      	ldr	r4, [r4, #4]
 8005d24:	e7ae      	b.n	8005c84 <_malloc_r+0x34>
 8005d26:	463c      	mov	r4, r7
 8005d28:	687f      	ldr	r7, [r7, #4]
 8005d2a:	e7b6      	b.n	8005c9a <_malloc_r+0x4a>
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	d1fb      	bne.n	8005d2c <_malloc_r+0xdc>
 8005d34:	2300      	movs	r3, #0
 8005d36:	6053      	str	r3, [r2, #4]
 8005d38:	e7de      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	6033      	str	r3, [r6, #0]
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f000 f80c 	bl	8005d5c <__malloc_unlock>
 8005d44:	e794      	b.n	8005c70 <_malloc_r+0x20>
 8005d46:	6005      	str	r5, [r0, #0]
 8005d48:	e7d6      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d4a:	bf00      	nop
 8005d4c:	20000584 	.word	0x20000584

08005d50 <__malloc_lock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	@ (8005d58 <__malloc_lock+0x8>)
 8005d52:	f7ff b8ba 	b.w	8004eca <__retarget_lock_acquire_recursive>
 8005d56:	bf00      	nop
 8005d58:	2000057c 	.word	0x2000057c

08005d5c <__malloc_unlock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	@ (8005d64 <__malloc_unlock+0x8>)
 8005d5e:	f7ff b8b5 	b.w	8004ecc <__retarget_lock_release_recursive>
 8005d62:	bf00      	nop
 8005d64:	2000057c 	.word	0x2000057c

08005d68 <_Balloc>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	69c6      	ldr	r6, [r0, #28]
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	b976      	cbnz	r6, 8005d90 <_Balloc+0x28>
 8005d72:	2010      	movs	r0, #16
 8005d74:	f7ff ff42 	bl	8005bfc <malloc>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	61e0      	str	r0, [r4, #28]
 8005d7c:	b920      	cbnz	r0, 8005d88 <_Balloc+0x20>
 8005d7e:	4b18      	ldr	r3, [pc, #96]	@ (8005de0 <_Balloc+0x78>)
 8005d80:	4818      	ldr	r0, [pc, #96]	@ (8005de4 <_Balloc+0x7c>)
 8005d82:	216b      	movs	r1, #107	@ 0x6b
 8005d84:	f000 fc3c 	bl	8006600 <__assert_func>
 8005d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d8c:	6006      	str	r6, [r0, #0]
 8005d8e:	60c6      	str	r6, [r0, #12]
 8005d90:	69e6      	ldr	r6, [r4, #28]
 8005d92:	68f3      	ldr	r3, [r6, #12]
 8005d94:	b183      	cbz	r3, 8005db8 <_Balloc+0x50>
 8005d96:	69e3      	ldr	r3, [r4, #28]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d9e:	b9b8      	cbnz	r0, 8005dd0 <_Balloc+0x68>
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f605 	lsl.w	r6, r1, r5
 8005da6:	1d72      	adds	r2, r6, #5
 8005da8:	0092      	lsls	r2, r2, #2
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fc46 	bl	800663c <_calloc_r>
 8005db0:	b160      	cbz	r0, 8005dcc <_Balloc+0x64>
 8005db2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005db6:	e00e      	b.n	8005dd6 <_Balloc+0x6e>
 8005db8:	2221      	movs	r2, #33	@ 0x21
 8005dba:	2104      	movs	r1, #4
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 fc3d 	bl	800663c <_calloc_r>
 8005dc2:	69e3      	ldr	r3, [r4, #28]
 8005dc4:	60f0      	str	r0, [r6, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e4      	bne.n	8005d96 <_Balloc+0x2e>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	6802      	ldr	r2, [r0, #0]
 8005dd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ddc:	e7f7      	b.n	8005dce <_Balloc+0x66>
 8005dde:	bf00      	nop
 8005de0:	08006cb1 	.word	0x08006cb1
 8005de4:	08006d31 	.word	0x08006d31

08005de8 <_Bfree>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	69c6      	ldr	r6, [r0, #28]
 8005dec:	4605      	mov	r5, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	b976      	cbnz	r6, 8005e10 <_Bfree+0x28>
 8005df2:	2010      	movs	r0, #16
 8005df4:	f7ff ff02 	bl	8005bfc <malloc>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	61e8      	str	r0, [r5, #28]
 8005dfc:	b920      	cbnz	r0, 8005e08 <_Bfree+0x20>
 8005dfe:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <_Bfree+0x3c>)
 8005e00:	4809      	ldr	r0, [pc, #36]	@ (8005e28 <_Bfree+0x40>)
 8005e02:	218f      	movs	r1, #143	@ 0x8f
 8005e04:	f000 fbfc 	bl	8006600 <__assert_func>
 8005e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e0c:	6006      	str	r6, [r0, #0]
 8005e0e:	60c6      	str	r6, [r0, #12]
 8005e10:	b13c      	cbz	r4, 8005e22 <_Bfree+0x3a>
 8005e12:	69eb      	ldr	r3, [r5, #28]
 8005e14:	6862      	ldr	r2, [r4, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e1c:	6021      	str	r1, [r4, #0]
 8005e1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	08006cb1 	.word	0x08006cb1
 8005e28:	08006d31 	.word	0x08006d31

08005e2c <__multadd>:
 8005e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e30:	690d      	ldr	r5, [r1, #16]
 8005e32:	4607      	mov	r7, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	461e      	mov	r6, r3
 8005e38:	f101 0c14 	add.w	ip, r1, #20
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f8dc 3000 	ldr.w	r3, [ip]
 8005e42:	b299      	uxth	r1, r3
 8005e44:	fb02 6101 	mla	r1, r2, r1, r6
 8005e48:	0c1e      	lsrs	r6, r3, #16
 8005e4a:	0c0b      	lsrs	r3, r1, #16
 8005e4c:	fb02 3306 	mla	r3, r2, r6, r3
 8005e50:	b289      	uxth	r1, r1
 8005e52:	3001      	adds	r0, #1
 8005e54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e58:	4285      	cmp	r5, r0
 8005e5a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e62:	dcec      	bgt.n	8005e3e <__multadd+0x12>
 8005e64:	b30e      	cbz	r6, 8005eaa <__multadd+0x7e>
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	42ab      	cmp	r3, r5
 8005e6a:	dc19      	bgt.n	8005ea0 <__multadd+0x74>
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4638      	mov	r0, r7
 8005e70:	3101      	adds	r1, #1
 8005e72:	f7ff ff79 	bl	8005d68 <_Balloc>
 8005e76:	4680      	mov	r8, r0
 8005e78:	b928      	cbnz	r0, 8005e86 <__multadd+0x5a>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <__multadd+0x84>)
 8005e7e:	480d      	ldr	r0, [pc, #52]	@ (8005eb4 <__multadd+0x88>)
 8005e80:	21ba      	movs	r1, #186	@ 0xba
 8005e82:	f000 fbbd 	bl	8006600 <__assert_func>
 8005e86:	6922      	ldr	r2, [r4, #16]
 8005e88:	3202      	adds	r2, #2
 8005e8a:	f104 010c 	add.w	r1, r4, #12
 8005e8e:	0092      	lsls	r2, r2, #2
 8005e90:	300c      	adds	r0, #12
 8005e92:	f000 fba7 	bl	80065e4 <memcpy>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ffa5 	bl	8005de8 <_Bfree>
 8005e9e:	4644      	mov	r4, r8
 8005ea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	615e      	str	r6, [r3, #20]
 8005ea8:	6125      	str	r5, [r4, #16]
 8005eaa:	4620      	mov	r0, r4
 8005eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb0:	08006d20 	.word	0x08006d20
 8005eb4:	08006d31 	.word	0x08006d31

08005eb8 <__hi0bits>:
 8005eb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	bf36      	itet	cc
 8005ec0:	0403      	lslcc	r3, r0, #16
 8005ec2:	2000      	movcs	r0, #0
 8005ec4:	2010      	movcc	r0, #16
 8005ec6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eca:	bf3c      	itt	cc
 8005ecc:	021b      	lslcc	r3, r3, #8
 8005ece:	3008      	addcc	r0, #8
 8005ed0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ed4:	bf3c      	itt	cc
 8005ed6:	011b      	lslcc	r3, r3, #4
 8005ed8:	3004      	addcc	r0, #4
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ede:	bf3c      	itt	cc
 8005ee0:	009b      	lslcc	r3, r3, #2
 8005ee2:	3002      	addcc	r0, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	db05      	blt.n	8005ef4 <__hi0bits+0x3c>
 8005ee8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005eec:	f100 0001 	add.w	r0, r0, #1
 8005ef0:	bf08      	it	eq
 8005ef2:	2020      	moveq	r0, #32
 8005ef4:	4770      	bx	lr

08005ef6 <__lo0bits>:
 8005ef6:	6803      	ldr	r3, [r0, #0]
 8005ef8:	4602      	mov	r2, r0
 8005efa:	f013 0007 	ands.w	r0, r3, #7
 8005efe:	d00b      	beq.n	8005f18 <__lo0bits+0x22>
 8005f00:	07d9      	lsls	r1, r3, #31
 8005f02:	d421      	bmi.n	8005f48 <__lo0bits+0x52>
 8005f04:	0798      	lsls	r0, r3, #30
 8005f06:	bf49      	itett	mi
 8005f08:	085b      	lsrmi	r3, r3, #1
 8005f0a:	089b      	lsrpl	r3, r3, #2
 8005f0c:	2001      	movmi	r0, #1
 8005f0e:	6013      	strmi	r3, [r2, #0]
 8005f10:	bf5c      	itt	pl
 8005f12:	6013      	strpl	r3, [r2, #0]
 8005f14:	2002      	movpl	r0, #2
 8005f16:	4770      	bx	lr
 8005f18:	b299      	uxth	r1, r3
 8005f1a:	b909      	cbnz	r1, 8005f20 <__lo0bits+0x2a>
 8005f1c:	0c1b      	lsrs	r3, r3, #16
 8005f1e:	2010      	movs	r0, #16
 8005f20:	b2d9      	uxtb	r1, r3
 8005f22:	b909      	cbnz	r1, 8005f28 <__lo0bits+0x32>
 8005f24:	3008      	adds	r0, #8
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	0719      	lsls	r1, r3, #28
 8005f2a:	bf04      	itt	eq
 8005f2c:	091b      	lsreq	r3, r3, #4
 8005f2e:	3004      	addeq	r0, #4
 8005f30:	0799      	lsls	r1, r3, #30
 8005f32:	bf04      	itt	eq
 8005f34:	089b      	lsreq	r3, r3, #2
 8005f36:	3002      	addeq	r0, #2
 8005f38:	07d9      	lsls	r1, r3, #31
 8005f3a:	d403      	bmi.n	8005f44 <__lo0bits+0x4e>
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	f100 0001 	add.w	r0, r0, #1
 8005f42:	d003      	beq.n	8005f4c <__lo0bits+0x56>
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	4770      	bx	lr
 8005f48:	2000      	movs	r0, #0
 8005f4a:	4770      	bx	lr
 8005f4c:	2020      	movs	r0, #32
 8005f4e:	4770      	bx	lr

08005f50 <__i2b>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	460c      	mov	r4, r1
 8005f54:	2101      	movs	r1, #1
 8005f56:	f7ff ff07 	bl	8005d68 <_Balloc>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	b928      	cbnz	r0, 8005f6a <__i2b+0x1a>
 8005f5e:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <__i2b+0x24>)
 8005f60:	4805      	ldr	r0, [pc, #20]	@ (8005f78 <__i2b+0x28>)
 8005f62:	f240 1145 	movw	r1, #325	@ 0x145
 8005f66:	f000 fb4b 	bl	8006600 <__assert_func>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	6144      	str	r4, [r0, #20]
 8005f6e:	6103      	str	r3, [r0, #16]
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	bf00      	nop
 8005f74:	08006d20 	.word	0x08006d20
 8005f78:	08006d31 	.word	0x08006d31

08005f7c <__multiply>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	4614      	mov	r4, r2
 8005f82:	690a      	ldr	r2, [r1, #16]
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	bfa8      	it	ge
 8005f8a:	4623      	movge	r3, r4
 8005f8c:	460f      	mov	r7, r1
 8005f8e:	bfa4      	itt	ge
 8005f90:	460c      	movge	r4, r1
 8005f92:	461f      	movge	r7, r3
 8005f94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005f98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005f9c:	68a3      	ldr	r3, [r4, #8]
 8005f9e:	6861      	ldr	r1, [r4, #4]
 8005fa0:	eb0a 0609 	add.w	r6, sl, r9
 8005fa4:	42b3      	cmp	r3, r6
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	bfb8      	it	lt
 8005faa:	3101      	addlt	r1, #1
 8005fac:	f7ff fedc 	bl	8005d68 <_Balloc>
 8005fb0:	b930      	cbnz	r0, 8005fc0 <__multiply+0x44>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4b44      	ldr	r3, [pc, #272]	@ (80060c8 <__multiply+0x14c>)
 8005fb6:	4845      	ldr	r0, [pc, #276]	@ (80060cc <__multiply+0x150>)
 8005fb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005fbc:	f000 fb20 	bl	8006600 <__assert_func>
 8005fc0:	f100 0514 	add.w	r5, r0, #20
 8005fc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fc8:	462b      	mov	r3, r5
 8005fca:	2200      	movs	r2, #0
 8005fcc:	4543      	cmp	r3, r8
 8005fce:	d321      	bcc.n	8006014 <__multiply+0x98>
 8005fd0:	f107 0114 	add.w	r1, r7, #20
 8005fd4:	f104 0214 	add.w	r2, r4, #20
 8005fd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005fdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005fe0:	9302      	str	r3, [sp, #8]
 8005fe2:	1b13      	subs	r3, r2, r4
 8005fe4:	3b15      	subs	r3, #21
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	3304      	adds	r3, #4
 8005fec:	f104 0715 	add.w	r7, r4, #21
 8005ff0:	42ba      	cmp	r2, r7
 8005ff2:	bf38      	it	cc
 8005ff4:	2304      	movcc	r3, #4
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	9b02      	ldr	r3, [sp, #8]
 8005ffa:	9103      	str	r1, [sp, #12]
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	d80c      	bhi.n	800601a <__multiply+0x9e>
 8006000:	2e00      	cmp	r6, #0
 8006002:	dd03      	ble.n	800600c <__multiply+0x90>
 8006004:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006008:	2b00      	cmp	r3, #0
 800600a:	d05b      	beq.n	80060c4 <__multiply+0x148>
 800600c:	6106      	str	r6, [r0, #16]
 800600e:	b005      	add	sp, #20
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	f843 2b04 	str.w	r2, [r3], #4
 8006018:	e7d8      	b.n	8005fcc <__multiply+0x50>
 800601a:	f8b1 a000 	ldrh.w	sl, [r1]
 800601e:	f1ba 0f00 	cmp.w	sl, #0
 8006022:	d024      	beq.n	800606e <__multiply+0xf2>
 8006024:	f104 0e14 	add.w	lr, r4, #20
 8006028:	46a9      	mov	r9, r5
 800602a:	f04f 0c00 	mov.w	ip, #0
 800602e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006032:	f8d9 3000 	ldr.w	r3, [r9]
 8006036:	fa1f fb87 	uxth.w	fp, r7
 800603a:	b29b      	uxth	r3, r3
 800603c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006040:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006044:	f8d9 7000 	ldr.w	r7, [r9]
 8006048:	4463      	add	r3, ip
 800604a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800604e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006052:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006056:	b29b      	uxth	r3, r3
 8006058:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800605c:	4572      	cmp	r2, lr
 800605e:	f849 3b04 	str.w	r3, [r9], #4
 8006062:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006066:	d8e2      	bhi.n	800602e <__multiply+0xb2>
 8006068:	9b01      	ldr	r3, [sp, #4]
 800606a:	f845 c003 	str.w	ip, [r5, r3]
 800606e:	9b03      	ldr	r3, [sp, #12]
 8006070:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006074:	3104      	adds	r1, #4
 8006076:	f1b9 0f00 	cmp.w	r9, #0
 800607a:	d021      	beq.n	80060c0 <__multiply+0x144>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	f104 0c14 	add.w	ip, r4, #20
 8006082:	46ae      	mov	lr, r5
 8006084:	f04f 0a00 	mov.w	sl, #0
 8006088:	f8bc b000 	ldrh.w	fp, [ip]
 800608c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006090:	fb09 770b 	mla	r7, r9, fp, r7
 8006094:	4457      	add	r7, sl
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800609c:	f84e 3b04 	str.w	r3, [lr], #4
 80060a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060a8:	f8be 3000 	ldrh.w	r3, [lr]
 80060ac:	fb09 330a 	mla	r3, r9, sl, r3
 80060b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80060b4:	4562      	cmp	r2, ip
 80060b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060ba:	d8e5      	bhi.n	8006088 <__multiply+0x10c>
 80060bc:	9f01      	ldr	r7, [sp, #4]
 80060be:	51eb      	str	r3, [r5, r7]
 80060c0:	3504      	adds	r5, #4
 80060c2:	e799      	b.n	8005ff8 <__multiply+0x7c>
 80060c4:	3e01      	subs	r6, #1
 80060c6:	e79b      	b.n	8006000 <__multiply+0x84>
 80060c8:	08006d20 	.word	0x08006d20
 80060cc:	08006d31 	.word	0x08006d31

080060d0 <__pow5mult>:
 80060d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	4615      	mov	r5, r2
 80060d6:	f012 0203 	ands.w	r2, r2, #3
 80060da:	4607      	mov	r7, r0
 80060dc:	460e      	mov	r6, r1
 80060de:	d007      	beq.n	80060f0 <__pow5mult+0x20>
 80060e0:	4c25      	ldr	r4, [pc, #148]	@ (8006178 <__pow5mult+0xa8>)
 80060e2:	3a01      	subs	r2, #1
 80060e4:	2300      	movs	r3, #0
 80060e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ea:	f7ff fe9f 	bl	8005e2c <__multadd>
 80060ee:	4606      	mov	r6, r0
 80060f0:	10ad      	asrs	r5, r5, #2
 80060f2:	d03d      	beq.n	8006170 <__pow5mult+0xa0>
 80060f4:	69fc      	ldr	r4, [r7, #28]
 80060f6:	b97c      	cbnz	r4, 8006118 <__pow5mult+0x48>
 80060f8:	2010      	movs	r0, #16
 80060fa:	f7ff fd7f 	bl	8005bfc <malloc>
 80060fe:	4602      	mov	r2, r0
 8006100:	61f8      	str	r0, [r7, #28]
 8006102:	b928      	cbnz	r0, 8006110 <__pow5mult+0x40>
 8006104:	4b1d      	ldr	r3, [pc, #116]	@ (800617c <__pow5mult+0xac>)
 8006106:	481e      	ldr	r0, [pc, #120]	@ (8006180 <__pow5mult+0xb0>)
 8006108:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800610c:	f000 fa78 	bl	8006600 <__assert_func>
 8006110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006114:	6004      	str	r4, [r0, #0]
 8006116:	60c4      	str	r4, [r0, #12]
 8006118:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800611c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006120:	b94c      	cbnz	r4, 8006136 <__pow5mult+0x66>
 8006122:	f240 2171 	movw	r1, #625	@ 0x271
 8006126:	4638      	mov	r0, r7
 8006128:	f7ff ff12 	bl	8005f50 <__i2b>
 800612c:	2300      	movs	r3, #0
 800612e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006132:	4604      	mov	r4, r0
 8006134:	6003      	str	r3, [r0, #0]
 8006136:	f04f 0900 	mov.w	r9, #0
 800613a:	07eb      	lsls	r3, r5, #31
 800613c:	d50a      	bpl.n	8006154 <__pow5mult+0x84>
 800613e:	4631      	mov	r1, r6
 8006140:	4622      	mov	r2, r4
 8006142:	4638      	mov	r0, r7
 8006144:	f7ff ff1a 	bl	8005f7c <__multiply>
 8006148:	4631      	mov	r1, r6
 800614a:	4680      	mov	r8, r0
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff fe4b 	bl	8005de8 <_Bfree>
 8006152:	4646      	mov	r6, r8
 8006154:	106d      	asrs	r5, r5, #1
 8006156:	d00b      	beq.n	8006170 <__pow5mult+0xa0>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	b938      	cbnz	r0, 800616c <__pow5mult+0x9c>
 800615c:	4622      	mov	r2, r4
 800615e:	4621      	mov	r1, r4
 8006160:	4638      	mov	r0, r7
 8006162:	f7ff ff0b 	bl	8005f7c <__multiply>
 8006166:	6020      	str	r0, [r4, #0]
 8006168:	f8c0 9000 	str.w	r9, [r0]
 800616c:	4604      	mov	r4, r0
 800616e:	e7e4      	b.n	800613a <__pow5mult+0x6a>
 8006170:	4630      	mov	r0, r6
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	bf00      	nop
 8006178:	08006d8c 	.word	0x08006d8c
 800617c:	08006cb1 	.word	0x08006cb1
 8006180:	08006d31 	.word	0x08006d31

08006184 <__lshift>:
 8006184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	460c      	mov	r4, r1
 800618a:	6849      	ldr	r1, [r1, #4]
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	4607      	mov	r7, r0
 8006196:	4691      	mov	r9, r2
 8006198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800619c:	f108 0601 	add.w	r6, r8, #1
 80061a0:	42b3      	cmp	r3, r6
 80061a2:	db0b      	blt.n	80061bc <__lshift+0x38>
 80061a4:	4638      	mov	r0, r7
 80061a6:	f7ff fddf 	bl	8005d68 <_Balloc>
 80061aa:	4605      	mov	r5, r0
 80061ac:	b948      	cbnz	r0, 80061c2 <__lshift+0x3e>
 80061ae:	4602      	mov	r2, r0
 80061b0:	4b28      	ldr	r3, [pc, #160]	@ (8006254 <__lshift+0xd0>)
 80061b2:	4829      	ldr	r0, [pc, #164]	@ (8006258 <__lshift+0xd4>)
 80061b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061b8:	f000 fa22 	bl	8006600 <__assert_func>
 80061bc:	3101      	adds	r1, #1
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	e7ee      	b.n	80061a0 <__lshift+0x1c>
 80061c2:	2300      	movs	r3, #0
 80061c4:	f100 0114 	add.w	r1, r0, #20
 80061c8:	f100 0210 	add.w	r2, r0, #16
 80061cc:	4618      	mov	r0, r3
 80061ce:	4553      	cmp	r3, sl
 80061d0:	db33      	blt.n	800623a <__lshift+0xb6>
 80061d2:	6920      	ldr	r0, [r4, #16]
 80061d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061d8:	f104 0314 	add.w	r3, r4, #20
 80061dc:	f019 091f 	ands.w	r9, r9, #31
 80061e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061e8:	d02b      	beq.n	8006242 <__lshift+0xbe>
 80061ea:	f1c9 0e20 	rsb	lr, r9, #32
 80061ee:	468a      	mov	sl, r1
 80061f0:	2200      	movs	r2, #0
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	fa00 f009 	lsl.w	r0, r0, r9
 80061f8:	4310      	orrs	r0, r2
 80061fa:	f84a 0b04 	str.w	r0, [sl], #4
 80061fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006202:	459c      	cmp	ip, r3
 8006204:	fa22 f20e 	lsr.w	r2, r2, lr
 8006208:	d8f3      	bhi.n	80061f2 <__lshift+0x6e>
 800620a:	ebac 0304 	sub.w	r3, ip, r4
 800620e:	3b15      	subs	r3, #21
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	3304      	adds	r3, #4
 8006216:	f104 0015 	add.w	r0, r4, #21
 800621a:	4584      	cmp	ip, r0
 800621c:	bf38      	it	cc
 800621e:	2304      	movcc	r3, #4
 8006220:	50ca      	str	r2, [r1, r3]
 8006222:	b10a      	cbz	r2, 8006228 <__lshift+0xa4>
 8006224:	f108 0602 	add.w	r6, r8, #2
 8006228:	3e01      	subs	r6, #1
 800622a:	4638      	mov	r0, r7
 800622c:	612e      	str	r6, [r5, #16]
 800622e:	4621      	mov	r1, r4
 8006230:	f7ff fdda 	bl	8005de8 <_Bfree>
 8006234:	4628      	mov	r0, r5
 8006236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623a:	f842 0f04 	str.w	r0, [r2, #4]!
 800623e:	3301      	adds	r3, #1
 8006240:	e7c5      	b.n	80061ce <__lshift+0x4a>
 8006242:	3904      	subs	r1, #4
 8006244:	f853 2b04 	ldr.w	r2, [r3], #4
 8006248:	f841 2f04 	str.w	r2, [r1, #4]!
 800624c:	459c      	cmp	ip, r3
 800624e:	d8f9      	bhi.n	8006244 <__lshift+0xc0>
 8006250:	e7ea      	b.n	8006228 <__lshift+0xa4>
 8006252:	bf00      	nop
 8006254:	08006d20 	.word	0x08006d20
 8006258:	08006d31 	.word	0x08006d31

0800625c <__mcmp>:
 800625c:	690a      	ldr	r2, [r1, #16]
 800625e:	4603      	mov	r3, r0
 8006260:	6900      	ldr	r0, [r0, #16]
 8006262:	1a80      	subs	r0, r0, r2
 8006264:	b530      	push	{r4, r5, lr}
 8006266:	d10e      	bne.n	8006286 <__mcmp+0x2a>
 8006268:	3314      	adds	r3, #20
 800626a:	3114      	adds	r1, #20
 800626c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800627c:	4295      	cmp	r5, r2
 800627e:	d003      	beq.n	8006288 <__mcmp+0x2c>
 8006280:	d205      	bcs.n	800628e <__mcmp+0x32>
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	bd30      	pop	{r4, r5, pc}
 8006288:	42a3      	cmp	r3, r4
 800628a:	d3f3      	bcc.n	8006274 <__mcmp+0x18>
 800628c:	e7fb      	b.n	8006286 <__mcmp+0x2a>
 800628e:	2001      	movs	r0, #1
 8006290:	e7f9      	b.n	8006286 <__mcmp+0x2a>
	...

08006294 <__mdiff>:
 8006294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	4689      	mov	r9, r1
 800629a:	4606      	mov	r6, r0
 800629c:	4611      	mov	r1, r2
 800629e:	4648      	mov	r0, r9
 80062a0:	4614      	mov	r4, r2
 80062a2:	f7ff ffdb 	bl	800625c <__mcmp>
 80062a6:	1e05      	subs	r5, r0, #0
 80062a8:	d112      	bne.n	80062d0 <__mdiff+0x3c>
 80062aa:	4629      	mov	r1, r5
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7ff fd5b 	bl	8005d68 <_Balloc>
 80062b2:	4602      	mov	r2, r0
 80062b4:	b928      	cbnz	r0, 80062c2 <__mdiff+0x2e>
 80062b6:	4b3f      	ldr	r3, [pc, #252]	@ (80063b4 <__mdiff+0x120>)
 80062b8:	f240 2137 	movw	r1, #567	@ 0x237
 80062bc:	483e      	ldr	r0, [pc, #248]	@ (80063b8 <__mdiff+0x124>)
 80062be:	f000 f99f 	bl	8006600 <__assert_func>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062c8:	4610      	mov	r0, r2
 80062ca:	b003      	add	sp, #12
 80062cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d0:	bfbc      	itt	lt
 80062d2:	464b      	movlt	r3, r9
 80062d4:	46a1      	movlt	r9, r4
 80062d6:	4630      	mov	r0, r6
 80062d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062dc:	bfba      	itte	lt
 80062de:	461c      	movlt	r4, r3
 80062e0:	2501      	movlt	r5, #1
 80062e2:	2500      	movge	r5, #0
 80062e4:	f7ff fd40 	bl	8005d68 <_Balloc>
 80062e8:	4602      	mov	r2, r0
 80062ea:	b918      	cbnz	r0, 80062f4 <__mdiff+0x60>
 80062ec:	4b31      	ldr	r3, [pc, #196]	@ (80063b4 <__mdiff+0x120>)
 80062ee:	f240 2145 	movw	r1, #581	@ 0x245
 80062f2:	e7e3      	b.n	80062bc <__mdiff+0x28>
 80062f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062f8:	6926      	ldr	r6, [r4, #16]
 80062fa:	60c5      	str	r5, [r0, #12]
 80062fc:	f109 0310 	add.w	r3, r9, #16
 8006300:	f109 0514 	add.w	r5, r9, #20
 8006304:	f104 0e14 	add.w	lr, r4, #20
 8006308:	f100 0b14 	add.w	fp, r0, #20
 800630c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006310:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	46d9      	mov	r9, fp
 8006318:	f04f 0c00 	mov.w	ip, #0
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006322:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	fa1f f38a 	uxth.w	r3, sl
 800632c:	4619      	mov	r1, r3
 800632e:	b283      	uxth	r3, r0
 8006330:	1acb      	subs	r3, r1, r3
 8006332:	0c00      	lsrs	r0, r0, #16
 8006334:	4463      	add	r3, ip
 8006336:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800633a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800633e:	b29b      	uxth	r3, r3
 8006340:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006344:	4576      	cmp	r6, lr
 8006346:	f849 3b04 	str.w	r3, [r9], #4
 800634a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800634e:	d8e5      	bhi.n	800631c <__mdiff+0x88>
 8006350:	1b33      	subs	r3, r6, r4
 8006352:	3b15      	subs	r3, #21
 8006354:	f023 0303 	bic.w	r3, r3, #3
 8006358:	3415      	adds	r4, #21
 800635a:	3304      	adds	r3, #4
 800635c:	42a6      	cmp	r6, r4
 800635e:	bf38      	it	cc
 8006360:	2304      	movcc	r3, #4
 8006362:	441d      	add	r5, r3
 8006364:	445b      	add	r3, fp
 8006366:	461e      	mov	r6, r3
 8006368:	462c      	mov	r4, r5
 800636a:	4544      	cmp	r4, r8
 800636c:	d30e      	bcc.n	800638c <__mdiff+0xf8>
 800636e:	f108 0103 	add.w	r1, r8, #3
 8006372:	1b49      	subs	r1, r1, r5
 8006374:	f021 0103 	bic.w	r1, r1, #3
 8006378:	3d03      	subs	r5, #3
 800637a:	45a8      	cmp	r8, r5
 800637c:	bf38      	it	cc
 800637e:	2100      	movcc	r1, #0
 8006380:	440b      	add	r3, r1
 8006382:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006386:	b191      	cbz	r1, 80063ae <__mdiff+0x11a>
 8006388:	6117      	str	r7, [r2, #16]
 800638a:	e79d      	b.n	80062c8 <__mdiff+0x34>
 800638c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006390:	46e6      	mov	lr, ip
 8006392:	0c08      	lsrs	r0, r1, #16
 8006394:	fa1c fc81 	uxtah	ip, ip, r1
 8006398:	4471      	add	r1, lr
 800639a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800639e:	b289      	uxth	r1, r1
 80063a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063a4:	f846 1b04 	str.w	r1, [r6], #4
 80063a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063ac:	e7dd      	b.n	800636a <__mdiff+0xd6>
 80063ae:	3f01      	subs	r7, #1
 80063b0:	e7e7      	b.n	8006382 <__mdiff+0xee>
 80063b2:	bf00      	nop
 80063b4:	08006d20 	.word	0x08006d20
 80063b8:	08006d31 	.word	0x08006d31

080063bc <__d2b>:
 80063bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	460f      	mov	r7, r1
 80063c2:	2101      	movs	r1, #1
 80063c4:	ec59 8b10 	vmov	r8, r9, d0
 80063c8:	4616      	mov	r6, r2
 80063ca:	f7ff fccd 	bl	8005d68 <_Balloc>
 80063ce:	4604      	mov	r4, r0
 80063d0:	b930      	cbnz	r0, 80063e0 <__d2b+0x24>
 80063d2:	4602      	mov	r2, r0
 80063d4:	4b23      	ldr	r3, [pc, #140]	@ (8006464 <__d2b+0xa8>)
 80063d6:	4824      	ldr	r0, [pc, #144]	@ (8006468 <__d2b+0xac>)
 80063d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80063dc:	f000 f910 	bl	8006600 <__assert_func>
 80063e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063e8:	b10d      	cbz	r5, 80063ee <__d2b+0x32>
 80063ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	f1b8 0300 	subs.w	r3, r8, #0
 80063f4:	d023      	beq.n	800643e <__d2b+0x82>
 80063f6:	4668      	mov	r0, sp
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	f7ff fd7c 	bl	8005ef6 <__lo0bits>
 80063fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006402:	b1d0      	cbz	r0, 800643a <__d2b+0x7e>
 8006404:	f1c0 0320 	rsb	r3, r0, #32
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	430b      	orrs	r3, r1
 800640e:	40c2      	lsrs	r2, r0
 8006410:	6163      	str	r3, [r4, #20]
 8006412:	9201      	str	r2, [sp, #4]
 8006414:	9b01      	ldr	r3, [sp, #4]
 8006416:	61a3      	str	r3, [r4, #24]
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf0c      	ite	eq
 800641c:	2201      	moveq	r2, #1
 800641e:	2202      	movne	r2, #2
 8006420:	6122      	str	r2, [r4, #16]
 8006422:	b1a5      	cbz	r5, 800644e <__d2b+0x92>
 8006424:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006428:	4405      	add	r5, r0
 800642a:	603d      	str	r5, [r7, #0]
 800642c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006430:	6030      	str	r0, [r6, #0]
 8006432:	4620      	mov	r0, r4
 8006434:	b003      	add	sp, #12
 8006436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800643a:	6161      	str	r1, [r4, #20]
 800643c:	e7ea      	b.n	8006414 <__d2b+0x58>
 800643e:	a801      	add	r0, sp, #4
 8006440:	f7ff fd59 	bl	8005ef6 <__lo0bits>
 8006444:	9b01      	ldr	r3, [sp, #4]
 8006446:	6163      	str	r3, [r4, #20]
 8006448:	3020      	adds	r0, #32
 800644a:	2201      	movs	r2, #1
 800644c:	e7e8      	b.n	8006420 <__d2b+0x64>
 800644e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006452:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006456:	6038      	str	r0, [r7, #0]
 8006458:	6918      	ldr	r0, [r3, #16]
 800645a:	f7ff fd2d 	bl	8005eb8 <__hi0bits>
 800645e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006462:	e7e5      	b.n	8006430 <__d2b+0x74>
 8006464:	08006d20 	.word	0x08006d20
 8006468:	08006d31 	.word	0x08006d31

0800646c <__sflush_r>:
 800646c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	0716      	lsls	r6, r2, #28
 8006476:	4605      	mov	r5, r0
 8006478:	460c      	mov	r4, r1
 800647a:	d454      	bmi.n	8006526 <__sflush_r+0xba>
 800647c:	684b      	ldr	r3, [r1, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	dc02      	bgt.n	8006488 <__sflush_r+0x1c>
 8006482:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	dd48      	ble.n	800651a <__sflush_r+0xae>
 8006488:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800648a:	2e00      	cmp	r6, #0
 800648c:	d045      	beq.n	800651a <__sflush_r+0xae>
 800648e:	2300      	movs	r3, #0
 8006490:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006494:	682f      	ldr	r7, [r5, #0]
 8006496:	6a21      	ldr	r1, [r4, #32]
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	d030      	beq.n	80064fe <__sflush_r+0x92>
 800649c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	0759      	lsls	r1, r3, #29
 80064a2:	d505      	bpl.n	80064b0 <__sflush_r+0x44>
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064aa:	b10b      	cbz	r3, 80064b0 <__sflush_r+0x44>
 80064ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064b4:	6a21      	ldr	r1, [r4, #32]
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b0      	blx	r6
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	d106      	bne.n	80064ce <__sflush_r+0x62>
 80064c0:	6829      	ldr	r1, [r5, #0]
 80064c2:	291d      	cmp	r1, #29
 80064c4:	d82b      	bhi.n	800651e <__sflush_r+0xb2>
 80064c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006570 <__sflush_r+0x104>)
 80064c8:	410a      	asrs	r2, r1
 80064ca:	07d6      	lsls	r6, r2, #31
 80064cc:	d427      	bmi.n	800651e <__sflush_r+0xb2>
 80064ce:	2200      	movs	r2, #0
 80064d0:	6062      	str	r2, [r4, #4]
 80064d2:	04d9      	lsls	r1, r3, #19
 80064d4:	6922      	ldr	r2, [r4, #16]
 80064d6:	6022      	str	r2, [r4, #0]
 80064d8:	d504      	bpl.n	80064e4 <__sflush_r+0x78>
 80064da:	1c42      	adds	r2, r0, #1
 80064dc:	d101      	bne.n	80064e2 <__sflush_r+0x76>
 80064de:	682b      	ldr	r3, [r5, #0]
 80064e0:	b903      	cbnz	r3, 80064e4 <__sflush_r+0x78>
 80064e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80064e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064e6:	602f      	str	r7, [r5, #0]
 80064e8:	b1b9      	cbz	r1, 800651a <__sflush_r+0xae>
 80064ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064ee:	4299      	cmp	r1, r3
 80064f0:	d002      	beq.n	80064f8 <__sflush_r+0x8c>
 80064f2:	4628      	mov	r0, r5
 80064f4:	f7ff fb38 	bl	8005b68 <_free_r>
 80064f8:	2300      	movs	r3, #0
 80064fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80064fc:	e00d      	b.n	800651a <__sflush_r+0xae>
 80064fe:	2301      	movs	r3, #1
 8006500:	4628      	mov	r0, r5
 8006502:	47b0      	blx	r6
 8006504:	4602      	mov	r2, r0
 8006506:	1c50      	adds	r0, r2, #1
 8006508:	d1c9      	bne.n	800649e <__sflush_r+0x32>
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0c6      	beq.n	800649e <__sflush_r+0x32>
 8006510:	2b1d      	cmp	r3, #29
 8006512:	d001      	beq.n	8006518 <__sflush_r+0xac>
 8006514:	2b16      	cmp	r3, #22
 8006516:	d11e      	bne.n	8006556 <__sflush_r+0xea>
 8006518:	602f      	str	r7, [r5, #0]
 800651a:	2000      	movs	r0, #0
 800651c:	e022      	b.n	8006564 <__sflush_r+0xf8>
 800651e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006522:	b21b      	sxth	r3, r3
 8006524:	e01b      	b.n	800655e <__sflush_r+0xf2>
 8006526:	690f      	ldr	r7, [r1, #16]
 8006528:	2f00      	cmp	r7, #0
 800652a:	d0f6      	beq.n	800651a <__sflush_r+0xae>
 800652c:	0793      	lsls	r3, r2, #30
 800652e:	680e      	ldr	r6, [r1, #0]
 8006530:	bf08      	it	eq
 8006532:	694b      	ldreq	r3, [r1, #20]
 8006534:	600f      	str	r7, [r1, #0]
 8006536:	bf18      	it	ne
 8006538:	2300      	movne	r3, #0
 800653a:	eba6 0807 	sub.w	r8, r6, r7
 800653e:	608b      	str	r3, [r1, #8]
 8006540:	f1b8 0f00 	cmp.w	r8, #0
 8006544:	dde9      	ble.n	800651a <__sflush_r+0xae>
 8006546:	6a21      	ldr	r1, [r4, #32]
 8006548:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800654a:	4643      	mov	r3, r8
 800654c:	463a      	mov	r2, r7
 800654e:	4628      	mov	r0, r5
 8006550:	47b0      	blx	r6
 8006552:	2800      	cmp	r0, #0
 8006554:	dc08      	bgt.n	8006568 <__sflush_r+0xfc>
 8006556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006568:	4407      	add	r7, r0
 800656a:	eba8 0800 	sub.w	r8, r8, r0
 800656e:	e7e7      	b.n	8006540 <__sflush_r+0xd4>
 8006570:	dfbffffe 	.word	0xdfbffffe

08006574 <_fflush_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	690b      	ldr	r3, [r1, #16]
 8006578:	4605      	mov	r5, r0
 800657a:	460c      	mov	r4, r1
 800657c:	b913      	cbnz	r3, 8006584 <_fflush_r+0x10>
 800657e:	2500      	movs	r5, #0
 8006580:	4628      	mov	r0, r5
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	b118      	cbz	r0, 800658e <_fflush_r+0x1a>
 8006586:	6a03      	ldr	r3, [r0, #32]
 8006588:	b90b      	cbnz	r3, 800658e <_fflush_r+0x1a>
 800658a:	f7fe fb8d 	bl	8004ca8 <__sinit>
 800658e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f3      	beq.n	800657e <_fflush_r+0xa>
 8006596:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006598:	07d0      	lsls	r0, r2, #31
 800659a:	d404      	bmi.n	80065a6 <_fflush_r+0x32>
 800659c:	0599      	lsls	r1, r3, #22
 800659e:	d402      	bmi.n	80065a6 <_fflush_r+0x32>
 80065a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065a2:	f7fe fc92 	bl	8004eca <__retarget_lock_acquire_recursive>
 80065a6:	4628      	mov	r0, r5
 80065a8:	4621      	mov	r1, r4
 80065aa:	f7ff ff5f 	bl	800646c <__sflush_r>
 80065ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065b0:	07da      	lsls	r2, r3, #31
 80065b2:	4605      	mov	r5, r0
 80065b4:	d4e4      	bmi.n	8006580 <_fflush_r+0xc>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	059b      	lsls	r3, r3, #22
 80065ba:	d4e1      	bmi.n	8006580 <_fflush_r+0xc>
 80065bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065be:	f7fe fc85 	bl	8004ecc <__retarget_lock_release_recursive>
 80065c2:	e7dd      	b.n	8006580 <_fflush_r+0xc>

080065c4 <_sbrk_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d06      	ldr	r5, [pc, #24]	@ (80065e0 <_sbrk_r+0x1c>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	602b      	str	r3, [r5, #0]
 80065d0:	f7fa ff60 	bl	8001494 <_sbrk>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_sbrk_r+0x1a>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	b103      	cbz	r3, 80065de <_sbrk_r+0x1a>
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	20000578 	.word	0x20000578

080065e4 <memcpy>:
 80065e4:	440a      	add	r2, r1
 80065e6:	4291      	cmp	r1, r2
 80065e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065ec:	d100      	bne.n	80065f0 <memcpy+0xc>
 80065ee:	4770      	bx	lr
 80065f0:	b510      	push	{r4, lr}
 80065f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065fa:	4291      	cmp	r1, r2
 80065fc:	d1f9      	bne.n	80065f2 <memcpy+0xe>
 80065fe:	bd10      	pop	{r4, pc}

08006600 <__assert_func>:
 8006600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006602:	4614      	mov	r4, r2
 8006604:	461a      	mov	r2, r3
 8006606:	4b09      	ldr	r3, [pc, #36]	@ (800662c <__assert_func+0x2c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4605      	mov	r5, r0
 800660c:	68d8      	ldr	r0, [r3, #12]
 800660e:	b954      	cbnz	r4, 8006626 <__assert_func+0x26>
 8006610:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <__assert_func+0x30>)
 8006612:	461c      	mov	r4, r3
 8006614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006618:	9100      	str	r1, [sp, #0]
 800661a:	462b      	mov	r3, r5
 800661c:	4905      	ldr	r1, [pc, #20]	@ (8006634 <__assert_func+0x34>)
 800661e:	f000 f841 	bl	80066a4 <fiprintf>
 8006622:	f000 f851 	bl	80066c8 <abort>
 8006626:	4b04      	ldr	r3, [pc, #16]	@ (8006638 <__assert_func+0x38>)
 8006628:	e7f4      	b.n	8006614 <__assert_func+0x14>
 800662a:	bf00      	nop
 800662c:	20000018 	.word	0x20000018
 8006630:	08006ecd 	.word	0x08006ecd
 8006634:	08006e9f 	.word	0x08006e9f
 8006638:	08006e92 	.word	0x08006e92

0800663c <_calloc_r>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	fba1 5402 	umull	r5, r4, r1, r2
 8006642:	b93c      	cbnz	r4, 8006654 <_calloc_r+0x18>
 8006644:	4629      	mov	r1, r5
 8006646:	f7ff fb03 	bl	8005c50 <_malloc_r>
 800664a:	4606      	mov	r6, r0
 800664c:	b928      	cbnz	r0, 800665a <_calloc_r+0x1e>
 800664e:	2600      	movs	r6, #0
 8006650:	4630      	mov	r0, r6
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	220c      	movs	r2, #12
 8006656:	6002      	str	r2, [r0, #0]
 8006658:	e7f9      	b.n	800664e <_calloc_r+0x12>
 800665a:	462a      	mov	r2, r5
 800665c:	4621      	mov	r1, r4
 800665e:	f7fe fbb6 	bl	8004dce <memset>
 8006662:	e7f5      	b.n	8006650 <_calloc_r+0x14>

08006664 <__ascii_mbtowc>:
 8006664:	b082      	sub	sp, #8
 8006666:	b901      	cbnz	r1, 800666a <__ascii_mbtowc+0x6>
 8006668:	a901      	add	r1, sp, #4
 800666a:	b142      	cbz	r2, 800667e <__ascii_mbtowc+0x1a>
 800666c:	b14b      	cbz	r3, 8006682 <__ascii_mbtowc+0x1e>
 800666e:	7813      	ldrb	r3, [r2, #0]
 8006670:	600b      	str	r3, [r1, #0]
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	1e10      	subs	r0, r2, #0
 8006676:	bf18      	it	ne
 8006678:	2001      	movne	r0, #1
 800667a:	b002      	add	sp, #8
 800667c:	4770      	bx	lr
 800667e:	4610      	mov	r0, r2
 8006680:	e7fb      	b.n	800667a <__ascii_mbtowc+0x16>
 8006682:	f06f 0001 	mvn.w	r0, #1
 8006686:	e7f8      	b.n	800667a <__ascii_mbtowc+0x16>

08006688 <__ascii_wctomb>:
 8006688:	4603      	mov	r3, r0
 800668a:	4608      	mov	r0, r1
 800668c:	b141      	cbz	r1, 80066a0 <__ascii_wctomb+0x18>
 800668e:	2aff      	cmp	r2, #255	@ 0xff
 8006690:	d904      	bls.n	800669c <__ascii_wctomb+0x14>
 8006692:	228a      	movs	r2, #138	@ 0x8a
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	f04f 30ff 	mov.w	r0, #4294967295
 800669a:	4770      	bx	lr
 800669c:	700a      	strb	r2, [r1, #0]
 800669e:	2001      	movs	r0, #1
 80066a0:	4770      	bx	lr
	...

080066a4 <fiprintf>:
 80066a4:	b40e      	push	{r1, r2, r3}
 80066a6:	b503      	push	{r0, r1, lr}
 80066a8:	4601      	mov	r1, r0
 80066aa:	ab03      	add	r3, sp, #12
 80066ac:	4805      	ldr	r0, [pc, #20]	@ (80066c4 <fiprintf+0x20>)
 80066ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80066b2:	6800      	ldr	r0, [r0, #0]
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	f000 f837 	bl	8006728 <_vfiprintf_r>
 80066ba:	b002      	add	sp, #8
 80066bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80066c0:	b003      	add	sp, #12
 80066c2:	4770      	bx	lr
 80066c4:	20000018 	.word	0x20000018

080066c8 <abort>:
 80066c8:	b508      	push	{r3, lr}
 80066ca:	2006      	movs	r0, #6
 80066cc:	f000 fa00 	bl	8006ad0 <raise>
 80066d0:	2001      	movs	r0, #1
 80066d2:	f7fa fe67 	bl	80013a4 <_exit>

080066d6 <__sfputc_r>:
 80066d6:	6893      	ldr	r3, [r2, #8]
 80066d8:	3b01      	subs	r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	b410      	push	{r4}
 80066de:	6093      	str	r3, [r2, #8]
 80066e0:	da08      	bge.n	80066f4 <__sfputc_r+0x1e>
 80066e2:	6994      	ldr	r4, [r2, #24]
 80066e4:	42a3      	cmp	r3, r4
 80066e6:	db01      	blt.n	80066ec <__sfputc_r+0x16>
 80066e8:	290a      	cmp	r1, #10
 80066ea:	d103      	bne.n	80066f4 <__sfputc_r+0x1e>
 80066ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066f0:	f000 b932 	b.w	8006958 <__swbuf_r>
 80066f4:	6813      	ldr	r3, [r2, #0]
 80066f6:	1c58      	adds	r0, r3, #1
 80066f8:	6010      	str	r0, [r2, #0]
 80066fa:	7019      	strb	r1, [r3, #0]
 80066fc:	4608      	mov	r0, r1
 80066fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006702:	4770      	bx	lr

08006704 <__sfputs_r>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	4606      	mov	r6, r0
 8006708:	460f      	mov	r7, r1
 800670a:	4614      	mov	r4, r2
 800670c:	18d5      	adds	r5, r2, r3
 800670e:	42ac      	cmp	r4, r5
 8006710:	d101      	bne.n	8006716 <__sfputs_r+0x12>
 8006712:	2000      	movs	r0, #0
 8006714:	e007      	b.n	8006726 <__sfputs_r+0x22>
 8006716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671a:	463a      	mov	r2, r7
 800671c:	4630      	mov	r0, r6
 800671e:	f7ff ffda 	bl	80066d6 <__sfputc_r>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d1f3      	bne.n	800670e <__sfputs_r+0xa>
 8006726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006728 <_vfiprintf_r>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	460d      	mov	r5, r1
 800672e:	b09d      	sub	sp, #116	@ 0x74
 8006730:	4614      	mov	r4, r2
 8006732:	4698      	mov	r8, r3
 8006734:	4606      	mov	r6, r0
 8006736:	b118      	cbz	r0, 8006740 <_vfiprintf_r+0x18>
 8006738:	6a03      	ldr	r3, [r0, #32]
 800673a:	b90b      	cbnz	r3, 8006740 <_vfiprintf_r+0x18>
 800673c:	f7fe fab4 	bl	8004ca8 <__sinit>
 8006740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006742:	07d9      	lsls	r1, r3, #31
 8006744:	d405      	bmi.n	8006752 <_vfiprintf_r+0x2a>
 8006746:	89ab      	ldrh	r3, [r5, #12]
 8006748:	059a      	lsls	r2, r3, #22
 800674a:	d402      	bmi.n	8006752 <_vfiprintf_r+0x2a>
 800674c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800674e:	f7fe fbbc 	bl	8004eca <__retarget_lock_acquire_recursive>
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	071b      	lsls	r3, r3, #28
 8006756:	d501      	bpl.n	800675c <_vfiprintf_r+0x34>
 8006758:	692b      	ldr	r3, [r5, #16]
 800675a:	b99b      	cbnz	r3, 8006784 <_vfiprintf_r+0x5c>
 800675c:	4629      	mov	r1, r5
 800675e:	4630      	mov	r0, r6
 8006760:	f000 f938 	bl	80069d4 <__swsetup_r>
 8006764:	b170      	cbz	r0, 8006784 <_vfiprintf_r+0x5c>
 8006766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006768:	07dc      	lsls	r4, r3, #31
 800676a:	d504      	bpl.n	8006776 <_vfiprintf_r+0x4e>
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	b01d      	add	sp, #116	@ 0x74
 8006772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	0598      	lsls	r0, r3, #22
 800677a:	d4f7      	bmi.n	800676c <_vfiprintf_r+0x44>
 800677c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800677e:	f7fe fba5 	bl	8004ecc <__retarget_lock_release_recursive>
 8006782:	e7f3      	b.n	800676c <_vfiprintf_r+0x44>
 8006784:	2300      	movs	r3, #0
 8006786:	9309      	str	r3, [sp, #36]	@ 0x24
 8006788:	2320      	movs	r3, #32
 800678a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800678e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006792:	2330      	movs	r3, #48	@ 0x30
 8006794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006944 <_vfiprintf_r+0x21c>
 8006798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800679c:	f04f 0901 	mov.w	r9, #1
 80067a0:	4623      	mov	r3, r4
 80067a2:	469a      	mov	sl, r3
 80067a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067a8:	b10a      	cbz	r2, 80067ae <_vfiprintf_r+0x86>
 80067aa:	2a25      	cmp	r2, #37	@ 0x25
 80067ac:	d1f9      	bne.n	80067a2 <_vfiprintf_r+0x7a>
 80067ae:	ebba 0b04 	subs.w	fp, sl, r4
 80067b2:	d00b      	beq.n	80067cc <_vfiprintf_r+0xa4>
 80067b4:	465b      	mov	r3, fp
 80067b6:	4622      	mov	r2, r4
 80067b8:	4629      	mov	r1, r5
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7ff ffa2 	bl	8006704 <__sfputs_r>
 80067c0:	3001      	adds	r0, #1
 80067c2:	f000 80a7 	beq.w	8006914 <_vfiprintf_r+0x1ec>
 80067c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067c8:	445a      	add	r2, fp
 80067ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80067cc:	f89a 3000 	ldrb.w	r3, [sl]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 809f 	beq.w	8006914 <_vfiprintf_r+0x1ec>
 80067d6:	2300      	movs	r3, #0
 80067d8:	f04f 32ff 	mov.w	r2, #4294967295
 80067dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067e0:	f10a 0a01 	add.w	sl, sl, #1
 80067e4:	9304      	str	r3, [sp, #16]
 80067e6:	9307      	str	r3, [sp, #28]
 80067e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80067ee:	4654      	mov	r4, sl
 80067f0:	2205      	movs	r2, #5
 80067f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f6:	4853      	ldr	r0, [pc, #332]	@ (8006944 <_vfiprintf_r+0x21c>)
 80067f8:	f7f9 fd02 	bl	8000200 <memchr>
 80067fc:	9a04      	ldr	r2, [sp, #16]
 80067fe:	b9d8      	cbnz	r0, 8006838 <_vfiprintf_r+0x110>
 8006800:	06d1      	lsls	r1, r2, #27
 8006802:	bf44      	itt	mi
 8006804:	2320      	movmi	r3, #32
 8006806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800680a:	0713      	lsls	r3, r2, #28
 800680c:	bf44      	itt	mi
 800680e:	232b      	movmi	r3, #43	@ 0x2b
 8006810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006814:	f89a 3000 	ldrb.w	r3, [sl]
 8006818:	2b2a      	cmp	r3, #42	@ 0x2a
 800681a:	d015      	beq.n	8006848 <_vfiprintf_r+0x120>
 800681c:	9a07      	ldr	r2, [sp, #28]
 800681e:	4654      	mov	r4, sl
 8006820:	2000      	movs	r0, #0
 8006822:	f04f 0c0a 	mov.w	ip, #10
 8006826:	4621      	mov	r1, r4
 8006828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800682c:	3b30      	subs	r3, #48	@ 0x30
 800682e:	2b09      	cmp	r3, #9
 8006830:	d94b      	bls.n	80068ca <_vfiprintf_r+0x1a2>
 8006832:	b1b0      	cbz	r0, 8006862 <_vfiprintf_r+0x13a>
 8006834:	9207      	str	r2, [sp, #28]
 8006836:	e014      	b.n	8006862 <_vfiprintf_r+0x13a>
 8006838:	eba0 0308 	sub.w	r3, r0, r8
 800683c:	fa09 f303 	lsl.w	r3, r9, r3
 8006840:	4313      	orrs	r3, r2
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	46a2      	mov	sl, r4
 8006846:	e7d2      	b.n	80067ee <_vfiprintf_r+0xc6>
 8006848:	9b03      	ldr	r3, [sp, #12]
 800684a:	1d19      	adds	r1, r3, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	9103      	str	r1, [sp, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	bfbb      	ittet	lt
 8006854:	425b      	neglt	r3, r3
 8006856:	f042 0202 	orrlt.w	r2, r2, #2
 800685a:	9307      	strge	r3, [sp, #28]
 800685c:	9307      	strlt	r3, [sp, #28]
 800685e:	bfb8      	it	lt
 8006860:	9204      	strlt	r2, [sp, #16]
 8006862:	7823      	ldrb	r3, [r4, #0]
 8006864:	2b2e      	cmp	r3, #46	@ 0x2e
 8006866:	d10a      	bne.n	800687e <_vfiprintf_r+0x156>
 8006868:	7863      	ldrb	r3, [r4, #1]
 800686a:	2b2a      	cmp	r3, #42	@ 0x2a
 800686c:	d132      	bne.n	80068d4 <_vfiprintf_r+0x1ac>
 800686e:	9b03      	ldr	r3, [sp, #12]
 8006870:	1d1a      	adds	r2, r3, #4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	9203      	str	r2, [sp, #12]
 8006876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800687a:	3402      	adds	r4, #2
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006954 <_vfiprintf_r+0x22c>
 8006882:	7821      	ldrb	r1, [r4, #0]
 8006884:	2203      	movs	r2, #3
 8006886:	4650      	mov	r0, sl
 8006888:	f7f9 fcba 	bl	8000200 <memchr>
 800688c:	b138      	cbz	r0, 800689e <_vfiprintf_r+0x176>
 800688e:	9b04      	ldr	r3, [sp, #16]
 8006890:	eba0 000a 	sub.w	r0, r0, sl
 8006894:	2240      	movs	r2, #64	@ 0x40
 8006896:	4082      	lsls	r2, r0
 8006898:	4313      	orrs	r3, r2
 800689a:	3401      	adds	r4, #1
 800689c:	9304      	str	r3, [sp, #16]
 800689e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a2:	4829      	ldr	r0, [pc, #164]	@ (8006948 <_vfiprintf_r+0x220>)
 80068a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068a8:	2206      	movs	r2, #6
 80068aa:	f7f9 fca9 	bl	8000200 <memchr>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d03f      	beq.n	8006932 <_vfiprintf_r+0x20a>
 80068b2:	4b26      	ldr	r3, [pc, #152]	@ (800694c <_vfiprintf_r+0x224>)
 80068b4:	bb1b      	cbnz	r3, 80068fe <_vfiprintf_r+0x1d6>
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	3307      	adds	r3, #7
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	3308      	adds	r3, #8
 80068c0:	9303      	str	r3, [sp, #12]
 80068c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c4:	443b      	add	r3, r7
 80068c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068c8:	e76a      	b.n	80067a0 <_vfiprintf_r+0x78>
 80068ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ce:	460c      	mov	r4, r1
 80068d0:	2001      	movs	r0, #1
 80068d2:	e7a8      	b.n	8006826 <_vfiprintf_r+0xfe>
 80068d4:	2300      	movs	r3, #0
 80068d6:	3401      	adds	r4, #1
 80068d8:	9305      	str	r3, [sp, #20]
 80068da:	4619      	mov	r1, r3
 80068dc:	f04f 0c0a 	mov.w	ip, #10
 80068e0:	4620      	mov	r0, r4
 80068e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068e6:	3a30      	subs	r2, #48	@ 0x30
 80068e8:	2a09      	cmp	r2, #9
 80068ea:	d903      	bls.n	80068f4 <_vfiprintf_r+0x1cc>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0c6      	beq.n	800687e <_vfiprintf_r+0x156>
 80068f0:	9105      	str	r1, [sp, #20]
 80068f2:	e7c4      	b.n	800687e <_vfiprintf_r+0x156>
 80068f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068f8:	4604      	mov	r4, r0
 80068fa:	2301      	movs	r3, #1
 80068fc:	e7f0      	b.n	80068e0 <_vfiprintf_r+0x1b8>
 80068fe:	ab03      	add	r3, sp, #12
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	462a      	mov	r2, r5
 8006904:	4b12      	ldr	r3, [pc, #72]	@ (8006950 <_vfiprintf_r+0x228>)
 8006906:	a904      	add	r1, sp, #16
 8006908:	4630      	mov	r0, r6
 800690a:	f7fd fd89 	bl	8004420 <_printf_float>
 800690e:	4607      	mov	r7, r0
 8006910:	1c78      	adds	r0, r7, #1
 8006912:	d1d6      	bne.n	80068c2 <_vfiprintf_r+0x19a>
 8006914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006916:	07d9      	lsls	r1, r3, #31
 8006918:	d405      	bmi.n	8006926 <_vfiprintf_r+0x1fe>
 800691a:	89ab      	ldrh	r3, [r5, #12]
 800691c:	059a      	lsls	r2, r3, #22
 800691e:	d402      	bmi.n	8006926 <_vfiprintf_r+0x1fe>
 8006920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006922:	f7fe fad3 	bl	8004ecc <__retarget_lock_release_recursive>
 8006926:	89ab      	ldrh	r3, [r5, #12]
 8006928:	065b      	lsls	r3, r3, #25
 800692a:	f53f af1f 	bmi.w	800676c <_vfiprintf_r+0x44>
 800692e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006930:	e71e      	b.n	8006770 <_vfiprintf_r+0x48>
 8006932:	ab03      	add	r3, sp, #12
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	462a      	mov	r2, r5
 8006938:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <_vfiprintf_r+0x228>)
 800693a:	a904      	add	r1, sp, #16
 800693c:	4630      	mov	r0, r6
 800693e:	f7fe f807 	bl	8004950 <_printf_i>
 8006942:	e7e4      	b.n	800690e <_vfiprintf_r+0x1e6>
 8006944:	08006fcf 	.word	0x08006fcf
 8006948:	08006fd9 	.word	0x08006fd9
 800694c:	08004421 	.word	0x08004421
 8006950:	08006705 	.word	0x08006705
 8006954:	08006fd5 	.word	0x08006fd5

08006958 <__swbuf_r>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	460e      	mov	r6, r1
 800695c:	4614      	mov	r4, r2
 800695e:	4605      	mov	r5, r0
 8006960:	b118      	cbz	r0, 800696a <__swbuf_r+0x12>
 8006962:	6a03      	ldr	r3, [r0, #32]
 8006964:	b90b      	cbnz	r3, 800696a <__swbuf_r+0x12>
 8006966:	f7fe f99f 	bl	8004ca8 <__sinit>
 800696a:	69a3      	ldr	r3, [r4, #24]
 800696c:	60a3      	str	r3, [r4, #8]
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	071a      	lsls	r2, r3, #28
 8006972:	d501      	bpl.n	8006978 <__swbuf_r+0x20>
 8006974:	6923      	ldr	r3, [r4, #16]
 8006976:	b943      	cbnz	r3, 800698a <__swbuf_r+0x32>
 8006978:	4621      	mov	r1, r4
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f82a 	bl	80069d4 <__swsetup_r>
 8006980:	b118      	cbz	r0, 800698a <__swbuf_r+0x32>
 8006982:	f04f 37ff 	mov.w	r7, #4294967295
 8006986:	4638      	mov	r0, r7
 8006988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	6922      	ldr	r2, [r4, #16]
 800698e:	1a98      	subs	r0, r3, r2
 8006990:	6963      	ldr	r3, [r4, #20]
 8006992:	b2f6      	uxtb	r6, r6
 8006994:	4283      	cmp	r3, r0
 8006996:	4637      	mov	r7, r6
 8006998:	dc05      	bgt.n	80069a6 <__swbuf_r+0x4e>
 800699a:	4621      	mov	r1, r4
 800699c:	4628      	mov	r0, r5
 800699e:	f7ff fde9 	bl	8006574 <_fflush_r>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d1ed      	bne.n	8006982 <__swbuf_r+0x2a>
 80069a6:	68a3      	ldr	r3, [r4, #8]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	60a3      	str	r3, [r4, #8]
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	6022      	str	r2, [r4, #0]
 80069b2:	701e      	strb	r6, [r3, #0]
 80069b4:	6962      	ldr	r2, [r4, #20]
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d004      	beq.n	80069c6 <__swbuf_r+0x6e>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	07db      	lsls	r3, r3, #31
 80069c0:	d5e1      	bpl.n	8006986 <__swbuf_r+0x2e>
 80069c2:	2e0a      	cmp	r6, #10
 80069c4:	d1df      	bne.n	8006986 <__swbuf_r+0x2e>
 80069c6:	4621      	mov	r1, r4
 80069c8:	4628      	mov	r0, r5
 80069ca:	f7ff fdd3 	bl	8006574 <_fflush_r>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d0d9      	beq.n	8006986 <__swbuf_r+0x2e>
 80069d2:	e7d6      	b.n	8006982 <__swbuf_r+0x2a>

080069d4 <__swsetup_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4b29      	ldr	r3, [pc, #164]	@ (8006a7c <__swsetup_r+0xa8>)
 80069d8:	4605      	mov	r5, r0
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	460c      	mov	r4, r1
 80069de:	b118      	cbz	r0, 80069e8 <__swsetup_r+0x14>
 80069e0:	6a03      	ldr	r3, [r0, #32]
 80069e2:	b90b      	cbnz	r3, 80069e8 <__swsetup_r+0x14>
 80069e4:	f7fe f960 	bl	8004ca8 <__sinit>
 80069e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ec:	0719      	lsls	r1, r3, #28
 80069ee:	d422      	bmi.n	8006a36 <__swsetup_r+0x62>
 80069f0:	06da      	lsls	r2, r3, #27
 80069f2:	d407      	bmi.n	8006a04 <__swsetup_r+0x30>
 80069f4:	2209      	movs	r2, #9
 80069f6:	602a      	str	r2, [r5, #0]
 80069f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006a02:	e033      	b.n	8006a6c <__swsetup_r+0x98>
 8006a04:	0758      	lsls	r0, r3, #29
 8006a06:	d512      	bpl.n	8006a2e <__swsetup_r+0x5a>
 8006a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a0a:	b141      	cbz	r1, 8006a1e <__swsetup_r+0x4a>
 8006a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a10:	4299      	cmp	r1, r3
 8006a12:	d002      	beq.n	8006a1a <__swsetup_r+0x46>
 8006a14:	4628      	mov	r0, r5
 8006a16:	f7ff f8a7 	bl	8005b68 <_free_r>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	2300      	movs	r3, #0
 8006a28:	6063      	str	r3, [r4, #4]
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	f043 0308 	orr.w	r3, r3, #8
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	6923      	ldr	r3, [r4, #16]
 8006a38:	b94b      	cbnz	r3, 8006a4e <__swsetup_r+0x7a>
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a44:	d003      	beq.n	8006a4e <__swsetup_r+0x7a>
 8006a46:	4621      	mov	r1, r4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f000 f883 	bl	8006b54 <__smakebuf_r>
 8006a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a52:	f013 0201 	ands.w	r2, r3, #1
 8006a56:	d00a      	beq.n	8006a6e <__swsetup_r+0x9a>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	60a2      	str	r2, [r4, #8]
 8006a5c:	6962      	ldr	r2, [r4, #20]
 8006a5e:	4252      	negs	r2, r2
 8006a60:	61a2      	str	r2, [r4, #24]
 8006a62:	6922      	ldr	r2, [r4, #16]
 8006a64:	b942      	cbnz	r2, 8006a78 <__swsetup_r+0xa4>
 8006a66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a6a:	d1c5      	bne.n	80069f8 <__swsetup_r+0x24>
 8006a6c:	bd38      	pop	{r3, r4, r5, pc}
 8006a6e:	0799      	lsls	r1, r3, #30
 8006a70:	bf58      	it	pl
 8006a72:	6962      	ldrpl	r2, [r4, #20]
 8006a74:	60a2      	str	r2, [r4, #8]
 8006a76:	e7f4      	b.n	8006a62 <__swsetup_r+0x8e>
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e7f7      	b.n	8006a6c <__swsetup_r+0x98>
 8006a7c:	20000018 	.word	0x20000018

08006a80 <_raise_r>:
 8006a80:	291f      	cmp	r1, #31
 8006a82:	b538      	push	{r3, r4, r5, lr}
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	d904      	bls.n	8006a94 <_raise_r+0x14>
 8006a8a:	2316      	movs	r3, #22
 8006a8c:	6003      	str	r3, [r0, #0]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006a96:	b112      	cbz	r2, 8006a9e <_raise_r+0x1e>
 8006a98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a9c:	b94b      	cbnz	r3, 8006ab2 <_raise_r+0x32>
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f830 	bl	8006b04 <_getpid_r>
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aae:	f000 b817 	b.w	8006ae0 <_kill_r>
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d00a      	beq.n	8006acc <_raise_r+0x4c>
 8006ab6:	1c59      	adds	r1, r3, #1
 8006ab8:	d103      	bne.n	8006ac2 <_raise_r+0x42>
 8006aba:	2316      	movs	r3, #22
 8006abc:	6003      	str	r3, [r0, #0]
 8006abe:	2001      	movs	r0, #1
 8006ac0:	e7e7      	b.n	8006a92 <_raise_r+0x12>
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ac8:	4620      	mov	r0, r4
 8006aca:	4798      	blx	r3
 8006acc:	2000      	movs	r0, #0
 8006ace:	e7e0      	b.n	8006a92 <_raise_r+0x12>

08006ad0 <raise>:
 8006ad0:	4b02      	ldr	r3, [pc, #8]	@ (8006adc <raise+0xc>)
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	f7ff bfd3 	b.w	8006a80 <_raise_r>
 8006ada:	bf00      	nop
 8006adc:	20000018 	.word	0x20000018

08006ae0 <_kill_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	@ (8006b00 <_kill_r+0x20>)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	f7fa fc49 	bl	8001384 <_kill>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d102      	bne.n	8006afc <_kill_r+0x1c>
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	b103      	cbz	r3, 8006afc <_kill_r+0x1c>
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	bd38      	pop	{r3, r4, r5, pc}
 8006afe:	bf00      	nop
 8006b00:	20000578 	.word	0x20000578

08006b04 <_getpid_r>:
 8006b04:	f7fa bc36 	b.w	8001374 <_getpid>

08006b08 <__swhatbuf_r>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b10:	2900      	cmp	r1, #0
 8006b12:	b096      	sub	sp, #88	@ 0x58
 8006b14:	4615      	mov	r5, r2
 8006b16:	461e      	mov	r6, r3
 8006b18:	da0d      	bge.n	8006b36 <__swhatbuf_r+0x2e>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b20:	f04f 0100 	mov.w	r1, #0
 8006b24:	bf14      	ite	ne
 8006b26:	2340      	movne	r3, #64	@ 0x40
 8006b28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	6031      	str	r1, [r6, #0]
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	b016      	add	sp, #88	@ 0x58
 8006b34:	bd70      	pop	{r4, r5, r6, pc}
 8006b36:	466a      	mov	r2, sp
 8006b38:	f000 f848 	bl	8006bcc <_fstat_r>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	dbec      	blt.n	8006b1a <__swhatbuf_r+0x12>
 8006b40:	9901      	ldr	r1, [sp, #4]
 8006b42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b4a:	4259      	negs	r1, r3
 8006b4c:	4159      	adcs	r1, r3
 8006b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b52:	e7eb      	b.n	8006b2c <__swhatbuf_r+0x24>

08006b54 <__smakebuf_r>:
 8006b54:	898b      	ldrh	r3, [r1, #12]
 8006b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b58:	079d      	lsls	r5, r3, #30
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	d507      	bpl.n	8006b70 <__smakebuf_r+0x1c>
 8006b60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	6123      	str	r3, [r4, #16]
 8006b68:	2301      	movs	r3, #1
 8006b6a:	6163      	str	r3, [r4, #20]
 8006b6c:	b003      	add	sp, #12
 8006b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b70:	ab01      	add	r3, sp, #4
 8006b72:	466a      	mov	r2, sp
 8006b74:	f7ff ffc8 	bl	8006b08 <__swhatbuf_r>
 8006b78:	9f00      	ldr	r7, [sp, #0]
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff f866 	bl	8005c50 <_malloc_r>
 8006b84:	b948      	cbnz	r0, 8006b9a <__smakebuf_r+0x46>
 8006b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b8a:	059a      	lsls	r2, r3, #22
 8006b8c:	d4ee      	bmi.n	8006b6c <__smakebuf_r+0x18>
 8006b8e:	f023 0303 	bic.w	r3, r3, #3
 8006b92:	f043 0302 	orr.w	r3, r3, #2
 8006b96:	81a3      	strh	r3, [r4, #12]
 8006b98:	e7e2      	b.n	8006b60 <__smakebuf_r+0xc>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	6020      	str	r0, [r4, #0]
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	9b01      	ldr	r3, [sp, #4]
 8006ba6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006baa:	b15b      	cbz	r3, 8006bc4 <__smakebuf_r+0x70>
 8006bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f000 f81d 	bl	8006bf0 <_isatty_r>
 8006bb6:	b128      	cbz	r0, 8006bc4 <__smakebuf_r+0x70>
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	f023 0303 	bic.w	r3, r3, #3
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	81a3      	strh	r3, [r4, #12]
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	431d      	orrs	r5, r3
 8006bc8:	81a5      	strh	r5, [r4, #12]
 8006bca:	e7cf      	b.n	8006b6c <__smakebuf_r+0x18>

08006bcc <_fstat_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d07      	ldr	r5, [pc, #28]	@ (8006bec <_fstat_r+0x20>)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	f7fa fc33 	bl	8001444 <_fstat>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d102      	bne.n	8006be8 <_fstat_r+0x1c>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b103      	cbz	r3, 8006be8 <_fstat_r+0x1c>
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	bd38      	pop	{r3, r4, r5, pc}
 8006bea:	bf00      	nop
 8006bec:	20000578 	.word	0x20000578

08006bf0 <_isatty_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d06      	ldr	r5, [pc, #24]	@ (8006c0c <_isatty_r+0x1c>)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	602b      	str	r3, [r5, #0]
 8006bfc:	f7fa fc32 	bl	8001464 <_isatty>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d102      	bne.n	8006c0a <_isatty_r+0x1a>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b103      	cbz	r3, 8006c0a <_isatty_r+0x1a>
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	20000578 	.word	0x20000578

08006c10 <_init>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	bf00      	nop
 8006c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c16:	bc08      	pop	{r3}
 8006c18:	469e      	mov	lr, r3
 8006c1a:	4770      	bx	lr

08006c1c <_fini>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	bf00      	nop
 8006c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c22:	bc08      	pop	{r3}
 8006c24:	469e      	mov	lr, r3
 8006c26:	4770      	bx	lr
